using System;
using System.IO;
using System.Xml;
using System.Data;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Web;

using System.Web.Services;
using System.Web.Script.Serialization;
using iTextSharp;
using iTextSharp.text;
using iTextSharp.text.pdf;
using Common;
using System.Text;

#region "ProgressiveReport"
public class ProgressiveReport
{


    public static iTextSharp.text.Font font12B = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
    public static iTextSharp.text.Font font12 = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
    private static iTextSharp.text.Font font11B = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
    private static iTextSharp.text.Font font11 = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
    public static iTextSharp.text.Font font10B = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
    public static iTextSharp.text.Font font10 = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
    public static iTextSharp.text.Font font9B = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
    public static iTextSharp.text.Font font9 = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
    public static iTextSharp.text.Font font11BU = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.UNDERLINE, BaseColor.BLACK);
    public static iTextSharp.text.Font font8B = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
    public static iTextSharp.text.Font font8BI = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.BOLDITALIC, BaseColor.BLACK);
    public static iTextSharp.text.Font font8 = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
    public static iTextSharp.text.Font font7B = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 7, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
    private static iTextSharp.text.Font font7 = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 7, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
    public static iTextSharp.text.Font font6B = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 6, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
    private static iTextSharp.text.Font font6 = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 6, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
    public static iTextSharp.text.Font font6I = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9, iTextSharp.text.Font.ITALIC, BaseColor.BLACK);
    public static iTextSharp.text.Font font6BI = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.BOLDITALIC, BaseColor.BLACK);

    public static iTextSharp.text.Font tableFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9f);
    public static iTextSharp.text.Font paragraphFont = FontFactory.GetFont(BaseFont.HELVETICA, 7f);
    private static iTextSharp.text.Font fontFooter = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.ITALIC, BaseColor.DARK_GRAY);
    public static iTextSharp.text.Font fontBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
    private static iTextSharp.text.Font fontdocHeader = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
    private static iTextSharp.text.Font fontLargeBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 15, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
    public static iTextSharp.text.Font font9BItalic = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9, iTextSharp.text.Font.BOLDITALIC, BaseColor.BLACK);
    private static iTextSharp.text.Font headerFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9f);
    private static iTextSharp.text.Font footerFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 8f);

    public static iTextSharp.text.Font font12GreyB = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.DARK_GRAY);
    public static iTextSharp.text.Font font11GreyB = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.BOLD, BaseColor.DARK_GRAY);
    public static iTextSharp.text.Font font11Grey = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.NORMAL, BaseColor.DARK_GRAY);
    public static iTextSharp.text.Font font10Grey = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.NORMAL, BaseColor.DARK_GRAY);
    public static iTextSharp.text.Font font10GreyB = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.DARK_GRAY);
    private static iTextSharp.text.Font font9Grey = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9, iTextSharp.text.Font.NORMAL, BaseColor.DARK_GRAY);
    public static iTextSharp.text.Font font9GreyB = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9, iTextSharp.text.Font.BOLD, BaseColor.DARK_GRAY);

    public ProgressiveReport()
    {

    }

    public static PdfPTable ProgressivePrintDocument(string sResidentStatus, int iResidentId)
    {

        string exception = string.Empty;
        Common.Residents resident;
        DataSet dsRCA;
        PdfPTable tblMain = new PdfPTable(5);
        tblMain.WidthPercentage = 100f;
        float[] wthMain = new float[] { 1.2f, 1f, 1f, 1f, 1f };
        tblMain.SetWidths(wthMain);
        tblMain.SpacingBefore = 5f;
        tblMain.SpacingAfter = 5f;
        tblMain.HorizontalAlignment = Element.ALIGN_CENTER;

        try
        {
            resident = new Common.Residents();
            if (sResidentStatus == "" && sResidentStatus == "I")
            {
                resident = DAL.Residents.GetInActiveResidentById(iResidentId);
            }
            else
            {
                resident = DAL.Residents.GetResidentById(iResidentId);
            }

            dsRCA = DAL.PlanOfCare.GetPlanOfCareByResidentIdForRCA(iResidentId);
            if (dsRCA != null && dsRCA.Tables.Count > 0 && dsRCA.Tables[0].Rows.Count > 0)
            {

                string fontpath = HttpContext.Current.Server.MapPath(".");
                BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
                Font fontBoldTextOP = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);

                string modifiedOn = dsRCA.Tables[0].Rows[0]["As_modified_on"].ToString();

                PdfPCell cellCheckMarkYes = new PdfPCell(new Phrase("P", fontBoldTextOP));
                cellCheckMarkYes.HorizontalAlignment = Element.ALIGN_LEFT;
                cellCheckMarkYes.VerticalAlignment = Element.ALIGN_MIDDLE;
                cellCheckMarkYes.PaddingLeft = 5f;
                cellCheckMarkYes.Border = 0;
                PdfPCell cellCheckMarkNo = new PdfPCell(new Phrase(" ", fontBoldTextOP));
                cellCheckMarkNo.HorizontalAlignment = Element.ALIGN_LEFT;
                cellCheckMarkNo.VerticalAlignment = Element.ALIGN_MIDDLE;
                cellCheckMarkNo.PaddingLeft = 5f;
                cellCheckMarkNo.Border = 0;

                CreateComponent(tblMain, dsRCA.Tables[0], fontBoldTextOP);
                CreateAppetite(tblMain, dsRCA.Tables[0], fontBoldTextOP);
                CreateNutrition(tblMain, dsRCA.Tables[0], fontBoldTextOP, modifiedOn);
                CreateElimination(tblMain, dsRCA.Tables[0], fontBoldTextOP, modifiedOn);
                CreateMobility(tblMain, dsRCA.Tables[0], fontBoldTextOP, modifiedOn);
                CreatePersonalHygiene(tblMain, dsRCA.Tables[0], fontBoldTextOP, modifiedOn);
                CreateSkinCare(tblMain, dsRCA.Tables[0], fontBoldTextOP, modifiedOn);
                CreateToilet(tblMain, dsRCA.Tables[0], fontBoldTextOP);
                CreateEating(tblMain, dsRCA.Tables[0], fontBoldTextOP);
                CreateSensoryAbilities(tblMain, dsRCA.Tables[0], fontBoldTextOP, modifiedOn);
                CreateMemoryOrientation(tblMain, dsRCA.Tables[0], fontBoldTextOP);
                CreateSafetyRestraint(tblMain, dsRCA.Tables[0], fontBoldTextOP, modifiedOn);
                CreateBehaviour(tblMain, dsRCA.Tables[0], fontBoldTextOP, modifiedOn);
                CreateCommunication(tblMain, dsRCA.Tables[0], fontBoldTextOP, modifiedOn);
                CreateSpecialEquipment(tblMain, dsRCA.Tables[0], fontBoldTextOP);
                CreateCareNeeds(tblMain, dsRCA.Tables[0], fontBoldTextOP);
                CreateOTPT(tblMain, dsRCA.Tables[0], fontBoldTextOP);
                CreateVitalSigns(tblMain, dsRCA.Tables[0], fontBoldTextOP);
                Collection<Common.FallRiskAssessment> fallRiskAssessmt = DAL.FallRiskAssessment.GetFallRiskAssessmentHistoryByResidentId(iResidentId);
                CreateFallRiskLevel(tblMain, fallRiskAssessmt, fontBoldTextOP);
            }
        }
        catch (Exception ex)
        {
            Log.Write("Progressive PrintDocument | " + ex.Message.ToString());
        }
        return tblMain;
    }

    private static void CreateAllergyContent(int iResidentId, string exception, Document document)
    {
        PdfPTable tblAllergies = new PdfPTable(2);
        tblAllergies.WidthPercentage = 100f;
        float[] wthAllergies = new float[] { 2f, 8f };
        tblAllergies.SetWidths(wthAllergies);
        tblAllergies.SpacingBefore = 5f;
        tblAllergies.SpacingAfter = 5f;
        tblAllergies.HorizontalAlignment = Element.ALIGN_LEFT;
        DataSet dsAllerDietReceive;
        string sAllergys = string.Empty;
        try
        {
            dsAllerDietReceive = DAL.Prescription.GetAllergyAndDietByResident(iResidentId);
            if (!(dsAllerDietReceive == null))
            {
                if (dsAllerDietReceive.Tables[0].Rows.Count > 0)
                {
                    sAllergys += dsAllerDietReceive.Tables[0].Rows[0]["fd_medical_allergy"].ToString();
                    sAllergys += dsAllerDietReceive.Tables[0].Rows[0]["fd_diet_allergy"].ToString();
                }
            }

        }
        catch (Exception Exception)
        {
            exception = "btnProgressiveReport_Click |" + Exception.Message.ToString();
        }
        PdfPCell cellAllergies = new PdfPCell(new Phrase("Allergies", font10B));
        cellAllergies.HorizontalAlignment = Element.ALIGN_LEFT;
        cellAllergies.VerticalAlignment = Element.ALIGN_TOP;
        cellAllergies.FixedHeight = 30f;
        cellAllergies.PaddingLeft = 5f;
        tblAllergies.AddCell(cellAllergies);
        PdfPCell cellAllergiesValue = new PdfPCell(new Phrase(sAllergys, font10));
        cellAllergiesValue.HorizontalAlignment = Element.ALIGN_LEFT;
        cellAllergiesValue.VerticalAlignment = Element.ALIGN_TOP;
        cellAllergiesValue.PaddingLeft = 5f;
        tblAllergies.AddCell(cellAllergiesValue);

        PdfPCell cellConsentOfResident = new PdfPCell(new Phrase("Consent of Resident and/or SDM     " + "Yes    " + "No", font10B));
        cellConsentOfResident.HorizontalAlignment = Element.ALIGN_LEFT;
        cellConsentOfResident.VerticalAlignment = Element.ALIGN_MIDDLE;
        cellConsentOfResident.Border = 0;
        cellConsentOfResident.Colspan = 2;
        cellConsentOfResident.PaddingLeft = 5f;
        tblAllergies.AddCell(cellConsentOfResident);
        PdfPCell cellSDMSignature = new PdfPCell(new Phrase("Resident and/or SDM Signature: " + "________________________________" + "Date:" + "__________________", font10B));
        cellSDMSignature.HorizontalAlignment = Element.ALIGN_LEFT;
        cellSDMSignature.VerticalAlignment = Element.ALIGN_MIDDLE;
        cellSDMSignature.Border = 0;
        cellSDMSignature.Colspan = 2;
        cellSDMSignature.PaddingLeft = 5f;
        tblAllergies.AddCell(cellSDMSignature);

        document.Add(tblAllergies);
    }

    private static void CreateComponent(PdfPTable tblMain, DataTable dtAssessedTable, Font fontBoldTextOP)
    {
        int colCount = 4;
        string[] columns = { Resources.Qola.UIverbiage.Date, Resources.Qola.UIverbiage.PreMoveIn, Resources.Qola.UIverbiage.Update, Resources.Qola.UIverbiage.ReturnFromHospital, Resources.Qola.UIverbiage.MoveIn };
        string[] columnValues = { "", "1AP", "2AU", "3AR", "4AM" };

        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Component, font10B));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;
        tblMain.AddCell(tblMainRow1Component);
        for (int index = 0; index < colCount; index++)
        {
            PdfPTable tblComponent = new PdfPTable(2);
            tblComponent.WidthPercentage = 100f;
            float[] wthComponent = new float[] { 1f, 9f };
            tblComponent.SetWidths(wthComponent);
            tblComponent.SpacingBefore = 5f;
            tblComponent.SpacingAfter = 5f;

            string dateValue = dtAssessedTable.Rows[index]["fd_date"].ToString();
            if (dateValue != "" && dateValue != null && Convert.ToDateTime(dateValue).ToString("MM/dd/yyyy") != "01/01/1900")
            {
                dateValue = Convert.ToDateTime(dateValue).ToString("MM/dd/yyyy");
            }
            else
            {
                dateValue = "";
            }
            for (int colIndex = 0; colIndex < columns.Length; colIndex++)
            {
                if (colIndex == 0)
                {
                    PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(columns[0] + ": " + dateValue, font9B));
                    tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                    tblComponentRow1.Colspan = 2;
                    tblComponentRow1.PaddingLeft = 5f;
                    tblComponentRow1.PaddingBottom = 5f;
                    tblComponentRow1.Border = 0;
                    tblComponent.AddCell(tblComponentRow1);
                }
                else
                {
                    Phrase pharse = new Phrase("");
                    if (getValue(dtAssessedTable.Rows[index]["fd_assessed"].ToString(), columnValues[colIndex]))
                    {
                        pharse = new Phrase("P", fontBoldTextOP);
                    }
                    PdfPCell fieldValue = new PdfPCell(pharse);
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(columns[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
            tblMain.AddCell(tblComponent);
        }
    }

    private static void CreateAppetite(PdfPTable tblMain, DataTable dtAppetiteTable, Font fontBoldTextOP)
    {
        int colCount = 4;
        string[] columns = { Resources.Qola.UIverbiage.Good, Resources.Qola.UIverbiage.Fair, Resources.Qola.UIverbiage.Poor };
        string[] columnValues = { "1AG", "2AF", "3AP" };

        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Appetite, font9B));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;
        tblMain.AddCell(tblMainRow1Component);
        for (int index = 0; index < colCount; index++)
        {
            PdfPTable tblComponent = new PdfPTable(2);
            tblComponent.WidthPercentage = 100f;
            float[] wthComponent = new float[] { 1f, 9f };
            tblComponent.SetWidths(wthComponent);
            tblComponent.SpacingBefore = 5f;
            tblComponent.SpacingAfter = 5f;

            for (int colIndex = 0; colIndex < columns.Length; colIndex++)
            {
                Phrase pharse = new Phrase("");
                if (getValue(dtAppetiteTable.Rows[index]["fd_appetite"].ToString(), columnValues[colIndex]))
                {
                    pharse = new Phrase("P", fontBoldTextOP);
                }
                PdfPCell fieldValue = new PdfPCell(pharse);
                fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                fieldValue.PaddingLeft = 5f;
                fieldValue.Border = 0;
                tblComponent.AddCell(fieldValue);

                PdfPCell FieldName = new PdfPCell(new Phrase(columns[colIndex], font9));
                FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                FieldName.PaddingLeft = 5f;
                FieldName.Border = 0;
                tblComponent.AddCell(FieldName);
            }
            tblMain.AddCell(tblComponent);
        }
    }

    private static void CreateNutrition(PdfPTable tblMain, DataTable dtNutritionTable, Font fontBoldTextOP, string modifiedOn)
    {
        int colCount = 4;
        string[] columns = { Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Assistance, Resources.Qola.UIverbiage.Cuing,
                             Resources.Qola.UIverbiage.Feed, Resources.Qola.UIverbiage.SpecialDiet, Resources.Qola.UIverbiage.Swallowingrestriction,
                             Resources.Qola.UIverbiage.DiningRoom, Resources.Qola.UIverbiage.TrayService, Resources.Qola.UIverbiage.FoodAllergySensitivity
                           };
        string[] columnValues = { "1NI", "2NA", "3NC", "4NF", "5NS", "6NW", "7ND", "8NT", "9NF", };
        var PhraseNutrition = new Phrase();
        PhraseNutrition.Add(new Chunk(Resources.Qola.UIverbiage.Nutrition + " \n", font10B));
        if (dtNutritionTable.Rows[0]["fd_nutrition_SDR"].ToString() != "" || dtNutritionTable.Rows[0]["fd_nutrition_FAS"].ToString() != "")
        {
            string specialDiet = string.Empty;
            modifiedOn = dtNutritionTable.Rows[0]["As_modified_on"].ToString();
            PhraseNutrition.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Date + ": " + modifiedOn + "\n", font8B));
            if (dtNutritionTable.Rows[0]["fd_nutrition_SDR"].ToString() != "")
            {
                specialDiet = dtNutritionTable.Rows[0]["fd_nutrition_SDR"].ToString() + "\n";
                PhraseNutrition.Add(new Chunk("\nSpecial Diet / Restriction:\n", font8B));
                PhraseNutrition.Add(new Chunk(specialDiet, font9));
            }
            specialDiet = "";
            if (dtNutritionTable.Rows[0]["fd_nutrition_FAS"].ToString() != "")
            {
                PhraseNutrition.Add(new Chunk("\nFood Allergy /Sensitivity:\n", font8B));
                specialDiet = dtNutritionTable.Rows[0]["fd_nutrition_FAS"].ToString() + "\n";
                PhraseNutrition.Add(new Chunk(specialDiet, font9));
            }
        }

        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(PhraseNutrition));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;
        tblMain.AddCell(tblMainRow1Component);

        for (int index = 0; index < colCount; index++)
        {
            PdfPTable tblComponent = new PdfPTable(2);
            tblComponent.WidthPercentage = 100f;
            float[] wthComponent = new float[] { 1f, 9f };
            tblComponent.SetWidths(wthComponent);
            tblComponent.SpacingBefore = 5f;
            tblComponent.SpacingAfter = 5f;

            for (int colIndex = 0; colIndex < columns.Length; colIndex++)
            {
                Phrase pharse = new Phrase("");
                if (getValue(dtNutritionTable.Rows[index]["fd_nutrition"].ToString(), columnValues[colIndex]))
                {
                    pharse = new Phrase("P", fontBoldTextOP);
                }
                PdfPCell fieldValue = new PdfPCell(pharse);
                fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                fieldValue.PaddingLeft = 5f;
                fieldValue.Border = 0;
                tblComponent.AddCell(fieldValue);

                PdfPCell FieldName = new PdfPCell(new Phrase(columns[colIndex], font9));
                FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                FieldName.PaddingLeft = 5f;
                FieldName.Border = 0;
                tblComponent.AddCell(FieldName);
            }
            tblMain.AddCell(tblComponent);
        }
    }

    private static void CreateElimination(PdfPTable tblMain, DataTable dtEliminationTable, Font fontBoldTextOP, string modifiedOn)
    {
        int colCount = 4;

        var phraseElimination = new Phrase();
        phraseElimination.Add(new Chunk(Resources.Qola.UIverbiage.Elimination + " \n", font10B));



        bool isHead = false;
        for (int index = 0; index < colCount; index++)
        {
            if (!isHead)
            {
                if (dtEliminationTable.Rows[index]["fd_elimination_B_incontinence"].ToString() != "" ||
                    dtEliminationTable.Rows[index]["fd_bowel_comment"].ToString() != "" ||
                        dtEliminationTable.Rows[index]["fd_bladder_comment"].ToString() != "")
                {
                    phraseElimination.Add(new Chunk(new Chunk("\n" + Resources.Qola.UIverbiage.Date + ": " + modifiedOn + "\n", font8B)));
                    if (dtEliminationTable.Rows[index]["fd_elimination_B_incontinence"].ToString() != "" || dtEliminationTable.Rows[index]["fd_bladder_comment"].ToString() != "")
                    {
                        phraseElimination.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Bladder + ":\n", font8B));
                        if (dtEliminationTable.Rows[index]["fd_elimination_B_incontinence"].ToString() != "")
                        {
                            phraseElimination.Add(new Chunk("\n" + Resources.Qola.UIverbiage.ManagedAppropriately + ":\n", font8B));
                            phraseElimination.Add(new Chunk(dtEliminationTable.Rows[0]["fd_elimination_B_incontinence"].ToString() + "\n", font9));
                        }
                        if (dtEliminationTable.Rows[index]["fd_bladder_comment"].ToString() != "")
                        {
                            phraseElimination.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Comment + "\n", font8B));
                            phraseElimination.Add(new Chunk(dtEliminationTable.Rows[0]["fd_bladder_comment"].ToString() + "\n", font9));
                        }
                    }
                    if (dtEliminationTable.Rows[index]["fd_bowel_comment"].ToString() != "")
                    {
                        phraseElimination.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Bowel + ":\n", font8B));
                        phraseElimination.Add(new Chunk(dtEliminationTable.Rows[0]["fd_bowel_comment"] + "\n".ToString(), font9));
                    }
                    PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(phraseElimination));
                    tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
                    tblMainRow1Component.PaddingLeft = 5f;
                    tblMainRow1Component.PaddingTop = 5f;
                    tblMain.AddCell(tblMainRow1Component);
                    isHead = true;
                    break;
                }
            }
        }
        if (isHead)
        {
            for (int index = 0; index < colCount; index++)
            {
                PdfPTable tblComponent = new PdfPTable(2);
                tblComponent.WidthPercentage = 100f;
                float[] wthComponent = new float[] { 1f, 9f };
                tblComponent.SetWidths(wthComponent);
                tblComponent.SpacingBefore = 5f;
                tblComponent.SpacingAfter = 5f;
                tblComponent.DefaultCell.Border = 0;

                CreateBladder(tblComponent, dtEliminationTable, fontBoldTextOP, index);
                CreateBowel(tblComponent, dtEliminationTable, fontBoldTextOP, index);

                PdfPCell bladderCell = new PdfPCell(tblComponent);
                bladderCell.Border = 0;
                tblMain.AddCell(tblComponent);
            }
        }
    }

    private static void CreateMobility(PdfPTable tblMain, DataTable dtMobilityTable, Font fontBoldTextOP, string modifiedOn)
    {
        int colCount = 4;
        string[] mobilityCoulmns = { Resources.Qola.UIverbiage.Mobility, Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Supervision,
                                   Resources.Qola.UIverbiage.Assistance,Resources.Qola.UIverbiage.Dependent };
        string[] mobilityColumnValues = { "", "0MI", "0MS", "0MA", "0MD" };


        var phraseMobility = new Phrase();
        phraseMobility.Add(new Chunk(Resources.Qola.UIverbiage.Mobility + " \n", font10B));
        if (dtMobilityTable.Rows[0]["fd_mobility_comment"].ToString() != "" || dtMobilityTable.Rows[0]["fd_cane_type"].ToString() != ""
             || !String.IsNullOrEmpty(dtMobilityTable.Rows[0]["fd_scooter_type"].ToString()) || dtMobilityTable.Rows[0]["fd_transfers_comment"].ToString() != ""
             )
        {
            phraseMobility.Add(new Chunk(new Chunk("\n" + Resources.Qola.UIverbiage.Date + ": " + modifiedOn + "\n", font8B)));

            if (dtMobilityTable.Rows[0]["fd_mobility_comment"].ToString() != "")
            {
                phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Mobility + ":\n", font8B));
                phraseMobility.Add(new Chunk(dtMobilityTable.Rows[0]["fd_mobility_comment"].ToString() + "\n", font9));
            }
            if (dtMobilityTable.Rows[0]["fd_cane_type"].ToString() != "")
            {
                phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.CaneType + ":\n", font8B));
                phraseMobility.Add(new Chunk(dtMobilityTable.Rows[0]["fd_cane_type"].ToString() + "\n", font9));
            }
            if (!String.IsNullOrEmpty(dtMobilityTable.Rows[0]["fd_scooter_type"].ToString()))
            {
                phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.ScooterType + ":\n", font8B));
                phraseMobility.Add(new Chunk(dtMobilityTable.Rows[0]["fd_scooter_type"].ToString() + "\n", font9));
            }
            if (dtMobilityTable.Rows[0]["fd_transfers_comment"].ToString() != "")
            {
                phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Transfers + ":\n", font8B));
                phraseMobility.Add(new Chunk(dtMobilityTable.Rows[0]["fd_transfers_comment"].ToString() + "\n", font9));
            }
            if (dtMobilityTable.Rows[0]["fd_mobility_prothesis"].ToString() != "")
            {
                phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Prothesisspecify + ":\n", font8B));
                phraseMobility.Add(new Chunk(dtMobilityTable.Rows[0]["fd_mobility_prothesis"].ToString() + "\n", font9));
            }
        }
        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(phraseMobility));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;
        tblMain.AddCell(tblMainRow1Component);
        for (int index = 0; index < colCount; index++)
        {
            PdfPTable tblComponent = new PdfPTable(2);
            tblComponent.WidthPercentage = 100f;
            float[] wthComponent = new float[] { 1f, 9f };
            tblComponent.SetWidths(wthComponent);
            tblComponent.SpacingBefore = 5f;
            tblComponent.SpacingAfter = 5f;
            for (int colIndex = 0; colIndex < mobilityCoulmns.Length; colIndex++)
            {
                if (colIndex == 0)
                {
                    PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(mobilityCoulmns[colIndex], font9B));
                    tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                    tblComponentRow1.Colspan = 2;
                    tblComponentRow1.PaddingLeft = 5f;
                    tblComponentRow1.PaddingBottom = 5f;
                    tblComponentRow1.Border = 0;
                    tblComponent.AddCell(tblComponentRow1);
                }
                else
                {
                    Phrase pharse = new Phrase("");
                    if (getValue(dtMobilityTable.Rows[index]["fd_mobility"].ToString(), mobilityColumnValues[colIndex]))
                    {
                        pharse = new Phrase("P", fontBoldTextOP);
                    }
                    PdfPCell fieldValue = new PdfPCell(pharse);
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(mobilityCoulmns[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }

            string[] walkerCoulmns = { Resources.Qola.UIverbiage.Walker, Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Supervised,
                                   Resources.Qola.UIverbiage.Assisted,Resources.Qola.UIverbiage.WalkerType, Resources.Qola.UIverbiage.ForeWheel,
                                   Resources.Qola.UIverbiage.TwoWheel,Resources.Qola.UIverbiage.NoWheel};
            string[] walkerColumnValues = { "", "1WI", "2WS", "3WA", "", "22WF", "23WT", "24WN" };
            for (int walkerIndex = 0; walkerIndex < walkerCoulmns.Length; walkerIndex++)
            {
                if (walkerCoulmns[walkerIndex] == Resources.Qola.UIverbiage.Walker || walkerCoulmns[walkerIndex] == Resources.Qola.UIverbiage.WalkerType)
                {
                    PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(walkerCoulmns[walkerIndex], font9B));
                    tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                    tblComponentRow1.Colspan = 2;
                    tblComponentRow1.PaddingLeft = 5f;
                    tblComponentRow1.PaddingBottom = 5f;
                    tblComponentRow1.Border = 0;
                    tblComponent.AddCell(tblComponentRow1);
                }
                else
                {
                    Phrase pharse = new Phrase("");
                    if (getValue(dtMobilityTable.Rows[index]["fd_mobility"].ToString(), walkerColumnValues[walkerIndex]))
                    {
                        pharse = new Phrase("P", fontBoldTextOP);
                    }
                    PdfPCell fieldValue = new PdfPCell(pharse);
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(walkerCoulmns[walkerIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }

            string[] wheelChairCoulmns = { Resources.Qola.UIverbiage.Wheelchair, Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Supervised,
                                   Resources.Qola.UIverbiage.Assisted,Resources.Qola.UIverbiage.Manual, Resources.Qola.UIverbiage.WheelchairType,
                                   Resources.Qola.UIverbiage.Tile,Resources.Qola.UIverbiage.Electric, Resources.Qola.UIverbiage.Transport};
            string[] wheelChairColumnValues = { "", "4HI", "5HS", "6HA", "22HM", "", "25HT", "23HE", "26HP" };
            for (int wheelIndex = 0; wheelIndex < wheelChairCoulmns.Length; wheelIndex++)
            {
                if (wheelChairCoulmns[wheelIndex] == Resources.Qola.UIverbiage.Wheelchair || wheelChairCoulmns[wheelIndex] == Resources.Qola.UIverbiage.WheelchairType)
                {
                    PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(wheelChairCoulmns[wheelIndex], font9B));
                    tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                    tblComponentRow1.Colspan = 2;
                    tblComponentRow1.PaddingLeft = 5f;
                    tblComponentRow1.PaddingBottom = 5f;
                    tblComponentRow1.Border = 0;
                    tblComponent.AddCell(tblComponentRow1);
                }
                else
                {
                    Phrase pharse = new Phrase("");
                    if (getValue(dtMobilityTable.Rows[index]["fd_mobility"].ToString(), wheelChairColumnValues[wheelIndex]))
                    {
                        pharse = new Phrase("P", fontBoldTextOP);
                    }
                    PdfPCell fieldValue = new PdfPCell(pharse);
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(wheelChairCoulmns[wheelIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }

            string[] caneCoulmns = { Resources.Qola.UIverbiage.Cane, Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Supervised,
                                   Resources.Qola.UIverbiage.Assisted};
            string[] caneColumnValues = { "", "7CI", "8CS", "9CA" };
            for (int caneIndex = 0; caneIndex < caneCoulmns.Length; caneIndex++)
            {
                if (caneCoulmns[caneIndex] == Resources.Qola.UIverbiage.Cane)
                {
                    PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(caneCoulmns[caneIndex], font9B));
                    tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                    tblComponentRow1.Colspan = 2;
                    tblComponentRow1.PaddingLeft = 5f;
                    tblComponentRow1.PaddingBottom = 5f;
                    tblComponentRow1.Border = 0;
                    tblComponent.AddCell(tblComponentRow1);
                }
                else
                {
                    Phrase pharse = new Phrase("");
                    if (getValue(dtMobilityTable.Rows[index]["fd_mobility"].ToString(), caneColumnValues[caneIndex]))
                    {
                        pharse = new Phrase("P", fontBoldTextOP);
                    }
                    PdfPCell fieldValue = new PdfPCell(pharse);
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(caneCoulmns[caneIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }

            string[] scooterCoulmns = { Resources.Qola.UIverbiage.Scooter, Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Supervised,
                                   Resources.Qola.UIverbiage.Assisted};
            string[] scooterColumnValues = { "", "10SI", "11SS", "12SA" };
            for (int scooterIndex = 0; scooterIndex < scooterCoulmns.Length; scooterIndex++)
            {
                if (scooterCoulmns[scooterIndex] == Resources.Qola.UIverbiage.Scooter)
                {
                    PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(scooterCoulmns[scooterIndex], font9B));
                    tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                    tblComponentRow1.Colspan = 2;
                    tblComponentRow1.PaddingLeft = 5f;
                    tblComponentRow1.PaddingBottom = 5f;
                    tblComponentRow1.Border = 0;
                    tblComponent.AddCell(tblComponentRow1);
                }
                else
                {
                    Phrase pharse = new Phrase("");
                    if (getValue(dtMobilityTable.Rows[index]["fd_mobility"].ToString(), scooterColumnValues[scooterIndex]))
                    {
                        pharse = new Phrase("P", fontBoldTextOP);
                    }
                    PdfPCell fieldValue = new PdfPCell(pharse);
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(scooterCoulmns[scooterIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }

            string[] transferCoulmns = { Resources.Qola.UIverbiage.Transfers, Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Supervised,
                                   Resources.Qola.UIverbiage.Assisted,Resources.Qola.UIverbiage.PersonConstant_1,Resources.Qola.UIverbiage.PersonConstant_2,
                                       Resources.Qola.UIverbiage.StandbyAssistance,Resources.Qola.UIverbiage.MinimalAssistance,
                                       Resources.Qola.UIverbiage.IntermittentAssistance,Resources.Qola.UIverbiage.MechanicalLift,
                                       Resources.Qola.UIverbiage.Arethereanymobilityconcern};
            string[] transferColumnValues = { "", "13TI", "14TS", "15TA", "16T1", "17T2", "18TT", "19TM", "20TN", "21TE", "" };
            for (int transferIndex = 0; transferIndex < transferCoulmns.Length; transferIndex++)
            {
                if (transferCoulmns[transferIndex] == Resources.Qola.UIverbiage.Transfers || transferCoulmns[transferIndex] == Resources.Qola.UIverbiage.Arethereanymobilityconcern)
                {
                    PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(transferCoulmns[transferIndex], font9B));
                    tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                    tblComponentRow1.Colspan = 2;
                    tblComponentRow1.PaddingLeft = 5f;
                    tblComponentRow1.PaddingBottom = 5f;
                    tblComponentRow1.Border = 0;
                    tblComponent.AddCell(tblComponentRow1);
                }
                else
                {
                    Phrase pharse = new Phrase("");
                    if (getValue(dtMobilityTable.Rows[index]["fd_mobility"].ToString(), transferColumnValues[transferIndex]))
                    {
                        pharse = new Phrase("P", fontBoldTextOP);
                    }
                    PdfPCell fieldValue = new PdfPCell(pharse);
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(transferCoulmns[transferIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }

            Phrase Mpharse = new Phrase("", fontBoldTextOP);
            if (getValue(dtMobilityTable.Rows[index]["fd_mobility_concerns"].ToString(), "Y"))
            {
                Mpharse = new Phrase("P", fontBoldTextOP);
            }
            PdfPCell tblMobilityConcernsYes = new PdfPCell(Mpharse);
            tblMobilityConcernsYes.HorizontalAlignment = Element.ALIGN_LEFT;
            tblMobilityConcernsYes.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblMobilityConcernsYes.PaddingLeft = 5f;
            tblMobilityConcernsYes.Border = 0;
            tblComponent.AddCell(tblMobilityConcernsYes);

            PdfPCell tblConcernsYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, font9));
            tblConcernsYes.HorizontalAlignment = Element.ALIGN_LEFT;
            tblConcernsYes.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblConcernsYes.PaddingLeft = 5f;
            tblConcernsYes.Border = 0;
            tblComponent.AddCell(tblConcernsYes);

            Mpharse = new Phrase("", fontBoldTextOP);
            if (getValue(dtMobilityTable.Rows[index]["fd_mobility_concerns"].ToString(), "N"))
            {
                Mpharse = new Phrase("P", fontBoldTextOP);
            }
            PdfPCell tblMobilityConcernsNo = new PdfPCell(Mpharse);
            tblMobilityConcernsNo.HorizontalAlignment = Element.ALIGN_LEFT;
            tblMobilityConcernsNo.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblMobilityConcernsNo.PaddingLeft = 5f;
            tblMobilityConcernsNo.Border = 0;
            tblComponent.AddCell(tblMobilityConcernsNo);

            PdfPCell tblConcernsNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, font9));
            tblConcernsNo.HorizontalAlignment = Element.ALIGN_LEFT;
            tblConcernsNo.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblConcernsNo.PaddingLeft = 5f;
            tblConcernsNo.Border = 0;
            tblComponent.AddCell(tblConcernsNo);

            tblMain.AddCell(tblComponent);
        }
    }

    private static void CreatePersonalHygiene(PdfPTable tblMain, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, string modifiedOn)
    {
        int colCount = 4;
        var phraseMobility = new Phrase();
        phraseMobility.Add(new Chunk(Resources.Qola.UIverbiage.PersonalHygiene + " \n", font10B));
        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(phraseMobility));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;
        bool isAdd = false;

        for (int index = 0; index < colCount; index++)
        {
            if ((!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene_appropriate"].ToString().Trim()) &&
                dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene_appropriate"].ToString().Trim() != "") ||
               (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString()) &&
                dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString() != "")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "54PN")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "1AI")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "2AS")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "3AA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "52PH")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "53PA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "4BI")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "5BS")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "6BA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "55BH")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "56BA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "55BH56BA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "7DI")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "8DS")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "9DA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "26DH")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "27DN")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "28DO")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "29DT")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "57DH")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "58DA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "30AA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "31AG")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "32AP")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "33AS")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "34AF")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "10SI")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "11SS")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "12SA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "13OI")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "14OS")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "15OA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "51TO")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "16TF")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "17TP")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "18TN")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "59TU")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "60TL")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "61DN")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "19DU")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "20DL")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "21DF")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "22DP")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "23PT")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "24PS")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "25PO")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "35PP")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "36PE")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "37PA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "38PD")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "62PA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "63PE")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "44PS")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "45PM")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "46PT")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "47PW")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "48PH")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "49PF")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "50PA")
                || !String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_time"].ToString())
                || !String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_frequency"].ToString())
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "1SA")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "2SP")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "3PR")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "4PL")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "5PW")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "6PC")
                || !String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_PH_service_agency"].ToString())
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_PH_service"].ToString(), "3SC")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_PH_service"].ToString(), "4SA")
                )
            {
                if (!isAdd)
                {
                    tblMain.AddCell(tblMainRow1Component);
                    isAdd = true;
                    break;
                }
            }
        }
        if (isAdd)
        {
            for (int index = 0; index < colCount; index++)
            {
                PdfPTable tblComponent = new PdfPTable(2);
                tblComponent.WidthPercentage = 100f;
                float[] wthComponent = new float[] { 1f, 9f };
                tblComponent.SetWidths(wthComponent);
                tblComponent.SpacingBefore = 5f;
                tblComponent.SpacingAfter = 5f;

                if (dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene_appropriate"].ToString() != null && dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene_appropriate"].ToString() != "")
                {
                    CreatePersonalHygieneApper(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                }
                if (dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString() != null && dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString() != "")
                {
                    CreateAMCare(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                    CreateBathing(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                    CreateDressingunDressing(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                    CreateAssistWith(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                    CreateShaving(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                    CreateOralCare(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                    CreateTeeth(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                    CreateDentures(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                    CreatePreferedBathing(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                    CreatePreferedDay(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                    CreateSleep(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
                }
                tblMain.AddCell(tblComponent);
            }
        }
    }

    private static void CreateSkinCare(PdfPTable tblMain, DataTable dtSkinCareTable, Font fontBoldTextOP, string modifiedOn)
    {
        int colCount = 4;
        string[] columns = { Resources.Qola.UIverbiage.NA, Resources.Qola.UIverbiage.Riskofskinbreakdown, Resources.Qola.UIverbiage.BruisesEasily,
                             Resources.Qola.UIverbiage.ScheduledTurning, Resources.Qola.UIverbiage.SpecialTreatements, Resources.Qola.UIverbiage.DecubitusUlcer,
                             Resources.Qola.UIverbiage.Home,  Resources.Qola.UIverbiage.Agency
                           };
        string[] columnValues = { "64SN", "39SR", "40SB", "41SS", "42SP", "43SD", "65SH", "66SA" };

        var PhraseNutrition = new Phrase();
        PhraseNutrition.Add(new Chunk(Resources.Qola.UIverbiage.SkinCare + " \n", font10B));
        if (dtSkinCareTable.Rows[0]["fd_skin_care_comment"].ToString() != ""
            && !String.IsNullOrEmpty(dtSkinCareTable.Rows[0]["fd_skin_care_comment"].ToString()))
        {
            string specialDiet = string.Empty;
            modifiedOn = dtSkinCareTable.Rows[0]["As_modified_on"].ToString();
            PhraseNutrition.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Date + ": " + modifiedOn + "\n", font8B));

            specialDiet = dtSkinCareTable.Rows[0]["fd_skin_care_comment"].ToString() + "\n";
            PhraseNutrition.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Comment + "\n", font8B));
            PhraseNutrition.Add(new Chunk(specialDiet, font9));
        }

        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(PhraseNutrition));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;

        bool isAdd = false;
        for (int index = 0; index < colCount; index++)
        {
            if (!isAdd)
            {
                if ((!String.IsNullOrEmpty(dtSkinCareTable.Rows[index]["fd_skin_care_comment"].ToString()) &&
                    dtSkinCareTable.Rows[0]["fd_skin_care_comment"].ToString() != "")
                    || getValue(dtSkinCareTable.Rows[index]["fd_personal_hygiene"].ToString(), columnValues[0])
                    || getValue(dtSkinCareTable.Rows[index]["fd_personal_hygiene"].ToString(), columnValues[1])
                    || getValue(dtSkinCareTable.Rows[index]["fd_personal_hygiene"].ToString(), columnValues[2])
                    || getValue(dtSkinCareTable.Rows[index]["fd_personal_hygiene"].ToString(), columnValues[3])
                    || getValue(dtSkinCareTable.Rows[index]["fd_personal_hygiene"].ToString(), columnValues[4])
                    || getValue(dtSkinCareTable.Rows[index]["fd_personal_hygiene"].ToString(), columnValues[5])
                    || getValue(dtSkinCareTable.Rows[index]["fd_personal_hygiene"].ToString(), columnValues[6])
                    || getValue(dtSkinCareTable.Rows[index]["fd_personal_hygiene"].ToString(), columnValues[7])
                    )
                {
                    tblMain.AddCell(tblMainRow1Component);
                    isAdd = true;
                    break;
                }
            }
        }
        if (isAdd)
        {
            for (int index = 0; index < colCount; index++)
            {
                PdfPTable tblComponent = new PdfPTable(2);
                tblComponent.WidthPercentage = 100f;
                float[] wthComponent = new float[] { 1f, 9f };
                tblComponent.SetWidths(wthComponent);
                tblComponent.SpacingBefore = 5f;
                tblComponent.SpacingAfter = 5f;

                for (int colIndex = 0; colIndex < columns.Length; colIndex++)
                {
                    Phrase pharse = new Phrase("");
                    if (getValue(dtSkinCareTable.Rows[index]["fd_personal_hygiene"].ToString(), columnValues[colIndex]))
                    {
                        createTwoCellRow(fontBoldTextOP, tblComponent, columns[colIndex]);
                    }
                }
                tblMain.AddCell(tblComponent);
            }
        }
    }

    private static void CreateToilet(PdfPTable tblMain, DataTable dtToiletingTable, Font fontBoldTextOP)
    {
        int colCount = 4;
        string[] columns = { Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Assistancefortranfers,
                            Resources.Qola.UIverbiage.IntermittentSupervision,Resources.Qola.UIverbiage.OnePersonAssist,
                            Resources.Qola.UIverbiage.TwoPersonAssist, Resources.Qola.UIverbiage.Cuing,
                            Resources.Qola.UIverbiage.ToiletingRoutine};
        string[] columnValues = { "1TI", "2TA", "3TN", "4T1", "5T2", "21TC", "6TT" };

        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ToiletingModeofToileting, font10B));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;

        tblMain.AddCell(tblMainRow1Component);
        for (int index = 0; index < colCount; index++)
        {
            PdfPTable tblComponent = new PdfPTable(2);
            tblComponent.WidthPercentage = 100f;
            float[] wthComponent = new float[] { 1f, 9f };
            tblComponent.SetWidths(wthComponent);
            tblComponent.SpacingBefore = 5f;
            tblComponent.SpacingAfter = 5f;

            for (int colIndex = 0; colIndex < columns.Length; colIndex++)
            {
                Phrase pharse = new Phrase("");
                if (getValue(dtToiletingTable.Rows[index]["fd_toileting"].ToString(), columnValues[colIndex]))
                {
                    pharse = new Phrase("P", fontBoldTextOP);
                }
                PdfPCell fieldValue = new PdfPCell(pharse);
                fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                fieldValue.PaddingLeft = 5f;
                fieldValue.Border = 0;
                tblComponent.AddCell(fieldValue);

                PdfPCell FieldName = new PdfPCell(new Phrase(columns[colIndex], font9));
                FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                FieldName.PaddingLeft = 5f;
                FieldName.Border = 0;
                tblComponent.AddCell(FieldName);
            }
            tblMain.AddCell(tblComponent);
        }
    }

    private static void CreateEating(PdfPTable tblMain, DataTable dtEatingTable, Font fontBoldTextOP)
    {
        int colCount = 4;
        string[] column = { Resources.Qola.UIverbiage.NA,Resources.Qola.UIverbiage.Independent,Resources.Qola.UIverbiage.RequiresAssistance,
                              Resources.Qola.UIverbiage.IntermittentEncouragement,Resources.Qola.UIverbiage.ConstantEncouragement,Resources.Qola.UIverbiage.CompleteFeed,
                              Resources.Qola.UIverbiage.EatB,Resources.Qola.UIverbiage.EatL,Resources.Qola.UIverbiage.EatD,Resources.Qola.UIverbiage.EatB,Resources.Qola.UIverbiage.EatL,Resources.Qola.UIverbiage.EatD,
                              Resources.Qola.UIverbiage.Breakfast,Resources.Qola.UIverbiage.Lunch,Resources.Qola.UIverbiage.Dinner
                              };
        string[] columnValues = { "12EN", "1EI", "2ER", "3EE", "4EC", "5EF", "6OB", "7OL", "8OD", "9MB", "10ML", "11MD", "fd_eating_breakfast", "fd_eating_lunch", "fd_eating_dinner" };
        bool isAdd = false;
        for (int index = 0; index < colCount; index++)
        {
            if ((dtEatingTable.Rows[index]["fd_eating"].ToString() != "" && !String.IsNullOrEmpty(dtEatingTable.Rows[index]["fd_eating"].ToString())) ||
                (dtEatingTable.Rows[index]["fd_eating_breakfast"].ToString() != "" && !String.IsNullOrEmpty(dtEatingTable.Rows[index]["fd_eating_breakfast"].ToString()))
                || (dtEatingTable.Rows[index]["fd_eating_lunch"].ToString() != "" && !String.IsNullOrEmpty(dtEatingTable.Rows[index]["fd_eating_lunch"].ToString()))
                || (dtEatingTable.Rows[index]["fd_eating_dinner"].ToString() != "" && !String.IsNullOrEmpty(dtEatingTable.Rows[index]["fd_eating_dinner"].ToString()))
                )
            {
                if (!isAdd)
                {
                    PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Eating, font10B));
                    tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
                    tblMainRow1Component.PaddingLeft = 5f;
                    tblMainRow1Component.PaddingTop = 5f;
                    tblMain.AddCell(tblMainRow1Component);
                    isAdd = true;
                    break;
                }

            }
        }
        if (isAdd)
        {
            for (int index = 0; index < colCount; index++)
            {
                PdfPTable tblComponent = new PdfPTable(2);
                tblComponent.WidthPercentage = 100f;
                float[] wthComponent = new float[] { 1f, 9f };
                tblComponent.SetWidths(wthComponent);
                tblComponent.SpacingBefore = 5f;
                tblComponent.SpacingAfter = 5f;
                bool onUnit = false;
                bool mainDR = false;
                for (int colIndex = 0; colIndex < columnValues.Length; colIndex++)
                {
                    if ((columnValues[colIndex] == "fd_eating_breakfast" && (dtEatingTable.Rows[index]["fd_eating_breakfast"].ToString() != "" && !String.IsNullOrEmpty(dtEatingTable.Rows[index]["fd_eating_breakfast"].ToString())))
                        || (columnValues[colIndex] == "fd_eating_lunch" && (dtEatingTable.Rows[index]["fd_eating_lunch"].ToString() != "" && !String.IsNullOrEmpty(dtEatingTable.Rows[index]["fd_eating_lunch"].ToString())))
                        || (columnValues[colIndex] == "fd_eating_dinner" && (dtEatingTable.Rows[index]["fd_eating_dinner"].ToString() != "" && !String.IsNullOrEmpty(dtEatingTable.Rows[index]["fd_eating_dinner"].ToString())))
                        )
                    {
                        if (!String.IsNullOrEmpty(dtEatingTable.Rows[index][columnValues[colIndex]].ToString()) &&
                                   dtEatingTable.Rows[index][columnValues[colIndex]].ToString() != "")
                        {
                            createTwospanColumn(dtEatingTable.Rows[index][columnValues[colIndex]].ToString(), tblComponent, column[colIndex]);
                        }
                    }
                    else if (columnValues[colIndex] == "6OB" && getValue(dtEatingTable.Rows[index]["fd_eating"].ToString(), columnValues[index])
                        || columnValues[colIndex] == "7OL" && getValue(dtEatingTable.Rows[index]["fd_eating"].ToString(), columnValues[index])
                        || columnValues[colIndex] == "8OD" && getValue(dtEatingTable.Rows[index]["fd_eating"].ToString(), columnValues[index])
                        )
                    {
                        if (!onUnit)
                        {
                            PdfPCell unit = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Onunit, font10B));
                            unit.HorizontalAlignment = Element.ALIGN_LEFT;
                            unit.VerticalAlignment = Element.ALIGN_TOP;
                            unit.PaddingLeft = 5f;
                            unit.PaddingTop = 5f;
                            unit.Colspan = 2;
                            unit.Border = 0;
                            tblComponent.AddCell(unit);
                            onUnit = true;
                        }
                        if (onUnit && getValue(dtEatingTable.Rows[index]["fd_eating"].ToString(), columnValues[colIndex]))
                        {
                            createTwoCellRow(fontBoldTextOP, tblComponent, column[colIndex]);
                        }
                    }
                    else if (columnValues[colIndex] == "9MB" && getValue(dtEatingTable.Rows[index]["fd_eating"].ToString(), columnValues[colIndex])
                       || columnValues[colIndex] == "10ML" && getValue(dtEatingTable.Rows[index]["fd_eating"].ToString(), columnValues[colIndex])
                       || columnValues[colIndex] == "11MD" && getValue(dtEatingTable.Rows[index]["fd_eating"].ToString(), columnValues[colIndex])
                       )
                    {
                        if (!mainDR)
                        {
                            PdfPCell unit = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MainDR, font10B));
                            unit.HorizontalAlignment = Element.ALIGN_LEFT;
                            unit.VerticalAlignment = Element.ALIGN_TOP;
                            unit.PaddingLeft = 5f;
                            unit.PaddingTop = 5f;
                            unit.Colspan = 2;
                            unit.Border = 0;
                            tblComponent.AddCell(unit);
                            mainDR = true;
                        }
                        if (mainDR && getValue(dtEatingTable.Rows[index]["fd_eating"].ToString(), columnValues[colIndex]))
                        {
                            createTwoCellRow(fontBoldTextOP, tblComponent, column[colIndex]);
                        }
                    }
                    else
                    {
                        if (getValue(dtEatingTable.Rows[index]["fd_eating"].ToString(), columnValues[colIndex]))
                        {
                            createTwoCellRow(fontBoldTextOP, tblComponent, column[colIndex]);
                        }
                    }
                }
                tblMain.AddCell(tblComponent);
            }
        }
    }

    private static void CreateSensoryAbilities(PdfPTable tblMain, DataTable dtSensoryTable, Font fontBoldTextOP, string modifiedOn)
    {
        int colCount = 4;
        var phraseMobility = new Phrase();
        bool isHeadAdd = false;
        for (int index = 0; index < colCount; index++)
        {
            if ((dtSensoryTable.Rows[index]["fd_SA_vision"].ToString() != null && dtSensoryTable.Rows[index]["fd_SA_vision"].ToString() != "") ||
                (dtSensoryTable.Rows[index]["fd_SA_hearing"].ToString() != null && dtSensoryTable.Rows[index]["fd_SA_hearing"].ToString() != "") ||
                (!String.IsNullOrEmpty(dtSensoryTable.Rows[0]["fd_SA_vision_comments"].ToString()) && dtSensoryTable.Rows[index]["fd_SA_vision_comments"].ToString() != ""))
            {
                if (!isHeadAdd)
                {
                    phraseMobility.Add(new Chunk(Resources.Qola.UIverbiage.SensoryAbilities + " \n", font10B));

                    if (!String.IsNullOrEmpty(dtSensoryTable.Rows[index]["fd_SA_vision_comments"].ToString()))
                    {
                        modifiedOn = dtSensoryTable.Rows[index]["As_modified_on"].ToString();
                        phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Date + ": " + modifiedOn + "\n", font8B));
                        string specialDiet = dtSensoryTable.Rows[index]["fd_SA_vision_comments"].ToString() + "\n";
                        phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Vision + "\n", font8B));
                        phraseMobility.Add(new Chunk(specialDiet, font9));
                    }
                    isHeadAdd = true;
                    PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(phraseMobility));
                    tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
                    tblMainRow1Component.PaddingLeft = 5f;
                    tblMainRow1Component.PaddingTop = 5f;
                    tblMain.AddCell(tblMainRow1Component);
                    break;
                }
            }
        }
        if (isHeadAdd)
        {
            for (int index = 0; index < colCount; index++)
            {
                PdfPTable tblComponent = new PdfPTable(2);
                tblComponent.WidthPercentage = 100f;
                float[] wthComponent = new float[] { 1f, 9f };
                tblComponent.SetWidths(wthComponent);
                tblComponent.SpacingBefore = 5f;
                tblComponent.SpacingAfter = 5f;

                if (dtSensoryTable.Rows[index]["fd_SA_vision"].ToString() != null && dtSensoryTable.Rows[index]["fd_SA_vision"].ToString() != "")
                {
                    CreateVision(tblComponent, dtSensoryTable, fontBoldTextOP, index);
                }
                if (dtSensoryTable.Rows[index]["fd_SA_hearing"].ToString() != null && dtSensoryTable.Rows[index]["fd_SA_hearing"].ToString() != "")
                {
                    CreateHearing(tblComponent, dtSensoryTable, fontBoldTextOP, index);
                }

                tblMain.AddCell(tblComponent);
            }
        }
    }

    private static void CreateMemoryOrientation(PdfPTable tblMain, DataTable dtMemoryTable, Font fontBoldTextOP)
    {
        int colCount = 4;
        string[] columns = { Resources.Qola.UIverbiage.Person, Resources.Qola.UIverbiage.Place, Resources.Qola.UIverbiage.Time };
        string[] columnValues = { "1MOP", "2MOL", "3MOT" };

        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MemoryAndOrientation, font10B));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;

        tblMain.AddCell(tblMainRow1Component);
        for (int index = 0; index < colCount; index++)
        {
            PdfPTable tblComponent = new PdfPTable(2);
            tblComponent.WidthPercentage = 100f;
            float[] wthComponent = new float[] { 1f, 9f };
            tblComponent.SetWidths(wthComponent);
            tblComponent.SpacingBefore = 5f;
            tblComponent.SpacingAfter = 5f;

            for (int colIndex = 0; colIndex < columns.Length; colIndex++)
            {
                Phrase pharse = new Phrase("");
                if (getValue(dtMemoryTable.Rows[index]["fd_memory"].ToString(), columnValues[colIndex]))
                {
                    pharse = new Phrase("P", fontBoldTextOP);
                }
                PdfPCell fieldValue = new PdfPCell(pharse);
                fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                fieldValue.PaddingLeft = 5f;
                fieldValue.Border = 0;
                tblComponent.AddCell(fieldValue);

                PdfPCell FieldName = new PdfPCell(new Phrase(columns[colIndex], font9));
                FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                FieldName.PaddingLeft = 5f;
                FieldName.Border = 0;
                tblComponent.AddCell(FieldName);
            }
            tblMain.AddCell(tblComponent);
        }
    }

    private static void CreateSafetyRestraint(PdfPTable tblMain, DataTable dtMemoryTable, Font fontBoldTextOP, string modifiedOn)
    {
        int colCount = 4;
        string[] columns = { Resources.Qola.UIverbiage.NA, Resources.Qola.UIverbiage.SeatLapbelt, Resources.Qola.UIverbiage.RailsHalf,Resources.Qola.UIverbiage.RailsFull,
                               Resources.Qola.UIverbiage.RailsRight,Resources.Qola.UIverbiage.RailsLeft,Resources.Qola.UIverbiage.RailsNight,Resources.Qola.UIverbiage.Mattressonfloor,
                               Resources.Qola.UIverbiage.TransferPole,Resources.Qola.UIverbiage.TableTray,Resources.Qola.UIverbiage.Recliner,Resources.Qola.UIverbiage.Tiltwc,
                               Resources.Qola.UIverbiage.WandersOnunit,Resources.Qola.UIverbiage.WandersOffunit,Resources.Qola.UIverbiage.Outofbuilding,Resources.Qola.UIverbiage.UnsafeSmoker,
                               Resources.Qola.UIverbiage.HighRiskFalls,Resources.Qola.UIverbiage.BalconyriskAssessment,Resources.Qola.UIverbiage.Other
                           };
        string[] columnValues = { "18SN", "1SS", "2SR", "3SA", "4SI", "5SL", "6SN", "7SM", "8ST", "9SB", "10SE", "11SW", "12SD", "13SO", "14SU", "15SF", "16SH", "17SY",
                                    "fd_safety_pasd_other" };
        var phraseMobility = new Phrase();
        phraseMobility.Add(new Chunk(Resources.Qola.UIverbiage.SafetyRestraintsPasd + " \n", font10B));
        if (dtMemoryTable.Rows[0]["fd_safty_pasd_comment"].ToString() != null && dtMemoryTable.Rows[0]["fd_safty_pasd_comment"].ToString() != "")
        {
            modifiedOn = dtMemoryTable.Rows[0]["As_modified_on"].ToString();
            phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Date + ": " + modifiedOn + "\n", font8B));

            string specialDiet = dtMemoryTable.Rows[0]["fd_safty_pasd_comment"].ToString() + "\n";
            phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Comment + "\n", font8B));
            phraseMobility.Add(new Chunk(specialDiet, font9));
        }

        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(phraseMobility));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;

        tblMain.AddCell(tblMainRow1Component);
        for (int index = 0; index < colCount; index++)
        {
            PdfPTable tblComponent = new PdfPTable(2);
            tblComponent.WidthPercentage = 100f;
            float[] wthComponent = new float[] { 1f, 9f };
            tblComponent.SetWidths(wthComponent);
            tblComponent.SpacingBefore = 5f;
            tblComponent.SpacingAfter = 5f;

            for (int colIndex = 0; colIndex < columns.Length; colIndex++)
            {

                if (columns[colIndex] == Resources.Qola.UIverbiage.Other)
                {
                    PdfPCell other = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, font9B));
                    other.HorizontalAlignment = Element.ALIGN_LEFT;
                    other.VerticalAlignment = Element.ALIGN_MIDDLE;
                    other.PaddingLeft = 5f;
                    other.Border = 0;
                    other.Colspan = 2;
                    tblComponent.AddCell(other);

                    PdfPCell otherValue = new PdfPCell(new Phrase(dtMemoryTable.Rows[0]["fd_safety_pasd_other"].ToString(), font9));
                    otherValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    otherValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    otherValue.PaddingLeft = 5f;
                    otherValue.Border = 0;
                    otherValue.Colspan = 2;
                    tblComponent.AddCell(otherValue);
                }
                else
                {
                    Phrase pharse = new Phrase("");
                    if (getValue(dtMemoryTable.Rows[index]["fd_safety_pasd"].ToString(), columnValues[colIndex]))
                    {
                        pharse = new Phrase("P", fontBoldTextOP);
                    }
                    PdfPCell fieldValue = new PdfPCell(pharse);
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(columns[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
            tblMain.AddCell(tblComponent);
        }
    }

    private static void CreateBehaviour(PdfPTable tblMain, DataTable dtMemoryTable, Font fontBoldTextOP, string modifiedOn)
    {
        int colCount = 4;
        string[] columns = { Resources.Qola.UIverbiage.NOConcerns, Resources.Qola.UIverbiage.Cooperative, Resources.Qola.UIverbiage.Wanders,Resources.Qola.UIverbiage.Agitated,
                               Resources.Qola.UIverbiage.Aggressive,Resources.Qola.UIverbiage.Depression,Resources.Qola.UIverbiage.Demanding,Resources.Qola.UIverbiage.Disruptive,
                               Resources.Qola.UIverbiage.Hoarding,Resources.Qola.UIverbiage.IneffectiveCoping,Resources.Qola.UIverbiage.PotentialforInjury,Resources.Qola.UIverbiage.ResistsTreatment,
                               Resources.Qola.UIverbiage.Suspicious,Resources.Qola.UIverbiage.IngestsForeignItems,Resources.Qola.UIverbiage.InappropriateSexualBehaviour,Resources.Qola.UIverbiage.InappropriateSmoking,
                               Resources.Qola.UIverbiage.SubstanceAbuse,Resources.Qola.UIverbiage.RefusesResistsTx,Resources.Qola.UIverbiage.SadDepressedwithdrawn,Resources.Qola.UIverbiage.Suicidal,
                               Resources.Qola.UIverbiage.AnxiousBehaviour,Resources.Qola.UIverbiage.Other
                           };
        string[] columnValues = { "1BN", "2BC","3BW", "4BA", "15BG", "5BD", "6BE", "7BI", "8BH", "9BN","10BP", "11BR",
                                    "17BS", "18BT", "19BP", "20BO", "21BB", "22BF", "23BW", "24BK", "25BU", "26BX", "26BX" };
        var phraseMobility = new Phrase();
        phraseMobility.Add(new Chunk(Resources.Qola.UIverbiage.Behaviour + " \n", font10B));
        if (dtMemoryTable.Rows[0]["fd_behaviour_comments"].ToString() != null && dtMemoryTable.Rows[0]["fd_behaviour_comments"].ToString() != "")
        {
            modifiedOn = dtMemoryTable.Rows[0]["As_modified_on"].ToString();
            phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Date + ": " + modifiedOn + "\n", font8B));

            string specialDiet = dtMemoryTable.Rows[0]["fd_behaviour_comments"].ToString() + "\n";
            phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Comment + "\n", font8B));
            phraseMobility.Add(new Chunk(specialDiet, font9));
        }

        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(phraseMobility));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;

        tblMain.AddCell(tblMainRow1Component);
        for (int index = 0; index < colCount; index++)
        {
            PdfPTable tblComponent = new PdfPTable(2);
            tblComponent.WidthPercentage = 100f;
            float[] wthComponent = new float[] { 1f, 9f };
            tblComponent.SetWidths(wthComponent);
            tblComponent.SpacingBefore = 5f;
            tblComponent.SpacingAfter = 5f;

            for (int colIndex = 0; colIndex < columns.Length; colIndex++)
            {
                Phrase pharse = new Phrase("");
                if (getValue(dtMemoryTable.Rows[index]["fd_behaviour"].ToString(), columnValues[colIndex]))
                {
                    pharse = new Phrase("P", fontBoldTextOP);
                }
                PdfPCell fieldValue = new PdfPCell(pharse);
                fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                fieldValue.PaddingLeft = 5f;
                fieldValue.Border = 0;
                tblComponent.AddCell(fieldValue);

                PdfPCell FieldName = new PdfPCell(new Phrase(columns[colIndex], font9));
                FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                FieldName.PaddingLeft = 5f;
                FieldName.Border = 0;
                tblComponent.AddCell(FieldName);

            }
            tblMain.AddCell(tblComponent);
        }
    }

    private static void CreateCommunication(PdfPTable tblMain, DataTable dtSpeechTable, Font fontBoldTextOP, string modifiedOn)
    {
        int colCount = 4;
        var phraseMobility = new Phrase();
        phraseMobility.Add(new Chunk(Resources.Qola.UIverbiage.Communication + " \n", font10B));
        if (dtSpeechTable.Rows[0]["fd_communication_comments"].ToString() != null && dtSpeechTable.Rows[0]["fd_communication_comments"].ToString() != "")
        {
            modifiedOn = dtSpeechTable.Rows[0]["As_modified_on"].ToString();
            phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Date + ": " + modifiedOn + "\n", font8B));

            string specialDiet = dtSpeechTable.Rows[0]["fd_communication_comments"].ToString() + "\n";
            phraseMobility.Add(new Chunk("\n" + Resources.Qola.UIverbiage.Comment + "\n", font8B));
            phraseMobility.Add(new Chunk(specialDiet, font9));
        }

        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(phraseMobility));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;
        tblMain.AddCell(tblMainRow1Component);

        for (int index = 0; index < colCount; index++)
        {
            PdfPTable tblComponent = new PdfPTable(2);
            tblComponent.WidthPercentage = 100f;
            float[] wthComponent = new float[] { 1f, 9f };
            tblComponent.SetWidths(wthComponent);
            tblComponent.SpacingBefore = 5f;
            tblComponent.SpacingAfter = 5f;
            CreateSpeech(tblComponent, dtSpeechTable, fontBoldTextOP, index);
            CreateCommunicating(tblComponent, dtSpeechTable, fontBoldTextOP, index);
            tblMain.AddCell(tblComponent);
        }
    }

    private static void CreateSpecialEquipment(PdfPTable tblMain, DataTable dtPersonalHygieneTable, Font fontBoldTextOP)
    {
        int colCount = 4;
        string[] shavingCoulmn = { Resources.Qola.UIverbiage.NA, Resources.Qola.UIverbiage.Pendant, Resources.Qola.UIverbiage.TEDstocking, Resources.Qola.UIverbiage.Supportbrace, Resources.Qola.UIverbiage.Others };
        string[] shavingColumnValues = { "1SEN", "fd_SE_pendant", "fd_SE_ted_stocking", "fd_SE_support_brace", "fd_SE_others" };

        bool headAdd = false;
        for (int index = 0; index < colCount; index++)
        {
            if (getValue(dtPersonalHygieneTable.Rows[index]["fd_spceial_equipment"].ToString(), shavingColumnValues[0]) ||
            (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_SE_pendant"].ToString()) && dtPersonalHygieneTable.Rows[index]["fd_SE_pendant"].ToString() != "") ||
            (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_SE_ted_stocking"].ToString()) && dtPersonalHygieneTable.Rows[index]["fd_SE_ted_stocking"].ToString() != "") ||
            (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_SE_support_brace"].ToString()) && dtPersonalHygieneTable.Rows[index]["fd_SE_support_brace"].ToString() != "") ||
            (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_SE_others"].ToString()) && dtPersonalHygieneTable.Rows[index]["fd_SE_others"].ToString() != "")
            )
            {
                if (!headAdd)
                {
                    PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialEquipments, font10B));
                    tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblComponentRow1.VerticalAlignment = Element.ALIGN_TOP;
                    tblComponentRow1.PaddingLeft = 5f;
                    tblComponentRow1.PaddingBottom = 5f;

                    tblMain.AddCell(tblComponentRow1);
                    headAdd = true;
                }
            }
        }
        if (headAdd)
        {
            for (int index = 0; index < colCount; index++)
            {
                PdfPTable tblComponent = new PdfPTable(2);
                tblComponent.WidthPercentage = 100f;
                float[] wthComponent = new float[] { 1f, 9f };
                tblComponent.SetWidths(wthComponent);
                tblComponent.SpacingBefore = 5f;
                tblComponent.SpacingAfter = 5f;

                for (int colIndex = 0; colIndex < shavingCoulmn.Length; colIndex++)
                {
                    if (getValue(dtPersonalHygieneTable.Rows[index]["fd_spceial_equipment"].ToString(), shavingColumnValues[colIndex]) && shavingColumnValues[colIndex] == "1SEN")
                    {
                        PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                        fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                        fieldValue.PaddingLeft = 5f;
                        fieldValue.Border = 0;
                        tblComponent.AddCell(fieldValue);

                        PdfPCell FieldName = new PdfPCell(new Phrase(shavingCoulmn[colIndex], font9));
                        FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                        FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                        FieldName.PaddingLeft = 5f;
                        FieldName.Border = 0;
                        tblComponent.AddCell(FieldName);
                    }
                    else if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_SE_pendant"].ToString())
                        && dtPersonalHygieneTable.Rows[index]["fd_SE_pendant"].ToString() != ""
                        && shavingColumnValues[colIndex] == "fd_SE_pendant")
                    {
                        PdfPCell FieldName = new PdfPCell(new Phrase(shavingCoulmn[colIndex], font8B));
                        FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                        FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                        FieldName.PaddingLeft = 5f;
                        FieldName.Border = 0;
                        FieldName.Colspan = 2;
                        tblComponent.AddCell(FieldName);

                        PdfPCell FieldValue = new PdfPCell(new Phrase(dtPersonalHygieneTable.Rows[index]["fd_SE_pendant"].ToString(), font9));
                        FieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        FieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                        FieldValue.PaddingLeft = 5f;
                        FieldValue.Border = 0;
                        FieldValue.Colspan = 2;
                        tblComponent.AddCell(FieldValue);
                    }
                    else if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_SE_ted_stocking"].ToString())
                        && dtPersonalHygieneTable.Rows[index]["fd_SE_ted_stocking"].ToString() != ""
                        && shavingColumnValues[colIndex] == "fd_SE_ted_stocking")
                    {
                        PdfPCell FieldName = new PdfPCell(new Phrase(shavingCoulmn[colIndex], font8B));
                        FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                        FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                        FieldName.PaddingLeft = 5f;
                        FieldName.Border = 0;
                        FieldName.Colspan = 2;
                        tblComponent.AddCell(FieldName);

                        PdfPCell FieldValue = new PdfPCell(new Phrase(dtPersonalHygieneTable.Rows[index]["fd_SE_ted_stocking"].ToString(), font9));
                        FieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        FieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                        FieldValue.PaddingLeft = 5f;
                        FieldValue.Border = 0;
                        FieldValue.Colspan = 2;
                        tblComponent.AddCell(FieldValue);
                    }
                    else if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_SE_support_brace"].ToString())
                        && dtPersonalHygieneTable.Rows[index]["fd_SE_support_brace"].ToString() != ""
                        && shavingColumnValues[colIndex] == "fd_SE_support_brace")
                    {
                        PdfPCell FieldName = new PdfPCell(new Phrase(shavingCoulmn[colIndex], font8B));
                        FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                        FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                        FieldName.PaddingLeft = 5f;
                        FieldName.Border = 0;
                        FieldName.Colspan = 2;
                        tblComponent.AddCell(FieldName);

                        PdfPCell FieldValue = new PdfPCell(new Phrase(dtPersonalHygieneTable.Rows[index]["fd_SE_support_brace"].ToString(), font9));
                        FieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        FieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                        FieldValue.PaddingLeft = 5f;
                        FieldValue.Border = 0;
                        FieldValue.Colspan = 2;
                        tblComponent.AddCell(FieldValue);
                    }
                    else if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_SE_others"].ToString())
                        && dtPersonalHygieneTable.Rows[index]["fd_SE_others"].ToString() != ""
                        && shavingColumnValues[colIndex] == "fd_SE_others")
                    {
                        PdfPCell FieldName = new PdfPCell(new Phrase(shavingCoulmn[colIndex], font8B));
                        FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                        FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                        FieldName.PaddingLeft = 5f;
                        FieldName.Border = 0;
                        FieldName.Colspan = 2;
                        tblComponent.AddCell(FieldName);

                        PdfPCell FieldValue = new PdfPCell(new Phrase(dtPersonalHygieneTable.Rows[index]["fd_SE_others"].ToString(), font9));
                        FieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        FieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                        FieldValue.PaddingLeft = 5f;
                        FieldValue.Border = 0;
                        FieldValue.Colspan = 2;
                        tblComponent.AddCell(FieldValue);
                    }
                }
                tblMain.AddCell(tblComponent);
            }
        }
    }

    private static void CreateCareNeeds(PdfPTable tblMain, DataTable dtPersonalHygieneTable, Font fontBoldTextOP)
    {
        int colCount = 4;
        string[] shavingCoulmn = { Resources.Qola.UIverbiage.TotalCare, Resources.Qola.UIverbiage.PartialAssist, Resources.Qola.UIverbiage.Independent };
        string[] shavingColumnValues = { "1LT", "2LP", "3LI" };

        bool headAdd = false;
        for (int index = 0; index < colCount; index++)
        {
            if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_level_of_care"].ToString()) && dtPersonalHygieneTable.Rows[index]["fd_level_of_care"].ToString() != "")
            {
                if (!headAdd)
                {
                    PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CareNeeds, font10B));
                    tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblComponentRow1.VerticalAlignment = Element.ALIGN_TOP;
                    tblComponentRow1.PaddingLeft = 5f;
                    tblComponentRow1.PaddingBottom = 5f;
                    tblMain.AddCell(tblComponentRow1);
                    headAdd = true;
                    break;
                }
            }
        }
        if (headAdd)
        {
            for (int index = 0; index < colCount; index++)
            {
                PdfPTable tblComponent = new PdfPTable(2);
                tblComponent.WidthPercentage = 100f;
                float[] wthComponent = new float[] { 1f, 9f };
                tblComponent.SetWidths(wthComponent);
                tblComponent.SpacingBefore = 5f;
                tblComponent.SpacingAfter = 5f;
                for (int colIndex = 0; colIndex < shavingCoulmn.Length; colIndex++)
                {
                    if (getValue(dtPersonalHygieneTable.Rows[index]["fd_level_of_care"].ToString(), shavingColumnValues[colIndex]))
                    {
                        createTwoCellRow(fontBoldTextOP, tblComponent, shavingCoulmn[colIndex]);
                    }
                }
                tblMain.AddCell(tblComponent);
            }
        }
    }

    private static void CreateOTPT(PdfPTable tblMain, DataTable dtSpeechTable, Font fontBoldTextOP)
    {
        int colCount = 4;

        var phraseMobility = new Phrase();
        phraseMobility.Add(new Chunk(Resources.Qola.UIverbiage.OTPT + " \n", font10B));
        bool isAdd = false;
        for (int index = 0; index < colCount; index++)
        {
            if (getValue(dtSpeechTable.Rows[index]["fd_OT_PT"].ToString(), "1OP") ||
             getValue(dtSpeechTable.Rows[index]["fd_OT_PT"].ToString(), "2OS") ||
             getValue(dtSpeechTable.Rows[index]["fd_OT_PT"].ToString(), "3OW") ||
             getValue(dtSpeechTable.Rows[index]["fd_OT_PT"].ToString(), "4OA") ||
             getValue(dtSpeechTable.Rows[index]["fd_OT_PT"].ToString(), "5OP") ||
             getValue(dtSpeechTable.Rows[index]["fd_OT_PT"].ToString(), "6PP") ||
             getValue(dtSpeechTable.Rows[index]["fd_OT_PT"].ToString(), "7PW") ||
             getValue(dtSpeechTable.Rows[index]["fd_OT_PT"].ToString(), "8PA") ||
             getValue(dtSpeechTable.Rows[index]["fd_OT_PT"].ToString(), "9PP"))
            {
                if (!isAdd)
                {
                    PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(phraseMobility));
                    tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
                    tblMainRow1Component.PaddingLeft = 5f;
                    tblMainRow1Component.PaddingTop = 5f;
                    tblMain.AddCell(tblMainRow1Component);
                    isAdd = true;
                    break;
                }
            }
        }
        if (isAdd)
        {
            for (int index = 0; index < colCount; index++)
            {
                PdfPTable tblComponent = new PdfPTable(2);
                tblComponent.WidthPercentage = 100f;
                float[] wthComponent = new float[] { 1f, 9f };
                tblComponent.SetWidths(wthComponent);
                tblComponent.SpacingBefore = 5f;
                tblComponent.SpacingAfter = 5f;
                CreateOT(tblComponent, dtSpeechTable, fontBoldTextOP, index);
                CreatePT(tblComponent, dtSpeechTable, fontBoldTextOP, index);
                tblMain.AddCell(tblComponent);
            }
        }
    }
    private static void CreateVitalSigns(PdfPTable tblMain, DataTable dtSpeechTable, Font fontBoldTextOP)
    {
        int colCount = 4;
        var phraseMobility = new Phrase();
        phraseMobility.Add(new Chunk(Resources.Qola.UIverbiage.VitalSign + " \n", font10B));

        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(phraseMobility));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;
        tblMain.AddCell(tblMainRow1Component);

        for (int index = 0; index < colCount; index++)
        {
            PdfPTable tblComponent = new PdfPTable(2);
            tblComponent.WidthPercentage = 100f;
            float[] wthComponent = new float[] { 1f, 9f };
            tblComponent.SetWidths(wthComponent);
            tblComponent.SpacingBefore = 5f;
            tblComponent.SpacingAfter = 5f;
            CreateBP(tblComponent, dtSpeechTable, fontBoldTextOP, index);
            CreatePulse(tblComponent, dtSpeechTable, fontBoldTextOP, index);
            CreateWeight(tblComponent, dtSpeechTable, fontBoldTextOP, index);
            CreateHeight(tblComponent, dtSpeechTable, fontBoldTextOP, index);
            CreateOxygen(tblComponent, dtSpeechTable, fontBoldTextOP, index);
            tblMain.AddCell(tblComponent);
        }
    }

    #region "Elimination"

    private static void CreateBladder(PdfPTable tblComponent, DataTable dtEliminationTable, Font fontBoldTextOP, int index)
    {
        string[] BladderColumns = { Resources.Qola.UIverbiage.Continent, Resources.Qola.UIverbiage.InContinent,
                             Resources.Qola.UIverbiage.OCCInContinent, Resources.Qola.UIverbiage.Ifincontinentisitbeingmanaged, Resources.Qola.UIverbiage.CatheterChange,
                             Resources.Qola.UIverbiage.Home, Resources.Qola.UIverbiage.Agency,Resources.Qola.UIverbiage.Toiletingroutinetime};

        string[] BladderColumnValues = { "1EC", "2EI", "4BO", "fd_elimination_B_incontinence", "3EA", "5BH", "6BA", "fd_bladder_toileting" };
        bool bladderHead = false;
        for (int colIndex = 0; colIndex < BladderColumnValues.Length; colIndex++)
        {
            Phrase pharse = new Phrase("");
            if ((!String.IsNullOrEmpty(dtEliminationTable.Rows[index]["fd_elimination_B_incontinence"].ToString()) &&
                dtEliminationTable.Rows[index]["fd_elimination_B_incontinence"].ToString() != "")
                || (!String.IsNullOrEmpty(dtEliminationTable.Rows[index]["fd_bladder_toileting"].ToString()) &&
                dtEliminationTable.Rows[index]["fd_bladder_toileting"].ToString() != "")
                || getValue(dtEliminationTable.Rows[index]["fd_elimination_bladder"].ToString(), BladderColumnValues[0])
                || getValue(dtEliminationTable.Rows[index]["fd_elimination_bladder"].ToString(), BladderColumnValues[1])
                || getValue(dtEliminationTable.Rows[index]["fd_elimination_bladder"].ToString(), BladderColumnValues[2])
                || getValue(dtEliminationTable.Rows[index]["fd_elimination_bladder"].ToString(), BladderColumnValues[4])
                || getValue(dtEliminationTable.Rows[index]["fd_elimination_bladder"].ToString(), BladderColumnValues[5])
                || getValue(dtEliminationTable.Rows[index]["fd_elimination_bladder"].ToString(), BladderColumnValues[6])
                )
            {
                if (!bladderHead)
                {
                    pharse = new Phrase(Resources.Qola.UIverbiage.Bladder, font9B);
                    PdfPCell tblComponentRow1 = new PdfPCell(pharse);
                    tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                    tblComponentRow1.Colspan = 2;
                    tblComponentRow1.PaddingLeft = 5f;
                    tblComponentRow1.PaddingBottom = 5f;
                    tblComponentRow1.Border = 0;
                    tblComponent.AddCell(tblComponentRow1);
                    bladderHead = true;
                }
            }
            if (BladderColumnValues[colIndex] == "fd_elimination_B_incontinence" && dtEliminationTable.Rows[index]["fd_elimination_B_incontinence"].ToString() != null
                && dtEliminationTable.Rows[index]["fd_elimination_B_incontinence"].ToString() != "")
            {
                pharse = new Phrase(BladderColumns[colIndex], font9B);
                PdfPCell tblComponentRow1 = new PdfPCell(pharse);
                tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                tblComponentRow1.Colspan = 2;
                tblComponentRow1.PaddingLeft = 5f;
                tblComponentRow1.PaddingBottom = 5f;
                tblComponentRow1.Border = 0;
                tblComponent.AddCell(tblComponentRow1);
            }
            else if (BladderColumnValues[colIndex] == "fd_bladder_toileting" && dtEliminationTable.Rows[index]["fd_bladder_toileting"].ToString() != null && dtEliminationTable.Rows[index]["fd_bladder_toileting"].ToString() != "")
            {

                PdfPTable tblBladder = new PdfPTable(1);
                tblBladder.WidthPercentage = 100f;
                tblBladder.SetWidths(new float[] { 10f });
                tblBladder.SpacingBefore = 5f;
                tblBladder.SpacingAfter = 5f;

                pharse = new Phrase(BladderColumns[colIndex], font9B);
                PdfPCell tblComponentRow1 = new PdfPCell(pharse);
                tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                tblComponentRow1.Colspan = 1;
                tblComponentRow1.PaddingLeft = 5f;
                tblComponentRow1.PaddingBottom = 5f;
                tblComponentRow1.Border = 0;
                tblBladder.AddCell(tblComponentRow1);

                pharse = new Phrase(dtEliminationTable.Rows[index]["fd_bladder_toileting"].ToString(), font9);
                PdfPCell tblComponentRow2 = new PdfPCell(pharse);
                tblComponentRow2.HorizontalAlignment = Element.ALIGN_LEFT;
                tblComponentRow2.VerticalAlignment = Element.ALIGN_MIDDLE;
                tblComponentRow2.Colspan = 1;
                tblComponentRow2.PaddingLeft = 5f;
                tblComponentRow2.PaddingBottom = 5f;
                tblComponentRow2.Border = 0;
                tblBladder.AddCell(tblComponentRow2);


                PdfPCell toilet = new PdfPCell(tblBladder);
                toilet.Colspan = 2;
                toilet.Border = 0;
                tblComponent.AddCell(toilet);
            }
            else
            {
                pharse = new Phrase("");
                if (getValue(dtEliminationTable.Rows[index]["fd_elimination_bladder"].ToString(), BladderColumnValues[colIndex]))
                {
                    pharse = new Phrase("P", fontBoldTextOP);
                    PdfPCell fieldValue = new PdfPCell(pharse);
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(BladderColumns[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreateBowel(PdfPTable tblComponent, DataTable dtEliminationTable, Font fontBoldTextOP, int index)
    {
        string[] BowelColumns = { Resources.Qola.UIverbiage.Continent,Resources.Qola.UIverbiage.InContinent,
                             Resources.Qola.UIverbiage.OCCInContinent,Resources.Qola.UIverbiage.Ostomy,
                             Resources.Qola.UIverbiage.Home, Resources.Qola.UIverbiage.Agency,Resources.Qola.UIverbiage.Ostomy,
                             Resources.Qola.UIverbiage.Toiletingroutinetime,Resources.Qola.UIverbiage.ManagedAppropriately
                           };
        string[] BowelColumnValues = {  "1BC", "2BI", "4BN", "3BO",
                                    "5BH", "6BA", "fd_elimination_ostomy", "fd_bowel_toileting","fd_elimination_managed" };
        bool isAdd = false;
        for (int colIndex = 0; colIndex < BowelColumns.Length; colIndex++)
        {
            Phrase pharse = new Phrase("");
            if (!String.IsNullOrEmpty(dtEliminationTable.Rows[index]["fd_elimination_ostomy"].ToString()) ||
                !String.IsNullOrEmpty(dtEliminationTable.Rows[index]["fd_bowel_toileting"].ToString()) ||
                 getValue(dtEliminationTable.Rows[index]["fd_elimination_bowel"].ToString(), BowelColumnValues[0]) ||
                getValue(dtEliminationTable.Rows[index]["fd_elimination_bowel"].ToString(), BowelColumnValues[1]) ||
                getValue(dtEliminationTable.Rows[index]["fd_elimination_bowel"].ToString(), BowelColumnValues[2]) ||
                getValue(dtEliminationTable.Rows[index]["fd_elimination_bowel"].ToString(), BowelColumnValues[3]) ||
                getValue(dtEliminationTable.Rows[index]["fd_elimination_bowel"].ToString(), BowelColumnValues[4]) ||
                getValue(dtEliminationTable.Rows[index]["fd_elimination_bowel"].ToString(), BowelColumnValues[5])
                )
            {
                if (!isAdd)
                {
                    pharse = new Phrase(Resources.Qola.UIverbiage.Bowel, font9B);
                    PdfPCell tblComponentRow1 = new PdfPCell(pharse);
                    tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                    tblComponentRow1.Colspan = 2;
                    tblComponentRow1.PaddingLeft = 5f;
                    tblComponentRow1.PaddingBottom = 5f;
                    tblComponentRow1.Border = 0;
                    tblComponent.AddCell(tblComponentRow1);
                    isAdd = true;
                }
            }
            if ((BowelColumnValues[colIndex] == "fd_elimination_ostomy" && dtEliminationTable.Rows[index]["fd_elimination_ostomy"].ToString() != null && dtEliminationTable.Rows[index]["fd_elimination_ostomy"].ToString() != "")
                || BowelColumnValues[colIndex] == "fd_bowel_toileting" && dtEliminationTable.Rows[index]["fd_bowel_toileting"].ToString() != null && dtEliminationTable.Rows[index]["fd_bowel_toileting"].ToString() != "")
            {
                PdfPTable tblBowel = new PdfPTable(1);
                tblBowel.WidthPercentage = 100f;
                tblBowel.SetWidths(new float[] { 10f });
                tblBowel.SpacingBefore = 5f;
                tblBowel.SpacingAfter = 5f;
                tblBowel.DefaultCell.Border = 0;

                pharse = new Phrase(BowelColumns[colIndex], font9B);
                PdfPCell tblComponentRow1 = new PdfPCell(pharse);
                tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                tblComponentRow1.PaddingLeft = 5f;
                tblComponentRow1.PaddingBottom = 5f;
                tblComponentRow1.Border = 0;
                tblBowel.AddCell(tblComponentRow1);

                pharse = new Phrase(dtEliminationTable.Rows[index][BowelColumnValues[colIndex]].ToString(), font9);
                PdfPCell tblComponentRow2 = new PdfPCell(pharse);
                tblComponentRow2.HorizontalAlignment = Element.ALIGN_LEFT;
                tblComponentRow2.VerticalAlignment = Element.ALIGN_MIDDLE;
                tblComponentRow2.Colspan = 1;
                tblComponentRow2.PaddingLeft = 5f;
                tblComponentRow2.PaddingBottom = 5f;
                tblComponentRow2.Border = 0;
                tblBowel.AddCell(tblComponentRow2);

                PdfPCell toilet = new PdfPCell(tblBowel);
                toilet.Colspan = 2;
                toilet.Border = 0;
                tblComponent.AddCell(toilet);
            }
            else if (BowelColumnValues[colIndex] == "fd_elimination_managed" && dtEliminationTable.Rows[index]["fd_elimination_managed"].ToString() != null && dtEliminationTable.Rows[index]["fd_elimination_managed"].ToString() != "")
            {

                PdfPTable tblElimination = new PdfPTable(1);
                tblElimination.WidthPercentage = 100f;
                tblElimination.SetWidths(new float[] { 10f });
                tblElimination.SpacingBefore = 5f;
                tblElimination.SpacingAfter = 5f;
                tblElimination.DefaultCell.Border = Rectangle.NO_BORDER;
                pharse = new Phrase(BowelColumns[colIndex], font9B);
                PdfPCell tblComponentRow1 = new PdfPCell(pharse);
                tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
                tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
                tblComponentRow1.Colspan = 1;
                tblComponentRow1.PaddingLeft = 5f;
                tblComponentRow1.PaddingBottom = 5f;
                tblComponentRow1.Border = 0;
                tblElimination.AddCell(tblComponentRow1);

                string option = dtEliminationTable.Rows[index]["fd_elimination_managed"].ToString() == "N" ? "No" : "Yes";
                pharse = new Phrase(option, font9);
                PdfPCell tblComponentRow2 = new PdfPCell(pharse);
                tblComponentRow2.HorizontalAlignment = Element.ALIGN_LEFT;
                tblComponentRow2.VerticalAlignment = Element.ALIGN_MIDDLE;
                tblComponentRow2.Colspan = 1;
                tblComponentRow2.PaddingLeft = 5f;
                tblComponentRow2.PaddingBottom = 5f;
                tblComponentRow2.Border = 0;
                tblElimination.AddCell(tblComponentRow2);

                PdfPCell toilet = new PdfPCell(tblElimination);
                toilet.Colspan = 2;
                toilet.Border = 0;
                tblComponent.AddCell(toilet);
            }
            else
            {
                pharse = new Phrase("");
                if (getValue(dtEliminationTable.Rows[index]["fd_elimination_bowel"].ToString(), BowelColumnValues[colIndex]))
                {
                    pharse = new Phrase("P", fontBoldTextOP);
                    PdfPCell fieldValue = new PdfPCell(pharse);
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(BowelColumns[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }
    #endregion "Elimination"

    #region "Personal Hydeine"
    private static void CreatePersonalHygieneApper(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] HygieneCoulmn = { Resources.Qola.UIverbiage.DoesPersonalHygieneappearappropriate, Resources.Qola.UIverbiage.Yes, Resources.Qola.UIverbiage.No };
        string[] HygieneColumnValues = { "", "Y", "N" };

        string option = string.Empty;
        option = dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene_appropriate"].ToString().Trim() != "" ? dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene_appropriate"].ToString().Trim() : "";
        if (option != "")
        {
            option = option == "Y" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DoesPersonalHygieneappearappropriate, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
            fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
            fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
            fieldValue.PaddingLeft = 5f;
            fieldValue.Border = 0;
            tblComponent.AddCell(fieldValue);

            PdfPCell FieldName = new PdfPCell(new Phrase(option, font9));
            FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
            FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
            FieldName.PaddingLeft = 5f;
            FieldName.Border = 0;
            tblComponent.AddCell(FieldName);
        }
    }

    private static void CreateAMCare(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] AMCareCoulmn = { Resources.Qola.UIverbiage.NA, Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Supervised,
                                     Resources.Qola.UIverbiage.Assisted,Resources.Qola.UIverbiage.Home, Resources.Qola.UIverbiage.Agency};
        string[] AMCareColumnValues = { "54PN", "1AI", "2AS", "3AA", "52PH", "53PA" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), AMCareColumnValues[0]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), AMCareColumnValues[1]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), AMCareColumnValues[2]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), AMCareColumnValues[3]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), AMCareColumnValues[4]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), AMCareColumnValues[5])
            )
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AMcare, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < AMCareCoulmn.Length; colIndex++)
            {
                if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), AMCareColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(AMCareCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreateBathing(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] BathCoulmn = { Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Supervised, Resources.Qola.UIverbiage.Assisted, Resources.Qola.UIverbiage.Home, Resources.Qola.UIverbiage.Agency };
        string[] BathColumnValues = { "4BI", "5BS", "6BA", "55BH", "56BA", "55BH56BA" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), BathColumnValues[0]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), BathColumnValues[1]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), BathColumnValues[2]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), BathColumnValues[3]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), BathColumnValues[4]))
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bathing, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < BathCoulmn.Length; colIndex++)
            {
                if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), BathColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(BathCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreateDressingunDressing(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] DressingCoulmn = {  Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Supervised,Resources.Qola.UIverbiage.Assisted,
                                 Resources.Qola.UIverbiage.HelpAssemblingClothes, Resources.Qola.UIverbiage.IntermittentSupervision,
                                 Resources.Qola.UIverbiage.ConstantSubSomeAssistance,Resources.Qola.UIverbiage.TotalAssistance,
                                 Resources.Qola.UIverbiage.Home, Resources.Qola.UIverbiage.Agency };
        string[] DressingColumnValues = { "7DI", "8DS", "9DA", "26DH", "27DN", "28DO", "29DT", "57DH", "58DA" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), DressingColumnValues[0]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), DressingColumnValues[1]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), DressingColumnValues[2]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), DressingColumnValues[3]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), DressingColumnValues[4]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), DressingColumnValues[5]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), DressingColumnValues[6]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), DressingColumnValues[7]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), DressingColumnValues[8]))
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DressingUndressing, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < DressingCoulmn.Length; colIndex++)
            {
                if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), DressingColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(DressingCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreateAssistWith(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] assistCoulmn = {  Resources.Qola.UIverbiage.ArmsInSleeves, Resources.Qola.UIverbiage.GarmentOverHead,Resources.Qola.UIverbiage.PullingPantsOn,
                                 Resources.Qola.UIverbiage.SocksStockingsShoes, Resources.Qola.UIverbiage.FastenersFrontBack };
        string[] assistColumnValues = { "30AA", "31AG", "32AP", "33AS", "34AF" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), assistColumnValues[0]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), assistColumnValues[1]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), assistColumnValues[2]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), assistColumnValues[3]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), assistColumnValues[4]))
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistWith, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < assistCoulmn.Length; colIndex++)
            {
                if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), assistColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(assistCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreateShaving(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] shavingCoulmn = { Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Supervised, Resources.Qola.UIverbiage.Assisted };
        string[] shavingColumnValues = { "10SI", "11SS", "12SA" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), shavingColumnValues[0]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), shavingColumnValues[1]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), shavingColumnValues[2]))
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Shaving, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < shavingCoulmn.Length; colIndex++)
            {
                if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), shavingColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(shavingCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreateOralCare(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] oralCareCoulmn = { Resources.Qola.UIverbiage.Independent, Resources.Qola.UIverbiage.Supervised, Resources.Qola.UIverbiage.Assisted };
        string[] oralCareColumnValues = { "13OI", "14OS", "15OA" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), oralCareColumnValues[0]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), oralCareColumnValues[1]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), oralCareColumnValues[2]))
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Oralcare, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < oralCareCoulmn.Length; colIndex++)
            {
                if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), oralCareColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(oralCareCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreateTeeth(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] teethCoulmn = { Resources.Qola.UIverbiage.OwnTeeth, Resources.Qola.UIverbiage.Full, Resources.Qola.UIverbiage.Partial ,
                               Resources.Qola.UIverbiage.None,Resources.Qola.UIverbiage.Upper,Resources.Qola.UIverbiage.Lower};
        string[] teethColumnValues = { "51TO", "16TF", "17TP", "18TN", "59TU", "60TL" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), teethColumnValues[0]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), teethColumnValues[1]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), teethColumnValues[2]) ||
             getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), teethColumnValues[3]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), teethColumnValues[4]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), teethColumnValues[5])
            )
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Teeth, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < teethCoulmn.Length; colIndex++)
            {
                if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), teethColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(teethCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreateDentures(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] dentureCoulmn = { Resources.Qola.UIverbiage.NA, Resources.Qola.UIverbiage.Upper, Resources.Qola.UIverbiage.Lower ,
                               Resources.Qola.UIverbiage.Full,Resources.Qola.UIverbiage.Partial};
        string[] dentureColumnValues = { "61DN", "19DU", "20DL", "21DF", "22DP" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dentureColumnValues[0]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dentureColumnValues[1]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dentureColumnValues[2]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dentureColumnValues[3]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dentureColumnValues[4]))
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dentures, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < dentureCoulmn.Length; colIndex++)
            {
                if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dentureColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(dentureCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreatePreferedBathing(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] bathingCoulmn = { Resources.Qola.UIverbiage.Tub, Resources.Qola.UIverbiage.Shower, Resources.Qola.UIverbiage.Other,
                               Resources.Qola.UIverbiage.Sponge,Resources.Qola.UIverbiage.Self,Resources.Qola.UIverbiage.Assist,
                               Resources.Qola.UIverbiage.Dependent};
        string[] bathingColumnValues = { "23PT", "24PS", "25PO", "35PP", "36PE", "37PA", "38PD" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), bathingColumnValues[0]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), bathingColumnValues[1]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), bathingColumnValues[2]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), bathingColumnValues[3]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), bathingColumnValues[4]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), bathingColumnValues[5]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), bathingColumnValues[6]))
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredBathing, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < bathingCoulmn.Length; colIndex++)
            {
                if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), bathingColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(bathingCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreatePreferedDay(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] dayCoulmn = { Resources.Qola.UIverbiage.NA, Resources.Qola.UIverbiage.EveryDay, Resources.Qola.UIverbiage.Sunday,
                               Resources.Qola.UIverbiage.Monday,Resources.Qola.UIverbiage.Tuesday ,Resources.Qola.UIverbiage.Wednesday,
                               Resources.Qola.UIverbiage.Thursday,Resources.Qola.UIverbiage.Friday,Resources.Qola.UIverbiage.Saturday,
                               Resources.Qola.UIverbiage.PreferredTimeofDay,Resources.Qola.UIverbiage.Frequency};
        string[] dayColumnValues = { "62PA", "63PE", "44PS", "45PM", "46PT", "47PW", "48PH", "49PF", "50PA", "fd_PH_bathing_time", "fd_PH_bathing_frequency" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dayColumnValues[0]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dayColumnValues[1]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dayColumnValues[2]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dayColumnValues[3]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dayColumnValues[4]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dayColumnValues[5]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dayColumnValues[6]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dayColumnValues[7]) ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dayColumnValues[8]) ||
           (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_time"].ToString())
           && dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_time"].ToString() != "") ||
            (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_frequency"].ToString()) &&
            dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_frequency"].ToString() != "")
            )
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredDay, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < dayCoulmn.Length; colIndex++)
            {
                if (dayCoulmn[colIndex] == Resources.Qola.UIverbiage.PreferredTimeofDay)
                {
                    if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_time"].ToString())
           && dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_time"].ToString() != "")
                    {
                        PdfPCell preferredTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredTimeofDay, font9B));
                        preferredTime.HorizontalAlignment = Element.ALIGN_LEFT;
                        preferredTime.VerticalAlignment = Element.ALIGN_MIDDLE;
                        preferredTime.Colspan = 2;
                        preferredTime.Border = 0;
                        tblComponent.AddCell(preferredTime);

                        PdfPCell preferredTimeValue = new PdfPCell(new Phrase(dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_time"].ToString(), font9));
                        preferredTimeValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        preferredTimeValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                        preferredTimeValue.Colspan = 2;
                        preferredTimeValue.Border = 0;
                        tblComponent.AddCell(preferredTimeValue);
                    }
                }
                else if (dayCoulmn[colIndex] == Resources.Qola.UIverbiage.Frequency)
                {
                    if ((!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_frequency"].ToString()) &&
                            dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_frequency"].ToString() != ""))
                    {
                        PdfPCell frequency = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Frequency, font9B));
                        frequency.HorizontalAlignment = Element.ALIGN_LEFT;
                        frequency.VerticalAlignment = Element.ALIGN_MIDDLE;
                        frequency.Colspan = 2;
                        frequency.Border = 0;
                        tblComponent.AddCell(frequency);

                        PdfPCell frequencyValue = new PdfPCell(new Phrase(dtPersonalHygieneTable.Rows[index]["fd_PH_bathing_frequency"].ToString(), font9));
                        frequencyValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        frequencyValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                        frequencyValue.Colspan = 2;
                        frequencyValue.Border = 0;
                        tblComponent.AddCell(frequencyValue);
                    }
                }
                else if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), dayColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(dayCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreateSleep(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] sleepCoulmn = {
                               Resources.Qola.UIverbiage.ServiceProvisionByExternalService,
                               Resources.Qola.UIverbiage.CCAC,Resources.Qola.UIverbiage.Agency,Resources.Qola.UIverbiage.NameOfAgency };
        string[] sleepColumnValues = { "fd_PH_service", "3SC", "4SA", "fd_PH_service_agency" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "1SA") ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "2SP") ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "3PR") ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "4PL") ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "5PW") ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "6PC") ||
             getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "3SC") ||
              getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "4SA") ||
              (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_PH_service"].ToString()) &&
            dtPersonalHygieneTable.Rows[index]["fd_PH_service"].ToString() != "")
            || (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_PH_service_agency"].ToString()) &&
            dtPersonalHygieneTable.Rows[index]["fd_PH_service_agency"].ToString() != "")
            )
        {
            CreateSleepRest(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
            CreateSleepPattern(tblComponent, dtPersonalHygieneTable, fontBoldTextOP, index);
            if (
                getValue(dtPersonalHygieneTable.Rows[index]["fd_PH_service"].ToString(), "3SC")
                || getValue(dtPersonalHygieneTable.Rows[index]["fd_PH_service"].ToString(), "4SA")
            || (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_PH_service_agency"].ToString()) &&
            dtPersonalHygieneTable.Rows[index]["fd_PH_service_agency"].ToString() != ""))
            {
                for (int colIndex = 0; colIndex < sleepCoulmn.Length; colIndex++)
                {
                    if (colIndex == 0)
                    {
                        PdfPCell frequency = new PdfPCell(new Phrase(sleepCoulmn[colIndex], font9B));
                        frequency.HorizontalAlignment = Element.ALIGN_LEFT;
                        frequency.VerticalAlignment = Element.ALIGN_MIDDLE;
                        frequency.Colspan = 2;
                        frequency.Border = 0;
                        tblComponent.AddCell(frequency);
                    }

                    if (getValue(dtPersonalHygieneTable.Rows[index]["fd_PH_service"].ToString(), sleepColumnValues[colIndex]))
                    {
                        PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                        fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                        fieldValue.PaddingLeft = 5f;
                        fieldValue.Border = 0;
                        tblComponent.AddCell(fieldValue);

                        PdfPCell FieldName = new PdfPCell(new Phrase(sleepCoulmn[colIndex], font9));
                        FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                        FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                        FieldName.PaddingLeft = 5f;
                        FieldName.Border = 0;
                        tblComponent.AddCell(FieldName);
                    }
                    else if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_PH_service_agency"].ToString()) &&
                     dtPersonalHygieneTable.Rows[index]["fd_PH_service_agency"].ToString() != "" && sleepColumnValues[colIndex] == "fd_PH_service_agency")
                    {
                        PdfPCell agency = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NameOfAgency, font9B));
                        agency.HorizontalAlignment = Element.ALIGN_LEFT;
                        agency.VerticalAlignment = Element.ALIGN_MIDDLE;
                        agency.Colspan = 2;
                        agency.Border = 0;
                        tblComponent.AddCell(agency);

                        PdfPCell frequencyValue = new PdfPCell(new Phrase(dtPersonalHygieneTable.Rows[index]["fd_PH_service_agency"].ToString(), font9));
                        frequencyValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        frequencyValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                        frequencyValue.Colspan = 2;
                        frequencyValue.Border = 0;
                        tblComponent.AddCell(frequencyValue);
                    }
                }
            }
        }
    }
    private static void CreateSleepRest(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] sleepCoulmn = { Resources.Qola.UIverbiage.AMRest, Resources.Qola.UIverbiage.PMRest };
        string[] sleepColumnValues = { "1SA", "2SP" };
        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "1SA") ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "2SP"))
        {

            PdfPCell preferredTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SleepRest, font9B));
            preferredTime.HorizontalAlignment = Element.ALIGN_LEFT;
            preferredTime.VerticalAlignment = Element.ALIGN_MIDDLE;
            preferredTime.Colspan = 2;
            preferredTime.Border = 0;
            tblComponent.AddCell(preferredTime);

            for (int colIndex = 0; colIndex < sleepCoulmn.Length; colIndex++)
            {
                if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), sleepColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(sleepCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }
    private static void CreateSleepPattern(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        string[] sleepCoulmn = { Resources.Qola.UIverbiage.Restful ,Resources.Qola.UIverbiage.Restless,
                               Resources.Qola.UIverbiage.WandersAtNight,Resources.Qola.UIverbiage.CPAP};
        string[] sleepColumnValues = { "3PR", "4PL", "5PW", "6PC" };

        if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "3PR") ||
            getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "4PL")
            || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "5PW")
            || getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), "6PC")
            )
        {

            PdfPCell preferredTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SleepPattern, font9B));
            preferredTime.HorizontalAlignment = Element.ALIGN_LEFT;
            preferredTime.VerticalAlignment = Element.ALIGN_MIDDLE;
            preferredTime.Colspan = 2;
            preferredTime.Border = 0;
            tblComponent.AddCell(preferredTime);

            for (int colIndex = 0; colIndex < sleepCoulmn.Length; colIndex++)
            {
                if (getValue(dtPersonalHygieneTable.Rows[index]["fd_personal_hygiene"].ToString(), sleepColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(sleepCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }
    #endregion "Personal Hydeine"

    #region "Sensory Abilities"
    private static void CreateVision(PdfPTable tblComponent, DataTable dtVisionTable, Font fontBoldTextOP, int index)
    {
        string[] AMCareCoulmn = { Resources.Qola.UIverbiage.Normal, Resources.Qola.UIverbiage.Impaired, Resources.Qola.UIverbiage.ImpairedLeft,
                                     Resources.Qola.UIverbiage.ImpairedRight,Resources.Qola.UIverbiage.Blind, Resources.Qola.UIverbiage.BlindLeft,
                                Resources.Qola.UIverbiage.BlindRight,Resources.Qola.UIverbiage.Glasses, Resources.Qola.UIverbiage.ContactLens,
                                Resources.Qola.UIverbiage.Adequate,Resources.Qola.UIverbiage.ReadingGlasses };

        string[] AMCareColumnValues = { "1VN", "2VI", "8VIL", "9VIR", "3VB", "6VL", "7VR", "4VG", "5VC", "10VA", "11VR" };

        if (getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[0]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[1]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[2]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[3]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[4]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[5]) ||
             getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[6]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[7]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[8]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[9]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[10])
            )
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < AMCareCoulmn.Length; colIndex++)
            {
                if (getValue(dtVisionTable.Rows[index]["fd_SA_vision"].ToString(), AMCareColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(AMCareCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }

    private static void CreateHearing(PdfPTable tblComponent, DataTable dtVisionTable, Font fontBoldTextOP, int index)
    {
        string[] AMCareCoulmn = { Resources.Qola.UIverbiage.Normal, Resources.Qola.UIverbiage.Impaired, Resources.Qola.UIverbiage.ImpairedLeft,
                                     Resources.Qola.UIverbiage.ImpairedRight,Resources.Qola.UIverbiage.Deaf, Resources.Qola.UIverbiage.DeafLeft,
                                Resources.Qola.UIverbiage.DeafRight,Resources.Qola.UIverbiage.AideLeft, Resources.Qola.UIverbiage.AideRight,
                                Resources.Qola.UIverbiage.Independent,Resources.Qola.UIverbiage.Supervised,Resources.Qola.UIverbiage.Assisted,Resources.Qola.UIverbiage.Adequate };
        string[] AMCareColumnValues = { "1HN", "2HI", "9HM", "10HP", "3HD", "11HE", "12HA", "4HL", "5HR", "6HN", "7HS", "8HA", "13HQ" };

        if (getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[0]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[1]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[2]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[3]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[4]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[5]) ||
             getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[6]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[7]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[8]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[9]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[10]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[11]) ||
            getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[12])
            )
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Hearing, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < AMCareCoulmn.Length; colIndex++)
            {
                if (getValue(dtVisionTable.Rows[index]["fd_SA_hearing"].ToString(), AMCareColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(AMCareCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }
    #endregion "Sensory Abilities"

    #region "Communication"
    private static void CreateSpeech(PdfPTable tblComponent, DataTable dtVisionTable, Font fontBoldTextOP, int index)
    {
        string[] AMCareCoulmn = { Resources.Qola.UIverbiage.Normal, Resources.Qola.UIverbiage.Difficulty, Resources.Qola.UIverbiage.Aphasia };
        string[] AMCareColumnValues = { "1SN", "2SD", "9SA" };

        PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Speech, font9B));
        tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
        tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
        tblComponentRow1.Colspan = 2;
        tblComponentRow1.PaddingLeft = 5f;
        tblComponentRow1.PaddingBottom = 5f;
        tblComponentRow1.Border = 0;
        tblComponent.AddCell(tblComponentRow1);

        for (int colIndex = 0; colIndex < AMCareCoulmn.Length; colIndex++)
        {
            Phrase pharse = new Phrase("");
            if (getValue(dtVisionTable.Rows[index]["fd_communication"].ToString(), AMCareColumnValues[colIndex]))
            {
                pharse = new Phrase("P", fontBoldTextOP);
            }
            PdfPCell fieldValue = new PdfPCell(pharse);
            fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
            fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
            fieldValue.PaddingLeft = 5f;
            fieldValue.Border = 0;
            tblComponent.AddCell(fieldValue);

            PdfPCell FieldName = new PdfPCell(new Phrase(AMCareCoulmn[colIndex], font9));
            FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
            FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
            FieldName.PaddingLeft = 5f;
            FieldName.Border = 0;
            tblComponent.AddCell(FieldName);
        }
    }

    private static void CreateCommunicating(PdfPTable tblComponent, DataTable dtCommunicationTable, Font fontBoldTextOP, int index)
    {
        string[] AMCareCoulmn = { Resources.Qola.UIverbiage.LanguageSpoken, Resources.Qola.UIverbiage.Languagebarrier, Resources.Qola.UIverbiage.UnderstandsInstruction,
                                Resources.Qola.UIverbiage.Difficultyincommunicating,Resources.Qola.UIverbiage.Difficultyinunderstanding,Resources.Qola.UIverbiage.Impairedabilitytocommunicate
                                };
        string[] AMCareColumnValues = { "fd_language_spoken", "3CL", "4CU", "6CD", "7CI", "8CM" };

        PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Communicating, font9B));
        tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
        tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
        tblComponentRow1.Colspan = 2;
        tblComponentRow1.PaddingLeft = 5f;
        tblComponentRow1.PaddingBottom = 5f;
        tblComponentRow1.Border = 0;
        tblComponent.AddCell(tblComponentRow1);

        for (int colIndex = 0; colIndex < AMCareCoulmn.Length; colIndex++)
        {
            if (AMCareCoulmn[colIndex] == Resources.Qola.UIverbiage.LanguageSpoken)
            {
                PdfPCell FieldName = new PdfPCell(new Phrase(AMCareCoulmn[colIndex], font8B));
                FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                FieldName.PaddingLeft = 5f;
                FieldName.Border = 0;
                FieldName.Colspan = 2;
                tblComponent.AddCell(FieldName);

                if (!String.IsNullOrEmpty(dtCommunicationTable.Rows[index]["fd_language_spoken"].ToString()))
                {
                    PdfPCell FieldValue = new PdfPCell(new Phrase(dtCommunicationTable.Rows[index]["fd_language_spoken"].ToString(), font9));
                    FieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldValue.PaddingLeft = 5f;
                    FieldValue.Border = 0;
                    FieldValue.Colspan = 2;
                    tblComponent.AddCell(FieldValue);
                }
            }
            else
            {
                Phrase pharse = new Phrase("");
                if (getValue(dtCommunicationTable.Rows[index]["fd_communication"].ToString(), AMCareColumnValues[colIndex]))
                {
                    pharse = new Phrase("P", fontBoldTextOP);
                }

                PdfPCell fieldValue = new PdfPCell(pharse);
                fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                fieldValue.PaddingLeft = 5f;
                fieldValue.Border = 0;
                tblComponent.AddCell(fieldValue);

                PdfPCell FieldName = new PdfPCell(new Phrase(AMCareCoulmn[colIndex], font9));
                FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                FieldName.PaddingLeft = 5f;
                FieldName.Border = 0;
                tblComponent.AddCell(FieldName);
            }
        }
    }
    #endregion "Communication"

    #region "OTPT"
    private static void CreateOT(PdfPTable tblComponent, DataTable dtVisionTable, Font fontBoldTextOP, int index)
    {
        string[] AMCareCoulmn = { Resources.Qola.UIverbiage.Physio, Resources.Qola.UIverbiage.Programstarted, Resources.Qola.UIverbiage.Weeklyscheduled,
                                    Resources.Qola.UIverbiage.Agency,Resources.Qola.UIverbiage.Private };
        string[] AMCareColumnValues = { "1OP", "2OS", "3OW", "4OA", "5OP" };

        if (getValue(dtVisionTable.Rows[index]["fd_OT_PT"].ToString(), AMCareColumnValues[0]) ||
             getValue(dtVisionTable.Rows[index]["fd_OT_PT"].ToString(), AMCareColumnValues[1]) ||
             getValue(dtVisionTable.Rows[index]["fd_OT_PT"].ToString(), AMCareColumnValues[2]) ||
             getValue(dtVisionTable.Rows[index]["fd_OT_PT"].ToString(), AMCareColumnValues[3]) ||
             getValue(dtVisionTable.Rows[index]["fd_OT_PT"].ToString(), AMCareColumnValues[4])
             )
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OT, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < AMCareCoulmn.Length; colIndex++)
            {
                if (getValue(dtVisionTable.Rows[index]["fd_OT_PT"].ToString(), AMCareColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(AMCareCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }

        }
    }
    private static void CreatePT(PdfPTable tblComponent, DataTable dtVisionTable, Font fontBoldTextOP, int index)
    {
        string[] AMCareCoulmn = {  Resources.Qola.UIverbiage.Programstarted, Resources.Qola.UIverbiage.Weeklyscheduled,
                                    Resources.Qola.UIverbiage.Agency,Resources.Qola.UIverbiage.Private };
        string[] AMCareColumnValues = { "6PP", "7PW", "8PA", "9PP" };

        if (getValue(dtVisionTable.Rows[index]["fd_OT_PT"].ToString(), AMCareColumnValues[0]) ||
             getValue(dtVisionTable.Rows[index]["fd_OT_PT"].ToString(), AMCareColumnValues[1]) ||
             getValue(dtVisionTable.Rows[index]["fd_OT_PT"].ToString(), AMCareColumnValues[2]) ||
             getValue(dtVisionTable.Rows[index]["fd_OT_PT"].ToString(), AMCareColumnValues[3])
            )
        {
            PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PT, font9B));
            tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
            tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblComponentRow1.Colspan = 2;
            tblComponentRow1.PaddingLeft = 5f;
            tblComponentRow1.PaddingBottom = 5f;
            tblComponentRow1.Border = 0;
            tblComponent.AddCell(tblComponentRow1);

            for (int colIndex = 0; colIndex < AMCareCoulmn.Length; colIndex++)
            {
                if (getValue(dtVisionTable.Rows[index]["fd_OT_PT"].ToString(), AMCareColumnValues[colIndex]))
                {
                    PdfPCell fieldValue = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    tblComponent.AddCell(fieldValue);

                    PdfPCell FieldName = new PdfPCell(new Phrase(AMCareCoulmn[colIndex], font9));
                    FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                    FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                    FieldName.PaddingLeft = 5f;
                    FieldName.Border = 0;
                    tblComponent.AddCell(FieldName);
                }
            }
        }
    }
    #endregion "OTPT"

    #region "Vital Sign"
    private static void CreateBP(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BP, font9B));
        tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
        tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
        tblComponentRow1.Colspan = 2;
        tblComponentRow1.PaddingLeft = 5f;
        tblComponentRow1.PaddingBottom = 5f;
        tblComponentRow1.Border = 0;
        tblComponent.AddCell(tblComponentRow1);

        PdfPCell fieldValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value, font7B));
        fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
        fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        fieldValue.PaddingLeft = 5f;
        fieldValue.Border = 0;
        fieldValue.Colspan = 2;
        tblComponent.AddCell(fieldValue);

        Phrase BPPhrase = new Phrase();
        if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_BP_value"].ToString()) && dtPersonalHygieneTable.Rows[index]["fd_BP_value"].ToString() != "")
        {
            BPPhrase = new Phrase(dtPersonalHygieneTable.Rows[index]["fd_BP_value"].ToString(), font9);
        }
        PdfPCell FieldName = new PdfPCell(BPPhrase);
        FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
        FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
        FieldName.PaddingLeft = 5f;
        FieldName.Border = 0;
        FieldName.Colspan = 2;
        tblComponent.AddCell(FieldName);

        PdfPCell DateValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateComplete, font7B));
        DateValue.HorizontalAlignment = Element.ALIGN_LEFT;
        DateValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        DateValue.PaddingLeft = 5f;
        DateValue.Border = 0;
        DateValue.Colspan = 2;
        tblComponent.AddCell(DateValue);

        Phrase datePhrase = new Phrase();
        if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_BP_date"].ToString()))
        {
            datePhrase = new Phrase(dtPersonalHygieneTable.Rows[index]["fd_BP_date"].ToString(), font9);
        }
        PdfPCell DateName = new PdfPCell(datePhrase);
        DateName.HorizontalAlignment = Element.ALIGN_LEFT;
        DateName.VerticalAlignment = Element.ALIGN_MIDDLE;
        DateName.PaddingLeft = 5f;
        DateName.Border = 0;
        DateName.Colspan = 2;
        tblComponent.AddCell(DateName);
    }

    private static void CreatePulse(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pulse, font9B));
        tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
        tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
        tblComponentRow1.Colspan = 2;
        tblComponentRow1.PaddingLeft = 5f;
        tblComponentRow1.PaddingBottom = 5f;
        tblComponentRow1.Border = 0;
        tblComponent.AddCell(tblComponentRow1);

        PdfPCell fieldValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value, font7B));
        fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
        fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        fieldValue.PaddingLeft = 5f;
        fieldValue.Border = 0;
        fieldValue.Colspan = 2;
        tblComponent.AddCell(fieldValue);
        Phrase pulseValue = new Phrase();
        if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_pulse_value"].ToString()))
        {
            pulseValue = new Phrase(dtPersonalHygieneTable.Rows[index]["fd_pulse_value"].ToString(), font9);
        }
        PdfPCell FieldName = new PdfPCell(pulseValue);
        FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
        FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
        FieldName.PaddingLeft = 5f;
        FieldName.Border = 0;
        FieldName.Colspan = 2;
        tblComponent.AddCell(FieldName);

        PdfPCell DateValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateComplete, font7B));
        DateValue.HorizontalAlignment = Element.ALIGN_LEFT;
        DateValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        DateValue.PaddingLeft = 5f;
        DateValue.Border = 0;
        DateValue.Colspan = 2;
        tblComponent.AddCell(DateValue);

        Phrase datePhrase = new Phrase();
        if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_pulse_date"].ToString()))
        {
            datePhrase = new Phrase(dtPersonalHygieneTable.Rows[index]["fd_pulse_date"].ToString(), font9);
        }

        PdfPCell DateName = new PdfPCell(datePhrase);
        DateName.HorizontalAlignment = Element.ALIGN_LEFT;
        DateName.VerticalAlignment = Element.ALIGN_MIDDLE;
        DateName.PaddingLeft = 5f;
        DateName.Border = 0;
        DateName.Colspan = 2;
        tblComponent.AddCell(DateName);
    }

    private static void CreateWeight(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Weight, font9B));
        tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
        tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
        tblComponentRow1.Colspan = 2;
        tblComponentRow1.PaddingLeft = 5f;
        tblComponentRow1.PaddingBottom = 5f;
        tblComponentRow1.Border = 0;
        tblComponent.AddCell(tblComponentRow1);

        PdfPCell fieldValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value, font7B));
        fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
        fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        fieldValue.PaddingLeft = 5f;
        fieldValue.Border = 0;
        fieldValue.Colspan = 2;
        tblComponent.AddCell(fieldValue);

        Phrase weightPhrase = new Phrase();
        if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_weight_value"].ToString()))
        {
            weightPhrase = new Phrase(dtPersonalHygieneTable.Rows[index]["fd_weight_value"].ToString(), font9);
        }
        PdfPCell FieldName = new PdfPCell(weightPhrase);
        FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
        FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
        FieldName.PaddingLeft = 5f;
        FieldName.Border = 0;
        FieldName.Colspan = 2;
        tblComponent.AddCell(FieldName);

        int measurement = Convert.ToInt32(dtPersonalHygieneTable.Rows[index]["fd_weight_measurement"].ToString());

        PdfPCell measureValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Measurement, font7B));
        measureValue.HorizontalAlignment = Element.ALIGN_LEFT;
        measureValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        measureValue.PaddingLeft = 5f;
        measureValue.Border = 0;
        measureValue.Colspan = 2;
        tblComponent.AddCell(measureValue);

        Phrase kiloPharse = new Phrase();
        Phrase poundPharse = new Phrase();
        switch (measurement)
        {
            case 1:
                kiloPharse = new Phrase("P", fontBoldTextOP);
                poundPharse = new Phrase();
                break;
            case 2:
                poundPharse = new Phrase("P", fontBoldTextOP);
                kiloPharse = new Phrase();
                break;
            default:
                poundPharse = new Phrase();
                kiloPharse = new Phrase();
                break;
        }
        PdfPCell kiloValue = new PdfPCell(new Phrase(kiloPharse));
        kiloValue.HorizontalAlignment = Element.ALIGN_LEFT;
        kiloValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        kiloValue.PaddingLeft = 5f;
        kiloValue.Border = 0;
        tblComponent.AddCell(kiloValue);

        PdfPCell kiloName = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.kilos, font9));
        kiloName.HorizontalAlignment = Element.ALIGN_LEFT;
        kiloName.VerticalAlignment = Element.ALIGN_MIDDLE;
        kiloName.PaddingLeft = 5f;
        kiloName.Border = 0;
        tblComponent.AddCell(kiloName);

        PdfPCell poundValue = new PdfPCell(new Phrase(poundPharse));
        poundValue.HorizontalAlignment = Element.ALIGN_LEFT;
        poundValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        poundValue.PaddingLeft = 5f;
        poundValue.Border = 0;
        tblComponent.AddCell(poundValue);

        PdfPCell poundName = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.pounds, font9));
        poundName.HorizontalAlignment = Element.ALIGN_LEFT;
        poundName.VerticalAlignment = Element.ALIGN_MIDDLE;
        poundName.PaddingLeft = 5f;
        poundName.Border = 0;
        tblComponent.AddCell(poundName);


        PdfPCell DateValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateComplete, font7B));
        DateValue.HorizontalAlignment = Element.ALIGN_LEFT;
        DateValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        DateValue.PaddingLeft = 5f;
        DateValue.Border = 0;
        DateValue.Colspan = 2;
        tblComponent.AddCell(DateValue);

        Phrase datePhrase = new Phrase();
        if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_weight_date"].ToString()))
        {
            datePhrase = new Phrase(dtPersonalHygieneTable.Rows[index]["fd_weight_date"].ToString(), font9);
        }
        PdfPCell DateName = new PdfPCell(datePhrase);
        DateName.HorizontalAlignment = Element.ALIGN_LEFT;
        DateName.VerticalAlignment = Element.ALIGN_MIDDLE;
        DateName.PaddingLeft = 5f;
        DateName.Border = 0;
        DateName.Colspan = 2;
        tblComponent.AddCell(DateName);
    }

    private static void CreateHeight(PdfPTable tblComponent, DataTable dtPersonalHygieneTable, Font fontBoldTextOP, int index)
    {
        PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Height, font9B));
        tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
        tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
        tblComponentRow1.Colspan = 2;
        tblComponentRow1.PaddingLeft = 5f;
        tblComponentRow1.PaddingBottom = 5f;
        tblComponentRow1.Border = 0;
        tblComponent.AddCell(tblComponentRow1);

        PdfPCell fieldValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value, font7B));
        fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
        fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        fieldValue.PaddingLeft = 5f;
        fieldValue.Border = 0;
        fieldValue.Colspan = 2;
        tblComponent.AddCell(fieldValue);

        Phrase heightPhrase = new Phrase();
        if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_height_value"].ToString()))
        {
            heightPhrase = new Phrase(dtPersonalHygieneTable.Rows[index]["fd_height_value"].ToString(), font9);
        }
        PdfPCell FieldName = new PdfPCell(heightPhrase);
        FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
        FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
        FieldName.PaddingLeft = 5f;
        FieldName.Border = 0;
        FieldName.Colspan = 2;
        tblComponent.AddCell(FieldName);

        int measurement = Convert.ToInt32(dtPersonalHygieneTable.Rows[index]["fd_height_measurement"].ToString());

        PdfPCell measureValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Measurement, font7B));
        measureValue.HorizontalAlignment = Element.ALIGN_LEFT;
        measureValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        measureValue.PaddingLeft = 5f;
        measureValue.Border = 0;
        measureValue.Colspan = 2;
        tblComponent.AddCell(measureValue);

        Phrase inch = new Phrase();
        Phrase cm = new Phrase();
        switch (measurement)
        {
            case 1:
                inch = new Phrase("P", fontBoldTextOP);
                cm = new Phrase();
                break;
            case 2:
                cm = new Phrase("P", fontBoldTextOP);
                inch = new Phrase();
                break;
            default:
                cm = new Phrase();
                inch = new Phrase();
                break;
        }
        PdfPCell kiloValue = new PdfPCell(new Phrase(inch));
        kiloValue.HorizontalAlignment = Element.ALIGN_LEFT;
        kiloValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        kiloValue.PaddingLeft = 5f;
        kiloValue.Border = 0;
        tblComponent.AddCell(kiloValue);

        PdfPCell kiloName = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.inch, font9));
        kiloName.HorizontalAlignment = Element.ALIGN_LEFT;
        kiloName.VerticalAlignment = Element.ALIGN_MIDDLE;
        kiloName.PaddingLeft = 5f;
        kiloName.Border = 0;
        tblComponent.AddCell(kiloName);

        PdfPCell poundValue = new PdfPCell(new Phrase(cm));
        poundValue.HorizontalAlignment = Element.ALIGN_LEFT;
        poundValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        poundValue.PaddingLeft = 5f;
        poundValue.Border = 0;
        tblComponent.AddCell(poundValue);

        PdfPCell poundName = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.cm, font9));
        poundName.HorizontalAlignment = Element.ALIGN_LEFT;
        poundName.VerticalAlignment = Element.ALIGN_MIDDLE;
        poundName.PaddingLeft = 5f;
        poundName.Border = 0;
        tblComponent.AddCell(poundName);


        PdfPCell DateValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateComplete, font7B));
        DateValue.HorizontalAlignment = Element.ALIGN_LEFT;
        DateValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        DateValue.PaddingLeft = 5f;
        DateValue.Border = 0;
        DateValue.Colspan = 2;
        tblComponent.AddCell(DateValue);
        Phrase datePhrase = new Phrase();
        if (!String.IsNullOrEmpty(dtPersonalHygieneTable.Rows[index]["fd_height_date"].ToString()))
        {
            datePhrase = new Phrase(dtPersonalHygieneTable.Rows[index]["fd_height_date"].ToString(), font9);
        }
        PdfPCell DateName = new PdfPCell(datePhrase);
        DateName.HorizontalAlignment = Element.ALIGN_LEFT;
        DateName.VerticalAlignment = Element.ALIGN_MIDDLE;
        DateName.PaddingLeft = 5f;
        DateName.Border = 0;
        DateName.Colspan = 2;
        tblComponent.AddCell(DateName);
    }

    private static void CreateOxygen(PdfPTable tblComponent, DataTable dtVisionTable, Font fontBoldTextOP, int index)
    {
        string[] AMCareCoulmn = { Resources.Qola.UIverbiage.NA, Resources.Qola.UIverbiage.SupplierName, Resources.Qola.UIverbiage.Rate,
                                    Resources.Qola.UIverbiage.Independent,Resources.Qola.UIverbiage.Supervised ,Resources.Qola.UIverbiage.Assisted,
                                    Resources.Qola.UIverbiage.Sats};
        string[] AMCareColumnValues = { "7ON", "fd_SN_O2_supplier", "fd_SN_O2_rate", "1OI", "2OS", "3OA", "8OO" };


        PdfPCell tblComponentRow1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.O2Oxygen, font9B));
        tblComponentRow1.HorizontalAlignment = Element.ALIGN_LEFT;
        tblComponentRow1.VerticalAlignment = Element.ALIGN_MIDDLE;
        tblComponentRow1.Colspan = 2;
        tblComponentRow1.PaddingLeft = 5f;
        tblComponentRow1.PaddingBottom = 5f;
        tblComponentRow1.Border = 0;
        tblComponent.AddCell(tblComponentRow1);

        for (int colIndex = 0; colIndex < AMCareCoulmn.Length; colIndex++)
        {
            if (AMCareCoulmn[colIndex] == Resources.Qola.UIverbiage.SupplierName)
            {
                PdfPCell fieldValue = new PdfPCell(new Phrase(AMCareCoulmn[colIndex], font8B));
                fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                fieldValue.PaddingLeft = 5f;
                fieldValue.Border = 0;
                fieldValue.Colspan = 2;
                tblComponent.AddCell(fieldValue);

                PdfPCell FieldName = new PdfPCell(new Phrase(dtVisionTable.Rows[index]["fd_SN_O2_supplier"].ToString(), font9));
                FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                FieldName.PaddingLeft = 5f;
                FieldName.Border = 0;
                FieldName.Colspan = 2;
                tblComponent.AddCell(FieldName);
            }
            else if (AMCareCoulmn[colIndex] == Resources.Qola.UIverbiage.Rate)
            {
                PdfPCell fieldValue = new PdfPCell(new Phrase(AMCareCoulmn[colIndex], font8B));
                fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                fieldValue.PaddingLeft = 5f;
                fieldValue.Border = 0;
                fieldValue.Colspan = 2;
                tblComponent.AddCell(fieldValue);

                Phrase ratePhrase = new Phrase();
                string rate = dtVisionTable.Rows[index]["fd_SN_O2_rate"].ToString();
                if (rate != "" && rate != "0")
                {
                    decimal rateValue = Convert.ToDecimal(rate);
                    rate = Math.Round(rateValue).ToString();
                    ratePhrase = new Phrase(rate, font9);
                }
                PdfPCell FieldName = new PdfPCell(new Phrase(ratePhrase));
                FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                FieldName.PaddingLeft = 5f;
                FieldName.Border = 0;
                FieldName.Colspan = 2;
                tblComponent.AddCell(FieldName);
            }
            else
            {
                Phrase pharse = new Phrase();

                if (getValue(dtVisionTable.Rows[index]["fd_special_needs"].ToString(), AMCareColumnValues[colIndex]))
                {
                    pharse = new Phrase("P", fontBoldTextOP);
                }
                PdfPCell fieldValue = new PdfPCell(pharse);
                fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                fieldValue.PaddingLeft = 5f;
                fieldValue.Border = 0;
                tblComponent.AddCell(fieldValue);

                PdfPCell FieldName = new PdfPCell(new Phrase(AMCareCoulmn[colIndex], font9));
                FieldName.HorizontalAlignment = Element.ALIGN_LEFT;
                FieldName.VerticalAlignment = Element.ALIGN_MIDDLE;
                FieldName.PaddingLeft = 5f;
                FieldName.Border = 0;
                tblComponent.AddCell(FieldName);
            }
        }
    }

    private static void CreateFallRiskLevel(PdfPTable tblMain, Collection<Common.FallRiskAssessment> FallReiskCollection, Font fontBoldTextOP)
    {
        int colCount = 4;
        PdfPCell tblMainRow1Component = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FallRiskAssessment, font10B));
        tblMainRow1Component.HorizontalAlignment = Element.ALIGN_LEFT;
        tblMainRow1Component.VerticalAlignment = Element.ALIGN_TOP;
        tblMainRow1Component.PaddingLeft = 5f;
        tblMainRow1Component.PaddingTop = 5f;
        tblMain.AddCell(tblMainRow1Component);

        for (int index = 0; index < colCount; index++)
        {
            PdfPTable tblComponent = new PdfPTable(2);
            tblComponent.WidthPercentage = 100f;
            float[] wthComponent = new float[] { 1f, 9f };
            tblComponent.SetWidths(wthComponent);
            tblComponent.SpacingBefore = 5f;
            tblComponent.SpacingAfter = 5f;

            PdfPCell level = new PdfPCell(new Phrase("Level", font9B));
            level.HorizontalAlignment = Element.ALIGN_LEFT;
            level.VerticalAlignment = Element.ALIGN_MIDDLE;
            level.Colspan = 2;
            level.PaddingLeft = 5f;
            level.PaddingBottom = 5f;
            level.Border = 0;

            if (FallReiskCollection.Count > 0)
            {
                if (FallReiskCollection[index].totalScore.ToString() != "0" || FallReiskCollection[index].riskLevel.ToString() != "0")
                {
                    tblComponent.AddCell(level);
                }
                if (FallReiskCollection[index].totalScore.ToString() != "0")
                {
                    PdfPCell totalScore = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TotalScore, font7B));
                    totalScore.HorizontalAlignment = Element.ALIGN_LEFT;
                    totalScore.VerticalAlignment = Element.ALIGN_MIDDLE;
                    totalScore.Colspan = 2;
                    totalScore.PaddingLeft = 5f;
                    totalScore.PaddingBottom = 5f;
                    totalScore.Border = 0;
                    tblComponent.AddCell(totalScore);

                    string score = FallReiskCollection[index].totalScore.ToString() != "0" ? FallReiskCollection[index].totalScore.ToString() : "";
                    PdfPCell fieldValue = new PdfPCell(new Phrase(score, font9));
                    fieldValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    fieldValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    fieldValue.PaddingLeft = 5f;
                    fieldValue.Border = 0;
                    fieldValue.Colspan = 2;
                    tblComponent.AddCell(fieldValue);
                }
                if (FallReiskCollection[index].riskLevel.ToString() != "0")
                {
                    PdfPCell riskLevel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RiskLevel, font7B));
                    riskLevel.HorizontalAlignment = Element.ALIGN_LEFT;
                    riskLevel.VerticalAlignment = Element.ALIGN_MIDDLE;
                    riskLevel.Colspan = 2;
                    riskLevel.PaddingLeft = 5f;
                    riskLevel.PaddingBottom = 5f;
                    riskLevel.Border = 0;
                    tblComponent.AddCell(riskLevel);

                    PdfPCell riskValue = new PdfPCell(new Phrase(FallReiskCollection[index].riskLevel.ToString(), font9));
                    riskValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    riskValue.VerticalAlignment = Element.ALIGN_MIDDLE;
                    riskValue.PaddingLeft = 5f;
                    riskValue.Border = 0;
                    riskValue.Colspan = 2;
                    tblComponent.AddCell(riskValue);
                }
            }
            tblMain.AddCell(tblComponent);
        }
    }
    #endregion "Vital Sign"

    public static bool getValue(string value, string code)
    {
        string[] strArray = null;
        int intCount, n;
        bool isValid = false;
        strArray = value.Split(',');
        if ((strArray.Length > 0))
        {
            if (strArray.Length == 1)
                n = strArray.Length;
            else
                n = strArray.Length - 1;
            for (intCount = 0; intCount < n; intCount++)
            {
                if (strArray[intCount].ToString() == code)
                {
                    isValid = true;
                    break;
                }
            }
        }
        return isValid;
    }

    private static void createTwospanColumn(string value, PdfPTable table, string columnName)
    {
        if (!String.IsNullOrEmpty(value) && value != "")
        {
            PdfPCell headerValue = new PdfPCell(new Phrase(columnName, font8B));
            headerValue.HorizontalAlignment = Element.ALIGN_LEFT;
            headerValue.VerticalAlignment = Element.ALIGN_MIDDLE;
            headerValue.PaddingLeft = 5f;
            headerValue.Border = 0;
            headerValue.Colspan = 2;
            table.AddCell(headerValue);

            PdfPCell header = new PdfPCell(new Phrase(value.ToString(), font9));
            header.HorizontalAlignment = Element.ALIGN_LEFT;
            header.VerticalAlignment = Element.ALIGN_MIDDLE;
            header.PaddingLeft = 5f;
            header.Border = 0;
            header.Colspan = 2;
            table.AddCell(header);

        }
    }

    private static void createTwoCellRow(Font font, PdfPTable table, string columnName)
    {
        PdfPCell headerValue = new PdfPCell(new Phrase("P", font));
        headerValue.HorizontalAlignment = Element.ALIGN_LEFT;
        headerValue.VerticalAlignment = Element.ALIGN_MIDDLE;
        headerValue.PaddingLeft = 5f;
        headerValue.Border = 0;
        table.AddCell(headerValue);

        PdfPCell header = new PdfPCell(new Phrase(columnName, font9));
        header.HorizontalAlignment = Element.ALIGN_LEFT;
        header.VerticalAlignment = Element.ALIGN_MIDDLE;
        header.PaddingLeft = 5f;
        header.Border = 0;
        table.AddCell(header);
    }
}
#endregion "ProgressiveReport"

#region "Resident Profile"
public class ResidentProfileReport : QolaMaster
{
    Common.Residents objResident;
    DataSet dsRCA;
    int _iResidentId;
    public ResidentProfileReport()
    {
        objResident = new Common.Residents();
        dsRCA = new DataSet();
    }
    public ResidentProfileReport(string sResidentStatus, int iResidentId)
    {
        char cStatus;
        _iResidentId = iResidentId;
        dsRCA = new DataSet();
        if (HttpContext.Current.Session["ResidentStatus"] != null && (char.TryParse(HttpContext.Current.Session["ResidentStatus"].ToString(), out cStatus) == true))
        {
            if (cStatus == 'A')
            {
                objResident = DAL.Residents.GetResidentById(Convert.ToInt32(iResidentId));
            }
            else if (cStatus == 'I')
            {
                objResident = DAL.Residents.GetInActiveResidentById(Convert.ToInt32(iResidentId));
            }
            else
            {
                objResident = DAL.Residents.GetResidentById(Convert.ToInt32(iResidentId));
            }
            dsRCA = DAL.PlanOfCare.GetPlanOfCareByResidentIdForRCA(iResidentId);
        }
    }

    public PdfPTable PrintResidentProfile()
    {
        PdfPTable profileTable = new PdfPTable(3);
        profileTable.WidthPercentage = 100f;
        float[] profileWidth = new float[] { 33.3f, 33.3f, 33.3f };
        profileTable.SetWidths(profileWidth);
        profileTable.DefaultCell.Border = 0;
        if (dsRCA.Tables.Count > 0 && dsRCA.Tables[0].Rows.Count > 0)
        {
            PdfPTable leftTable = new PdfPTable(1);
            leftTable.WidthPercentage = 100f;

            float[] leftWidth = new float[] { 100f };
            leftTable.SetWidths(leftWidth);
            leftTable.DefaultCell.Border = 1;
            PdfPTable midTable = new PdfPTable(1);
            midTable.WidthPercentage = 100f;

            float[] midWidth = new float[] { 100f };
            midTable.SetWidths(midWidth);
            midTable.DefaultCell.Border = 1;
            PdfPTable rightTable = new PdfPTable(2);
            rightTable.WidthPercentage = 100f;
            float[] rightWidth = new float[] { 10f, 80f };
            rightTable.SetWidths(rightWidth);
            rightTable.DefaultCell.Border = 1;
            string fontpath = HttpContext.Current.Server.MapPath(".");
            BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
            Font fontBoldTextOP = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);

            string LevelIndependent = string.Empty;
            string LevelPartialAssist = string.Empty;
            string LevelTotalCare = string.Empty;
            string LevelMemoryCare = string.Empty;
            string LevelOther = string.Empty;
            string LevelDepentent = string.Empty;

            string MedicalSecuredUnit = string.Empty;
            string MedicalWanderer = string.Empty;
            string MedicalUnsafeSmoker = string.Empty;
            string MedicalSubstanceAbuse = string.Empty;
            string MedicalSeizures = string.Empty;
            string MedicalDiabetic = string.Empty;
            string MedicalPacemaker = string.Empty;
            string MedicalChokingRisk = string.Empty;
            string MedicalOther = string.Empty;
            string smedicalComment = string.Empty;

            string sTransferIndependent = string.Empty;
            string sTransferPerson1 = string.Empty;
            string sTransferPerson2 = string.Empty;
            string sTransferMachanicalLift = string.Empty;
            string sTransferOther = string.Empty;

            string specialist1 = string.Empty;
            string specialist2 = string.Empty;
            string specialist3 = string.Empty;

            string sInfectionDeseases = string.Empty;


            char cStatus;
            string sGender = string.Empty, sMaritalStatus = string.Empty;
            try
            {
                if (HttpContext.Current.Session["ResidentStatus"] != null && (char.TryParse(HttpContext.Current.Session["ResidentStatus"].ToString(), out cStatus) == true))
                {

                    if (dsRCA.Tables.Count > 0 && dsRCA.Tables[0].Rows.Count > 0)
                    {
                        DataTable table = dsRCA.Tables[0];
                        for (int index = 0; index < table.Columns.Count; index++)
                        {

                            string columnName = table.Columns[index].ToString();
                            if (columnName == "fd_level_of_care")
                            {
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "3LI"))
                                {
                                    LevelIndependent = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "2LP"))
                                {
                                    LevelPartialAssist = "P";
                                }

                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), " 4LD"))
                                {
                                    LevelDepentent = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "1LT"))
                                {
                                    LevelTotalCare = "P";
                                }
                            }
                            else if (columnName == "fd_special_alerts")
                            {
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "1SSU"))
                                {
                                    MedicalSecuredUnit = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "2SW"))
                                {
                                    MedicalWanderer = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "3SUS"))
                                {
                                    MedicalUnsafeSmoker = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "4SA"))
                                {
                                    MedicalSubstanceAbuse = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "5SS"))
                                {
                                    MedicalSeizures = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "6SD"))
                                {
                                    MedicalDiabetic = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "7SP"))
                                {
                                    MedicalPacemaker = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "9SCR"))
                                {
                                    MedicalChokingRisk = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "11SO"))
                                {
                                    MedicalOther = "P";
                                }
                            }
                            else if (columnName == "fd_special_alert_comment")
                            {
                                smedicalComment = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                            else if (columnName == "fd_mobility")
                            {
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "13TI"))
                                {
                                    sTransferIndependent = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "16T1"))
                                {
                                    sTransferPerson1 = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "17T2"))
                                {
                                    sTransferPerson2 = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "21TE"))
                                {
                                    sTransferMachanicalLift = "P";
                                }
                            }
                            else if (columnName == "fd_transfers_comment")
                            {
                                sTransferOther = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                            else if (columnName == "fd_consults_specialist1")
                            {
                                specialist1 = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                            else if (columnName == "fd_consults_specialist2")
                            {
                                specialist2 = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                            else if (columnName == "fd_consults_specialist3")
                            {
                                specialist3 = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                            else if (columnName == "fd_others")
                            {
                                sInfectionDeseases = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                        }
                    }
                    if (objResident != null && objResident.ID > 0)
                    {

                        PdfPCell personalDetails = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PersonalDetails, ProgressiveReport.font9B));
                        personalDetails.HorizontalAlignment = Element.ALIGN_CENTER;
                        personalDetails.VerticalAlignment = Element.ALIGN_CENTER;
                        personalDetails.Colspan = 2;
                        personalDetails.Border = Rectangle.NO_BORDER;
                        personalDetails.BorderWidthLeft = .5f;
                        personalDetails.BorderWidthRight = .5f;
                        personalDetails.BorderWidthBottom = .5f;
                        personalDetails.BorderWidthTop = .5f;
                        leftTable.AddCell(personalDetails);


                        string moveinDate = dateToUSDateStringFormat(objResident.MoveInDate, "MM/dd/yyyy");
                        PdfPCell admissionDate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AdmissionDate + ": " + moveinDate, ProgressiveReport.font9));
                        admissionDate.Border = Rectangle.NO_BORDER;
                        admissionDate.BorderWidthLeft = .5f;
                        admissionDate.BorderWidthRight = .5f;
                        leftTable.AddCell(admissionDate);


                        string admitted = dateToUSDateStringFormat(objResident.MoveInDate, "MM/dd/yyyy");
                        if (admitted != "01/01/0001")
                        {
                            PdfPCell admissiondFrom = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Admissionfrom + ": " + admitted, ProgressiveReport.font9));
                            admissiondFrom.Border = Rectangle.NO_BORDER;
                            admissiondFrom.BorderWidthLeft = .5f;
                            admissiondFrom.BorderWidthRight = .5f;
                            leftTable.AddCell(admissiondFrom);
                        }


                        string dob = dateToUSDateStringFormat(objResident.BirthDate, "MM/dd/yyyy");
                        PdfPCell dobName = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateOfBirth + ": " + dob, ProgressiveReport.font9));
                        dobName.Border = Rectangle.NO_BORDER;
                        dobName.BorderWidthLeft = .5f;
                        dobName.BorderWidthRight = .5f;
                        leftTable.AddCell(dobName);

                        switch (objResident.MaritalStatus)
                        {
                            case 1:
                                sMaritalStatus = Resources.Qola.UIverbiage.Married;
                                break;
                            case 2:
                                sMaritalStatus = Resources.Qola.UIverbiage.Widowed;
                                break;
                            case 3:
                                sMaritalStatus = Resources.Qola.UIverbiage.Single;
                                break;
                            case 4:
                                sMaritalStatus = Resources.Qola.UIverbiage.Divorced;
                                break;
                            default:
                                sMaritalStatus = "";
                                break;
                        }
                        PdfPCell maritalStatus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MaritalStatus + ": " + sMaritalStatus, ProgressiveReport.font9));
                        maritalStatus.Border = Rectangle.NO_BORDER;
                        maritalStatus.BorderWidthLeft = .5f;
                        maritalStatus.BorderWidthRight = .5f;
                        leftTable.AddCell(maritalStatus);

                        if (objResident.Gendar == Convert.ToChar("M"))
                        {
                            sGender = Resources.Qola.UIverbiage.Male;
                        }
                        else
                        {
                            sGender = Resources.Qola.UIverbiage.Female;
                        }
                        PdfPCell marriedSex = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Gender + ": " + sGender, ProgressiveReport.font9));
                        marriedSex.Border = Rectangle.NO_BORDER;
                        marriedSex.BorderWidthLeft = .5f;
                        marriedSex.BorderWidthRight = .5f;
                        leftTable.AddCell(marriedSex);

                        PdfPCell healthCard = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.HC + "#: " + objResident.MBhealthNumber, ProgressiveReport.font9));
                        healthCard.Border = Rectangle.NO_BORDER;
                        healthCard.BorderWidthLeft = .5f;
                        healthCard.BorderWidthRight = .5f;
                        healthCard.BorderWidthBottom = .5f;
                        leftTable.AddCell(healthCard);

                        PdfPCell diagnosis = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Diagnosis, ProgressiveReport.font9B));
                        diagnosis.HorizontalAlignment = Element.ALIGN_CENTER;
                        diagnosis.VerticalAlignment = Element.ALIGN_CENTER;
                        diagnosis.Colspan = 2;
                        diagnosis.Border = Rectangle.NO_BORDER;
                        diagnosis.BorderWidthLeft = .5f;
                        diagnosis.BorderWidthRight = .5f;
                        diagnosis.BorderWidthBottom = .5f;
                        leftTable.AddCell(diagnosis);

                        PdfPCell diagnosisValue = new PdfPCell(new Phrase(objResident.HealthHistory, ProgressiveReport.font9));
                        diagnosisValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        diagnosisValue.Colspan = 2;
                        diagnosisValue.Rowspan = 12;
                        diagnosisValue.FixedHeight = 150f;
                        diagnosisValue.Border = Rectangle.NO_BORDER;
                        diagnosisValue.BorderWidthLeft = .5f;
                        diagnosisValue.BorderWidthRight = .5f;

                        leftTable.AddCell(diagnosisValue);

                        PdfPCell allergies = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Allergies, ProgressiveReport.font9B));
                        allergies.Colspan = 2;
                        allergies.HorizontalAlignment = Element.ALIGN_CENTER;
                        allergies.VerticalAlignment = Element.ALIGN_CENTER;
                        allergies.Border = Rectangle.BOX;
                        allergies.BorderWidthLeft = .5f;
                        allergies.BorderWidthRight = .5f;
                        leftTable.AddCell(allergies);


                        PdfPCell allergieValue = new PdfPCell(new Phrase(CreateAllergy(_iResidentId), ProgressiveReport.font9));
                        allergieValue.Colspan = 2;
                        allergieValue.Border = Rectangle.NO_BORDER;
                        allergieValue.Rowspan = 7;
                        allergieValue.FixedHeight = 90f;
                        allergieValue.BorderWidthLeft = .5f;
                        allergieValue.BorderWidthRight = .5f;
                        leftTable.AddCell(allergieValue);

                        PdfPCell physician = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Physician, ProgressiveReport.font9B));
                        physician.Border = Rectangle.BOX;
                        physician.Colspan = 2;
                        physician.BorderWidthLeft = .5f;
                        physician.BorderWidthRight = .5f;
                        physician.HorizontalAlignment = Element.ALIGN_CENTER;
                        physician.VerticalAlignment = Element.ALIGN_CENTER;
                        leftTable.AddCell(physician);

                        PdfPCell FamilyPhysician = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilyPhysician + ": " + objResident.Physician, ProgressiveReport.font9));
                        FamilyPhysician.Border = Rectangle.NO_BORDER;
                        FamilyPhysician.BorderWidthLeft = .5f;
                        FamilyPhysician.BorderWidthRight = .5f;
                        leftTable.AddCell(FamilyPhysician);

                        PdfPCell physicianTele = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.tel + " #: " + objResident.PhysicianPhone + "  " + Resources.Qola.UIverbiage.Fax + " #: " + objResident.PhysicianFaxNo, ProgressiveReport.font9));
                        physicianTele.Border = Rectangle.NO_BORDER;
                        physicianTele.BorderWidthLeft = .5f;
                        physicianTele.BorderWidthRight = .5f;
                        leftTable.AddCell(physicianTele);

                        PdfPCell physicianConsults = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Consults + "/" + Resources.Qola.UIverbiage.Specialist, ProgressiveReport.font8B));
                        physicianConsults.HorizontalAlignment = Element.ALIGN_CENTER;
                        physicianConsults.Border = Rectangle.NO_BORDER;
                        physicianConsults.BorderWidthLeft = .5f;
                        physicianConsults.BorderWidthRight = .5f;
                        physicianConsults.BorderWidthTop = .5f;
                        leftTable.AddCell(physicianConsults);

                        PdfPCell speciallist1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Specialist_1 + ": " + specialist1, ProgressiveReport.font9));
                        speciallist1.Border = Rectangle.NO_BORDER;
                        speciallist1.BorderWidthLeft = .5f;
                        speciallist1.BorderWidthRight = .5f;
                        leftTable.AddCell(speciallist1);

                        PdfPCell speciallist2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Specialist_2 + ": " + specialist2, ProgressiveReport.font9));
                        speciallist2.Border = Rectangle.NO_BORDER;
                        speciallist2.BorderWidthLeft = .5f;
                        speciallist2.BorderWidthRight = .5f;
                        leftTable.AddCell(speciallist2);

                        PdfPCell speciallist3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Specialist_3 + ": " + specialist3, ProgressiveReport.font9));
                        speciallist3.Border = Rectangle.NO_BORDER;
                        speciallist3.BorderWidthLeft = .5f;
                        speciallist3.BorderWidthRight = .5f;
                        speciallist3.BorderWidthBottom = .5f;
                        leftTable.AddCell(speciallist3);

                        PdfPCell pharmacy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pharmacy, ProgressiveReport.font9B));
                        pharmacy.Border = Rectangle.NO_BORDER;
                        pharmacy.BorderWidthLeft = .5f;
                        pharmacy.BorderWidthRight = .5f;
                        pharmacy.HorizontalAlignment = Element.ALIGN_CENTER;
                        pharmacy.VerticalAlignment = Element.ALIGN_CENTER;
                        pharmacy.Colspan = 2;
                        leftTable.AddCell(pharmacy);

                        string selfNurse = "";
                        string check = "";
                        if (objResident.PharmaceSelf != "")
                        {
                            selfNurse = objResident.PharmaceSelf;
                            check = "S";
                        }
                        else if (objResident.PharmaceNursing != "")
                        {
                            selfNurse = objResident.PharmaceNursing;
                            check = "N";
                        }
                        PdfPCell pharmacyName = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Name + ": " + selfNurse, ProgressiveReport.font9));
                        pharmacyName.Border = Rectangle.NO_BORDER;
                        pharmacyName.BorderWidthLeft = .5f;
                        pharmacyName.BorderWidthRight = .5f;
                        leftTable.AddCell(pharmacyName);


                        PdfPCell pharmacyFax = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Fax + " #: " + objResident.PharmaceFaxNumber, ProgressiveReport.font9));
                        pharmacyFax.Border = Rectangle.NO_BORDER;
                        pharmacyFax.BorderWidthLeft = .5f;
                        pharmacyFax.BorderWidthRight = .5f;
                        leftTable.AddCell(pharmacyFax);

                        PdfPCell pharmacyTel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.tel + " #: " + objResident.PharmacePhoneNo, ProgressiveReport.font9));
                        pharmacyTel.Border = Rectangle.NO_BORDER;
                        pharmacyTel.BorderWidthLeft = .5f;
                        pharmacyTel.BorderWidthRight = .5f;
                        leftTable.AddCell(pharmacyTel);

                        Phrase admin = new Phrase();
                        switch (check)
                        {
                            case "N":
                                Chunk nurse = new Chunk(Resources.Qola.UIverbiage.Nurse, ProgressiveReport.font8);
                                admin.Add(nurse);
                                break;
                            case "S":
                                Chunk self = new Chunk(Resources.Qola.UIverbiage.SelfAdmin, ProgressiveReport.font8);
                                admin.Add(self);
                                break;
                        }
                        PdfPCell pharmacyAdmin = new PdfPCell(admin);
                        pharmacyAdmin.Border = Rectangle.NO_BORDER;
                        pharmacyAdmin.BorderWidthLeft = .5f;
                        pharmacyAdmin.BorderWidthRight = .5f;
                        pharmacyAdmin.BorderWidthBottom = .5f;
                        leftTable.AddCell(pharmacyAdmin);


                        PdfPCell EmergencyContact = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EmergencyContacts, ProgressiveReport.font9B));
                        EmergencyContact.Border = Rectangle.BOX;
                        EmergencyContact.Colspan = 2;
                        EmergencyContact.HorizontalAlignment = Element.ALIGN_CENTER;
                        EmergencyContact.VerticalAlignment = Element.ALIGN_CENTER;
                        midTable.AddCell(EmergencyContact);


                        PdfPCell contactName1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Name1 + ": " + objResident.Contract1, ProgressiveReport.font8));
                        contactName1.Border = Rectangle.NO_BORDER;
                        contactName1.BorderWidthLeft = .5f;
                        contactName1.BorderWidthRight = .5f;
                        midTable.AddCell(contactName1);

                        string poaCare = objResident.POACare != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell POAcare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POACareYesOrNO + ": " + poaCare, ProgressiveReport.font8));
                        POAcare.Border = Rectangle.NO_BORDER;
                        POAcare.BorderWidthLeft = .5f;
                        POAcare.BorderWidthRight = .5f;
                        midTable.AddCell(POAcare);


                        string poaFinance = objResident.POAFinance != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell POAFinance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POAfinanceYesOrNo + ": " + poaFinance, ProgressiveReport.font8));
                        POAFinance.Border = Rectangle.NO_BORDER;
                        POAFinance.BorderWidthLeft = .5f;
                        POAFinance.BorderWidthRight = .5f;
                        midTable.AddCell(POAFinance);

                        PdfPCell contactRealation1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Relationship + ": " + objResident.Relationship1, ProgressiveReport.font8));
                        contactRealation1.Border = Rectangle.NO_BORDER;
                        contactRealation1.BorderWidthLeft = .5f;
                        contactRealation1.BorderWidthRight = .5f;

                        midTable.AddCell(contactRealation1);


                        PdfPCell Realation1Value = new PdfPCell(new Phrase("", ProgressiveReport.font9));

                        Realation1Value.Border = Rectangle.NO_BORDER;
                        Realation1Value.BorderWidthLeft = .5f;
                        Realation1Value.BorderWidthRight = .5f;
                        Realation1Value.FixedHeight = 15f;
                        Realation1Value.BorderWidthBottom = .5f;
                        midTable.AddCell(Realation1Value);


                        PdfPCell telephone = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TelephoneNumber, ProgressiveReport.font9));
                        telephone.Border = Rectangle.NO_BORDER;
                        telephone.HorizontalAlignment = Element.ALIGN_CENTER;
                        telephone.VerticalAlignment = Element.ALIGN_CENTER;
                        telephone.BorderWidthLeft = .5f;
                        telephone.BorderWidthRight = .5f;
                        telephone.BorderWidthBottom = .5f;

                        midTable.AddCell(telephone);

                        PdfPCell telephoneH = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.H + ": " + objResident.HomePhone1, ProgressiveReport.font8));
                        telephoneH.Border = Rectangle.NO_BORDER;
                        telephoneH.BorderWidthLeft = .5f;
                        telephoneH.BorderWidthRight = .5f;
                        midTable.AddCell(telephoneH);

                        PdfPCell telephoneW = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.W + ": " + objResident.BusinessPhone1, ProgressiveReport.font8));
                        telephoneW.Border = Rectangle.NO_BORDER;
                        telephoneW.BorderWidthLeft = .5f;
                        telephoneW.BorderWidthRight = .5f;
                        midTable.AddCell(telephoneW);

                        PdfPCell telephoneC = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.C + ": " + objResident.CellPhone1, ProgressiveReport.font8));
                        telephoneC.Border = Rectangle.NO_BORDER;
                        telephoneC.BorderWidthLeft = .5f;
                        telephoneC.BorderWidthRight = .5f;
                        midTable.AddCell(telephoneC);

                        PdfPCell Address = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Address, ProgressiveReport.font9));
                        Address.Border = Rectangle.NO_BORDER;
                        Address.HorizontalAlignment = Element.ALIGN_CENTER;
                        Address.VerticalAlignment = Element.ALIGN_CENTER;
                        Address.BorderWidthTop = .5f;
                        Address.BorderWidthLeft = .5f;
                        Address.BorderWidthRight = .5f;
                        midTable.AddCell(Address);

                        PdfPCell AddressValue = new PdfPCell(new Phrase(objResident.Address1, ProgressiveReport.font8));
                        AddressValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        AddressValue.VerticalAlignment = Element.ALIGN_LEFT;
                        AddressValue.BorderWidthLeft = .5f;
                        AddressValue.BorderWidthRight = .5f;
                        AddressValue.Rowspan = 3;
                        AddressValue.FixedHeight = 30f;
                        midTable.AddCell(AddressValue);


                        PdfPCell Email = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Email + ": " + objResident.Email1, ProgressiveReport.font8));
                        Email.Border = Rectangle.NO_BORDER;
                        Email.BorderWidthLeft = .5f;
                        Email.BorderWidthRight = .5f;
                        Email.BorderWidthBottom = .5f;
                        midTable.AddCell(Email);

                        PdfPCell contactName2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Two + Resources.Qola.UIverbiage.Name + ": " + objResident.Contract2, ProgressiveReport.font8));
                        contactName2.Border = Rectangle.NO_BORDER;
                        contactName2.BorderWidthLeft = .5f;
                        contactName2.BorderWidthRight = .5f;
                        midTable.AddCell(contactName2);

                        string POAcare2 = objResident.POACare != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell POAcarem2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POACareYesOrNO + ": " + POAcare2, ProgressiveReport.font8));
                        POAcarem2.Border = Rectangle.NO_BORDER;
                        POAcarem2.BorderWidthLeft = .5f;
                        POAcarem2.BorderWidthRight = .5f;
                        midTable.AddCell(POAcarem2);

                        string poaFinance2 = objResident.POACare != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell POAFinance2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POAfinanceYesOrNo + ": " + poaFinance2, ProgressiveReport.font8));
                        POAFinance2.Border = Rectangle.NO_BORDER;
                        POAFinance2.BorderWidthLeft = .5f;
                        POAFinance2.BorderWidthRight = .5f;
                        midTable.AddCell(POAFinance2);

                        PdfPCell contactRealation2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Relationship + ": " + objResident.Relationship2, ProgressiveReport.font8));
                        contactRealation2.Border = Rectangle.NO_BORDER;
                        contactRealation2.BorderWidthLeft = .5f;
                        contactRealation2.BorderWidthRight = .5f;
                        midTable.AddCell(contactRealation2);

                        PdfPCell contactRealation2Value = new PdfPCell(new Phrase("", ProgressiveReport.font8));
                        contactRealation2Value.Border = Rectangle.NO_BORDER;
                        contactRealation2Value.BorderWidthLeft = .5f;
                        contactRealation2Value.BorderWidthRight = .5f;
                        contactRealation2Value.BorderWidthBottom = .5f;
                        contactRealation2Value.FixedHeight = 15f;
                        midTable.AddCell(contactRealation2Value);

                        PdfPCell contactTelePhone2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TelephoneNumber + ":", ProgressiveReport.font9));
                        contactTelePhone2.Border = Rectangle.NO_BORDER;
                        contactTelePhone2.HorizontalAlignment = Element.ALIGN_CENTER;
                        contactTelePhone2.VerticalAlignment = Element.ALIGN_CENTER;
                        contactTelePhone2.BorderWidthLeft = .5f;
                        contactTelePhone2.BorderWidthRight = .5f;
                        contactTelePhone2.BorderWidthBottom = .5f;
                        midTable.AddCell(contactTelePhone2);

                        PdfPCell telephone2H = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.H + ": " + objResident.HomePhone2, ProgressiveReport.font8));
                        telephone2H.Border = Rectangle.NO_BORDER;
                        telephone2H.BorderWidthLeft = .5f;
                        telephone2H.BorderWidthRight = .5f;
                        midTable.AddCell(telephone2H);

                        PdfPCell telephone2W = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.W + ": " + objResident.BusinessPhone2, ProgressiveReport.font8));
                        telephone2W.Border = Rectangle.NO_BORDER;
                        telephone2W.BorderWidthLeft = .5f;
                        telephone2W.BorderWidthRight = .5f;
                        midTable.AddCell(telephone2W);


                        PdfPCell telephone2C = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.C + ": " + objResident.CellPhone2, ProgressiveReport.font8));
                        telephone2C.Border = Rectangle.NO_BORDER;
                        telephone2C.BorderWidthLeft = .5f;
                        telephone2C.BorderWidthRight = .5f;
                        midTable.AddCell(telephone2C);

                        PdfPCell Address2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Address, ProgressiveReport.font9));
                        Address2.Border = Rectangle.NO_BORDER;
                        Address2.HorizontalAlignment = Element.ALIGN_CENTER;
                        Address2.VerticalAlignment = Element.ALIGN_CENTER;
                        Address2.BorderWidthTop = .5f;
                        Address2.BorderWidthLeft = .5f;
                        Address2.BorderWidthRight = .5f;

                        midTable.AddCell(Address2);

                        PdfPCell Address2Value = new PdfPCell(new Phrase(objResident.Address2, ProgressiveReport.font8));
                        Address2Value.Border = Rectangle.BOX;
                        Address2Value.HorizontalAlignment = Element.ALIGN_LEFT;
                        Address2Value.HorizontalAlignment = Element.ALIGN_LEFT;
                        Address2Value.VerticalAlignment = Element.ALIGN_LEFT;
                        Address2Value.BorderWidthLeft = .5f;
                        Address2Value.BorderWidthRight = .5f;
                        Address2Value.Rowspan = 3;
                        Address2Value.FixedHeight = 30f;
                        midTable.AddCell(Address2Value);

                        PdfPCell Email2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Email + ": " + objResident.Email2, ProgressiveReport.font8));
                        Email2.Border = Rectangle.NO_BORDER;
                        Email2.BorderWidthLeft = .5f;
                        Email2.BorderWidthRight = .5f;
                        Email2.BorderWidthBottom = .5f;
                        midTable.AddCell(Email2);

                        PdfPCell Name3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Three + Resources.Qola.UIverbiage.Name + ": " + objResident.Contract3, ProgressiveReport.font8));
                        Name3.Border = Rectangle.NO_BORDER;
                        Name3.BorderWidthLeft = .5f;
                        Name3.BorderWidthRight = .5f;
                        midTable.AddCell(Name3);

                        string poa3careValue = objResident.POACare != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell poa3care = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POACareYesOrNO + ": " + poa3careValue, ProgressiveReport.font8));
                        poa3care.Border = Rectangle.NO_BORDER;
                        poa3care.BorderWidthLeft = .5f;
                        poa3care.BorderWidthRight = .5f;
                        midTable.AddCell(poa3care);

                        string sPoa3Finance = objResident.POACare != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell poa3Finance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POAfinanceYesOrNo + ": " + sPoa3Finance, ProgressiveReport.font8));
                        poa3Finance.Border = Rectangle.NO_BORDER;
                        poa3Finance.BorderWidthLeft = .5f;
                        poa3Finance.BorderWidthRight = .5f;
                        midTable.AddCell(poa3Finance);


                        PdfPCell relation3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Relationship + ": " + objResident.Relationship3, ProgressiveReport.font8));
                        relation3.Border = Rectangle.NO_BORDER;
                        relation3.BorderWidthLeft = .5f;
                        relation3.BorderWidthRight = .5f;
                        relation3.FixedHeight = 15f;
                        midTable.AddCell(relation3);
                        PdfPCell relationValue = new PdfPCell(new Phrase("", ProgressiveReport.font8));
                        relationValue.Border = Rectangle.NO_BORDER;
                        relationValue.BorderWidthLeft = .5f;
                        relationValue.BorderWidthRight = .5f;
                        relationValue.FixedHeight = 15f;
                        relationValue.BorderWidthBottom = .5f;
                        midTable.AddCell(relationValue);

                        PdfPCell Contact3telephone = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TelephoneNumber, ProgressiveReport.font8B));
                        Contact3telephone.Border = Rectangle.NO_BORDER;
                        Contact3telephone.HorizontalAlignment = Element.ALIGN_CENTER;
                        Contact3telephone.VerticalAlignment = Element.ALIGN_CENTER;
                        Contact3telephone.BorderWidthLeft = .5f;
                        Contact3telephone.BorderWidthRight = .5f;
                        Contact3telephone.BorderWidthBottom = .5f;
                        midTable.AddCell(Contact3telephone);

                        PdfPCell contact3H = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.H + ": " + objResident.HomePhone3, ProgressiveReport.font8));
                        contact3H.Border = Rectangle.NO_BORDER;
                        contact3H.BorderWidthLeft = .5f;
                        contact3H.BorderWidthRight = .5f;
                        midTable.AddCell(contact3H);

                        PdfPCell contact3W = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.W + ": " + objResident.BusinessPhone3, ProgressiveReport.font8));
                        contact3W.Border = Rectangle.NO_BORDER;
                        contact3W.BorderWidthLeft = .5f;
                        contact3W.BorderWidthRight = .5f;
                        midTable.AddCell(contact3W);


                        PdfPCell contact3C = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.C + ": " + objResident.CellPhone3, ProgressiveReport.font8));
                        contact3C.Border = Rectangle.NO_BORDER;
                        contact3C.BorderWidthLeft = .5f;
                        contact3C.BorderWidthRight = .5f;
                        midTable.AddCell(contact3C);

                        PdfPCell contact3Address = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Address, ProgressiveReport.font9B));
                        contact3Address.Border = Rectangle.NO_BORDER;
                        contact3Address.BorderWidthTop = .5f;
                        contact3Address.BorderWidthLeft = .5f;
                        contact3Address.BorderWidthRight = .5f;
                        contact3Address.HorizontalAlignment = Element.ALIGN_CENTER;
                        contact3Address.VerticalAlignment = Element.ALIGN_CENTER;
                        midTable.AddCell(contact3Address);

                        PdfPCell contact3AddressValue = new PdfPCell(new Phrase(objResident.Address3, ProgressiveReport.font8));
                        telephoneC.Border = Rectangle.BOX;
                        contact3AddressValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        contact3AddressValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        contact3AddressValue.VerticalAlignment = Element.ALIGN_LEFT;
                        contact3AddressValue.BorderWidthLeft = .5f;
                        contact3AddressValue.BorderWidthRight = .5f;
                        contact3AddressValue.BorderWidthBottom = .5f;
                        contact3AddressValue.Rowspan = 3;
                        contact3AddressValue.FixedHeight = 30f;
                        midTable.AddCell(contact3AddressValue);

                        PdfPCell contact3Email = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Email + " #:" + objResident.Email3, ProgressiveReport.font8));
                        contact3Email.Border = Rectangle.NO_BORDER;
                        contact3Email.BorderWidthLeft = .5f;
                        contact3Email.BorderWidthRight = .5f;
                        contact3Email.BorderWidthBottom = .5f;
                        midTable.AddCell(contact3Email);

                        PdfPCell LevelOfCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CareNeeds, ProgressiveReport.font9B));
                        LevelOfCare.Border = Rectangle.BOX;
                        LevelOfCare.Colspan = 2;
                        LevelOfCare.HorizontalAlignment = Element.ALIGN_CENTER;
                        LevelOfCare.VerticalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(LevelOfCare);
                        PdfPCell cellLevelIndependentValue = new PdfPCell(new Phrase(LevelIndependent, fontBoldTextOP));
                        rightTable.AddCell(cellLevelIndependentValue);

                        PdfPCell cellLevelIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, ProgressiveReport.font8));
                        rightTable.AddCell(cellLevelIndependent);

                        PdfPCell cellPartialAssisttValue = new PdfPCell(new Phrase(LevelPartialAssist, fontBoldTextOP));
                        rightTable.AddCell(cellPartialAssisttValue);

                        PdfPCell cellLevelPartialAssist = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PartialAssist, ProgressiveReport.font8));
                        rightTable.AddCell(cellLevelPartialAssist);


                        PdfPCell cellDependentAssisttValue = new PdfPCell(new Phrase(LevelDepentent, fontBoldTextOP));
                        rightTable.AddCell(cellDependentAssisttValue);

                        PdfPCell cellLevelDependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, ProgressiveReport.font8));
                        rightTable.AddCell(cellLevelDependent);

                        PdfPCell cellLevelPalliative1 = new PdfPCell(new Phrase("", ProgressiveReport.font8));
                        rightTable.AddCell(cellLevelPalliative1);

                        PdfPCell cellLevelPalliative = new PdfPCell(new Phrase("Palliative", ProgressiveReport.font8));
                        rightTable.AddCell(cellLevelPalliative);


                        PdfPCell cellOtherValue = new PdfPCell(new Phrase("", ProgressiveReport.font8));
                        cellOtherValue.Colspan = 2;
                        cellOtherValue.FixedHeight = 10f;
                        rightTable.AddCell(cellOtherValue);

                        PdfPCell religion = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Religion, ProgressiveReport.font9B));
                        religion.Colspan = 2;
                        religion.HorizontalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(religion);
                        PdfPCell religionValue = new PdfPCell(new Phrase("", ProgressiveReport.font9GreyB));
                        religionValue.Colspan = 2;
                        religionValue.FixedHeight = 12f;
                        religionValue.HorizontalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(religionValue);

                        PdfPCell religionValue1 = new PdfPCell(new Phrase("", ProgressiveReport.font9GreyB));
                        religionValue1.Colspan = 2;
                        religionValue1.FixedHeight = 12f;
                        religionValue1.HorizontalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(religionValue1);
                        PdfPCell CodeStatus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CodeStatus, ProgressiveReport.font9B));
                        CodeStatus.Border = Rectangle.BOX;
                        CodeStatus.Colspan = 2;
                        CodeStatus.HorizontalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(CodeStatus);

                        string dnRstatus = "";
                        if (objResident.DNRStatus == 'Y')
                        {
                            dnRstatus = "Yes";
                        }
                        else if (objResident.DNRStatus == 'N')
                        {
                            dnRstatus = "No";
                        }
                        PdfPCell Dnr = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DNR + ": " + dnRstatus, ProgressiveReport.font8));
                        Dnr.Border = Rectangle.NO_BORDER;
                        Dnr.BorderWidthLeft = .5f;
                        Dnr.BorderWidthRight = .5f;
                        Dnr.Colspan = 2;
                        rightTable.AddCell(Dnr);

                        string fullstatus = "";
                        if (objResident.FullCodeStatus == 'Y')
                        {
                            fullstatus = "Yes";
                        }
                        else if (objResident.FullCodeStatus == 'N')
                        {
                            fullstatus = "No";
                        }
                        PdfPCell FullCode = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FullCode + ": " + fullstatus, ProgressiveReport.font8));
                        FullCode.Border = Rectangle.NO_BORDER;
                        FullCode.BorderWidthLeft = .5f;
                        FullCode.BorderWidthRight = .5f;
                        FullCode.Colspan = 2;
                        rightTable.AddCell(FullCode);

                        PdfPCell MedicalAlert = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MedicalAlerts, ProgressiveReport.font9B));
                        MedicalAlert.Colspan = 2;
                        MedicalAlert.Border = Rectangle.BOX;
                        MedicalAlert.HorizontalAlignment = Element.ALIGN_CENTER;


                        PdfPCell SecuredUnitValue = new PdfPCell(new Phrase(MedicalSecuredUnit, fontBoldTextOP));
                        rightTable.AddCell(SecuredUnitValue);
                        PdfPCell SecuredUnit = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SecuredUnit, ProgressiveReport.font8));
                        rightTable.AddCell(SecuredUnit);


                        PdfPCell WandererValue = new PdfPCell(new Phrase(MedicalWanderer, fontBoldTextOP));
                        rightTable.AddCell(WandererValue);

                        PdfPCell Wanderer = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wanderer, ProgressiveReport.font8));
                        rightTable.AddCell(Wanderer);

                        PdfPCell UnsafeValue = new PdfPCell(new Phrase(MedicalUnsafeSmoker, fontBoldTextOP));
                        rightTable.AddCell(UnsafeValue);

                        PdfPCell Unsafe = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.UnsafeSmoker, ProgressiveReport.font8));
                        rightTable.AddCell(Unsafe);

                        PdfPCell SubstanceValue = new PdfPCell(new Phrase(MedicalSubstanceAbuse, fontBoldTextOP));
                        rightTable.AddCell(SubstanceValue);

                        PdfPCell Substance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SubstanceAbuse, ProgressiveReport.font8));
                        rightTable.AddCell(Substance);

                        PdfPCell SeizuresValue = new PdfPCell(new Phrase(MedicalSeizures, fontBoldTextOP));
                        rightTable.AddCell(SeizuresValue);

                        PdfPCell Seizures = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Seizures, ProgressiveReport.font8));
                        rightTable.AddCell(Seizures);

                        PdfPCell DiabeticValue = new PdfPCell(new Phrase(MedicalDiabetic, fontBoldTextOP));
                        rightTable.AddCell(DiabeticValue);
                        PdfPCell Diabetic = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Diabetic, ProgressiveReport.font8));
                        rightTable.AddCell(Diabetic);

                        PdfPCell PacemakerValue = new PdfPCell(new Phrase(MedicalPacemaker, fontBoldTextOP));
                        rightTable.AddCell(PacemakerValue);
                        PdfPCell Pacemaker = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pacemaker, ProgressiveReport.font8));
                        rightTable.AddCell(Pacemaker);
                        PdfPCell ChokingValue = new PdfPCell(new Phrase(MedicalChokingRisk, fontBoldTextOP));
                        rightTable.AddCell(ChokingValue);
                        PdfPCell Choking = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Chokingrisk, ProgressiveReport.font8));
                        rightTable.AddCell(Choking);
                        PdfPCell OthersMedical = new PdfPCell(new Phrase(MedicalOther, fontBoldTextOP));
                        rightTable.AddCell(OthersMedical);

                        PdfPCell Others = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, ProgressiveReport.font8));
                        rightTable.AddCell(Others);

                        PdfPCell CommentMedical = new PdfPCell(new Phrase(smedicalComment, ProgressiveReport.font9));
                        CommentMedical.Colspan = 2;
                        CommentMedical.Rowspan = 2;
                        CommentMedical.FixedHeight = 20f;
                        rightTable.AddCell(CommentMedical);

                        PdfPCell transfercell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Transfers, ProgressiveReport.font9B));
                        transfercell.Colspan = 2;
                        transfercell.Rowspan = 2;
                        transfercell.HorizontalAlignment = Element.ALIGN_CENTER;
                        transfercell.VerticalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(transfercell);

                        PdfPCell transferIndependentValue = new PdfPCell(new Phrase(sTransferIndependent, fontBoldTextOP));
                        rightTable.AddCell(transferIndependentValue);

                        PdfPCell transferIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, ProgressiveReport.font8));
                        rightTable.AddCell(transferIndependent);

                        PdfPCell transferPerson1Value = new PdfPCell(new Phrase(sTransferPerson1, fontBoldTextOP));
                        rightTable.AddCell(transferPerson1Value);

                        PdfPCell transferPerson1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.One + Resources.Qola.UIverbiage.Person, ProgressiveReport.font8));
                        rightTable.AddCell(transferPerson1);
                        PdfPCell transferPerson2Value = new PdfPCell(new Phrase(sTransferPerson2, fontBoldTextOP));
                        rightTable.AddCell(transferPerson2Value);
                        PdfPCell transferPerson2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Two1 + Resources.Qola.UIverbiage.Person, ProgressiveReport.font8));
                        rightTable.AddCell(transferPerson2);
                        PdfPCell transferMechValue = new PdfPCell(new Phrase(sTransferMachanicalLift, fontBoldTextOP));
                        rightTable.AddCell(transferMechValue);
                        PdfPCell transferMech = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MechanicalLift, ProgressiveReport.font8));
                        rightTable.AddCell(transferMech);
                        PdfPCell otherTransfer = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, ProgressiveReport.font8));
                        otherTransfer.Colspan = 2;
                        rightTable.AddCell(otherTransfer);
                        PdfPCell otherTransferValue = new PdfPCell(new Phrase(sTransferOther, ProgressiveReport.font8));
                        otherTransferValue.Colspan = 2;
                        otherTransferValue.FixedHeight = 60f;
                        rightTable.AddCell(otherTransferValue);
                        PdfPCell infectionDeseases = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InfectionDeseases, ProgressiveReport.font9B));
                        infectionDeseases.HorizontalAlignment = Element.ALIGN_CENTER;
                        infectionDeseases.VerticalAlignment = Element.ALIGN_CENTER;
                        infectionDeseases.Colspan = 2;
                        rightTable.AddCell(infectionDeseases);

                        PdfPCell infectionValue = new PdfPCell(new Phrase(sInfectionDeseases, ProgressiveReport.font8));
                        infectionValue.Colspan = 2;
                        infectionValue.Rowspan = 7;
                        infectionValue.MinimumHeight = 80f;
                        rightTable.AddCell(infectionValue);

                        profileTable.AddCell(leftTable);
                        profileTable.AddCell(midTable);
                        profileTable.AddCell(rightTable);
                    }
                }
            }
            catch (Exception ex)
            {
                Log.Write("Resident Profile Print - CreatePersonalDetails | " + ex.Message.ToString());
            }
        }
        return profileTable;
    }
    private static string CreateAllergy(int iResidentId)
    {
        string exception = string.Empty;
        DataSet dsAllerDietReceive;
        string sAllergys = string.Empty;
        try
        {
            dsAllerDietReceive = DAL.Prescription.GetAllergyAndDietByResident(iResidentId);
            if (!(dsAllerDietReceive == null))
            {
                if (dsAllerDietReceive.Tables[0].Rows.Count > 0)
                {
                    sAllergys += dsAllerDietReceive.Tables[0].Rows[0]["fd_medical_allergy"].ToString();
                    sAllergys += dsAllerDietReceive.Tables[0].Rows[0]["fd_diet_allergy"].ToString();
                }
            }

        }
        catch (Exception Exception)
        {
            exception = "btnProgressiveReport_Click CreateAllergy |" + Exception.Message.ToString();
            Log.Write(exception);
        }
        return sAllergys;
    }
    public MultiColumnText PrintResidentCareAssessment(Document doc)
    {
        return PrintResidentCareAssessment(dsRCA, doc);
    }
    public MultiColumnText PrintResidentCareAssessment(DataSet dsAssessmentDetails, Document doc)
    {
        Font tableFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.NORMAL, BaseColor.BLACK);
        Font fontHDBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
        Font fontBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
        Font fontLargeBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);

        iTextSharp.text.Font fontFooter = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.ITALIC, BaseColor.DARK_GRAY);
        iTextSharp.text.Font fontGeneralText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
        iTextSharp.text.Font fontBoldHeadText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
        iTextSharp.text.Font fontCellHeader = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
        string fontpath = HttpContext.Current.Server.MapPath(".");
        BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
        Font fontBoldTextOP = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);
        float[] wthAssessed = new float[] { 1f, 8f };

        MultiColumnText multiColumn = null;


        if (dsAssessmentDetails.Tables[0].Rows.Count > 0 && Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_id"].ToString()) > 0)
        {
            multiColumn = new MultiColumnText();
            multiColumn.AddSimpleColumn(20f, doc.PageSize.Width - 395f);
            multiColumn.AddSimpleColumn(215f, doc.PageSize.Width - 210f);
            multiColumn.AddSimpleColumn(400f, doc.PageSize.Width - 15f);

            PdfPCell spaceCell1 = new PdfPCell(new Phrase(""));
            spaceCell1.Colspan = 2;
            spaceCell1.FixedHeight = 8;
            spaceCell1.Border = 0;

            PdfPCell BlaContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Continent, tableFont));
            PdfPCell BlaOCCInContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OCCInContinent, tableFont));
            PdfPCell BlaInContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InContinent, tableFont));
            PdfPCell Independent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
            PdfPCell Supervised = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervised, tableFont));
            PdfPCell HomeAMCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Home, tableFont));
            PdfPCell AgencyAMCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
            PdfPCell Assisted = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assisted, tableFont));

            PdfPCell OSats = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sats, tableFont));
            PdfPCell ForeWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ForeWheel, tableFont));
            PdfPCell NA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
            PdfPCell TwoWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TwoWheel, tableFont));
            PdfPCell NoWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NoWheel, tableFont));
            PdfPCell Yes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
            PdfPCell No = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
            PdfPCell NutIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
            PdfPCell Elimination = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Elimination, fontHDBoldText));

            Elimination.Colspan = 2;
            Elimination.BackgroundColor = BaseColor.LIGHT_GRAY;
            PdfPCell txtBlaComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
            txtBlaComments.Colspan = 2;
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString()))
            {
                PdfPTable tblAssessed = new PdfPTable(2);
                tblAssessed.WidthPercentage = 100f;
                tblAssessed.SetWidths(wthAssessed);

                PdfPCell Assessed = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assessed, fontHDBoldText));
                Assessed.HorizontalAlignment = Element.ALIGN_LEFT;
                Assessed.Colspan = 2;
                Assessed.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblAssessed.AddCell(Assessed);

                PdfPCell Whenassessed = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Whenassessed, fontBoldText));
                Whenassessed.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Whenassessed.HorizontalAlignment = Element.ALIGN_CENTER;
                Whenassessed.Colspan = 2;
                tblAssessed.AddCell(Whenassessed);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "1AP") != "")
                {
                    PdfPCell CMoveInOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "1AP"), fontBoldTextOP));
                    tblAssessed.AddCell(CMoveInOP);
                    PdfPCell CMoveIn = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreMoveIn, tableFont));
                    tblAssessed.AddCell(CMoveIn);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "2AU") != "")
                {
                    PdfPCell CUpdateOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "2AU"), fontBoldTextOP));
                    tblAssessed.AddCell(CUpdateOP);
                    PdfPCell CUpdate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Update, tableFont));
                    tblAssessed.AddCell(CUpdate);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "3AR") != "")
                {
                    PdfPCell CRFHospitalOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "3AR"), fontBoldTextOP));
                    tblAssessed.AddCell(CRFHospitalOP);
                    PdfPCell CRFHospital = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ReturnFromHospital, tableFont));

                    tblAssessed.AddCell(CRFHospital);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "4AM") != "")
                {
                    PdfPCell CRFMoveInOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "4AM"), fontBoldTextOP));
                    tblAssessed.AddCell(CRFMoveInOP);
                    PdfPCell CRFMoveIn = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MoveIn, tableFont));

                    tblAssessed.AddCell(CRFMoveIn);
                }
                tblAssessed.AddCell(spaceCell1);
                multiColumn.AddElement(tblAssessed);
            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_value"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_date"].ToString())
                )
            {

                PdfPTable tblBP = new PdfPTable(2);
                tblBP.WidthPercentage = 100f;
                tblBP.SetWidths(wthAssessed);


                PdfPCell ModifyBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.VitalSign, fontHDBoldText));
                ModifyBP.HorizontalAlignment = Element.ALIGN_LEFT;
                ModifyBP.Colspan = 2;
                ModifyBP.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblBP.AddCell(ModifyBP);

                PdfPCell ModifyBP1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BP, fontBoldText));
                ModifyBP1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                ModifyBP1.HorizontalAlignment = Element.ALIGN_CENTER;
                ModifyBP1.Colspan = 2;
                tblBP.AddCell(ModifyBP1);
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_value"].ToString()))
                {
                    PdfPCell ValueBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_value"].ToString(), tableFont));
                    ValueBP.Colspan = 2;
                    tblBP.AddCell(ValueBP);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_date"].ToString()))
                {
                    PdfPCell ValueBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_date"].ToString(), tableFont));
                    ValueBP.Colspan = 2;
                    tblBP.AddCell(ValueBP);

                }
                tblBP.AddCell(spaceCell1);
                multiColumn.AddElement(tblBP);

            }
            if ((!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString()) && dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString() != "0") ||
               !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_date"].ToString())
               )
            {
                PdfPTable tblPulse = new PdfPTable(2);
                tblPulse.WidthPercentage = 100f;
                tblPulse.SetWidths(wthAssessed);



                PdfPCell ModifyPulse1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pulse, fontBoldText));
                ModifyPulse1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                ModifyPulse1.HorizontalAlignment = Element.ALIGN_CENTER;
                ModifyPulse1.Colspan = 2;
                tblPulse.AddCell(ModifyPulse1);
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString()))
                {
                    PdfPCell ValueBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString(), tableFont));
                    ValueBP.Colspan = 2;
                    tblPulse.AddCell(ValueBP);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_date"].ToString()))
                {
                    PdfPCell ValueBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_date"].ToString(), tableFont));
                    ValueBP.Colspan = 2;
                    tblPulse.AddCell(ValueBP);

                }
                tblPulse.AddCell(spaceCell1);
                multiColumn.AddElement(tblPulse);

            }
            if ((!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString()) && dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString() != "0") ||
             (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_measurement"].ToString()) && Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_measurement"].ToString()) > 0) ||
             !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_date"].ToString())

                )
            {

                PdfPTable tblWeight = new PdfPTable(2);
                tblWeight.WidthPercentage = 100f;
                tblWeight.SetWidths(wthAssessed);



                PdfPCell ModifyBP1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Weight, fontBoldText));
                ModifyBP1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                ModifyBP1.HorizontalAlignment = Element.ALIGN_CENTER;
                ModifyBP1.Colspan = 2;
                tblWeight.AddCell(ModifyBP1);
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString()) && Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_measurement"].ToString()) > 0)
                {
                    PdfPCell ValueWeigh = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString(), tableFont));
                    ValueWeigh.Colspan = 2;
                    tblWeight.AddCell(ValueWeigh);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_measurement"].ToString()))
                {
                    string sDisplay = string.Empty;
                    if (Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_measurement"].ToString()) > 0)
                    {
                        sDisplay += Resources.Qola.UIverbiage.Measurement + ": ";
                        sDisplay += dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_measurement"].ToString() == "1" ? Resources.Qola.UIverbiage.kilos : Resources.Qola.UIverbiage.pounds;
                        PdfPCell measurementWeight = new PdfPCell(new Phrase(sDisplay, tableFont));
                        measurementWeight.Colspan = 2;
                        tblWeight.AddCell(measurementWeight);
                    }
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_date"].ToString()))
                {
                    PdfPCell DateWeight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_date"].ToString(), tableFont));
                    DateWeight.Colspan = 2;
                    tblWeight.AddCell(DateWeight);

                }
                tblWeight.AddCell(spaceCell1);
                multiColumn.AddElement(tblWeight);
            }
            if ((!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString()) && dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString() != "0") ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_measurement"].ToString()) ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_date"].ToString()))
            {

                PdfPTable tblHeight = new PdfPTable(2);
                tblHeight.WidthPercentage = 100f;
                tblHeight.SetWidths(wthAssessed);


                if ((!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString()) && dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString() != "0") ||
                    (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_measurement"].ToString()) && Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_measurement"].ToString()) > 0) ||
                    !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_date"].ToString())
                    )
                {
                    PdfPCell ModifyBP1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Height, fontBoldText));
                    ModifyBP1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    ModifyBP1.HorizontalAlignment = Element.ALIGN_CENTER;
                    ModifyBP1.Colspan = 2;
                    tblHeight.AddCell(ModifyBP1);
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString()))
                    {
                        PdfPCell HeightValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString(), tableFont));
                        HeightValue.Colspan = 2;
                        tblHeight.AddCell(HeightValue);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_measurement"].ToString()))
                    {
                        string sDisplay = string.Empty;
                        if (Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_measurement"].ToString()) > 0)
                        {
                            sDisplay += Resources.Qola.UIverbiage.Measurement + ": ";
                            sDisplay += dsAssessmentDetails.Tables[0].Rows[0]["fd_height_measurement"].ToString() == "1" ? Resources.Qola.UIverbiage.inch : Resources.Qola.UIverbiage.cm;
                            PdfPCell MesureHeight = new PdfPCell(new Phrase(sDisplay, tableFont));
                            MesureHeight.Colspan = 2;
                            tblHeight.AddCell(MesureHeight);
                        }
                    }

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_date"].ToString()))
                    {
                        PdfPCell DateHeight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_height_date"].ToString(), tableFont));
                        DateHeight.Colspan = 2;
                        tblHeight.AddCell(DateHeight);

                    }
                }
                tblHeight.AddCell(spaceCell1);
                multiColumn.AddElement(tblHeight);
            }

            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString()))
            {

                PdfPTable tblAppetite = new PdfPTable(2);
                tblAppetite.WidthPercentage = 100f;
                tblAppetite.SetWidths(wthAssessed);


                PdfPCell Appetite = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Appetite, fontHDBoldText));
                Appetite.HorizontalAlignment = Element.ALIGN_LEFT;
                Appetite.Colspan = 2;
                Appetite.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblAppetite.AddCell(Appetite);

                PdfPCell Appetite1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Appetite, fontBoldText));
                Appetite1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Appetite1.HorizontalAlignment = Element.ALIGN_CENTER;
                Appetite1.Colspan = 2;
                tblAppetite.AddCell(Appetite1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "1AG") != "")
                {
                    PdfPCell AppGoodOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "1AG"), fontBoldTextOP));
                    tblAppetite.AddCell(AppGoodOP);
                    PdfPCell AppGood = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Good, tableFont));
                    tblAppetite.AddCell(AppGood);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "2AF") != "")
                {
                    PdfPCell AppFairOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "2AF"), fontBoldTextOP));
                    tblAppetite.AddCell(AppFairOP);
                    PdfPCell AppFair = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Fair, tableFont));
                    tblAppetite.AddCell(AppFair);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "3AP") != "")
                {
                    PdfPCell AppPoorOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "3AP"), fontBoldTextOP));
                    tblAppetite.AddCell(AppPoorOP);
                    PdfPCell AppPoor = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Poor, tableFont));
                    tblAppetite.AddCell(AppPoor);
                }
                tblAppetite.AddCell(spaceCell1);
                multiColumn.AddElement(tblAppetite);
            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_SDR"].ToString()) ||
               !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_FAS"].ToString()) ||
               !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString()))
            {
                PdfPTable tblNutrition = new PdfPTable(2);
                tblNutrition.WidthPercentage = 100f;
                tblNutrition.SetWidths(wthAssessed);

                PdfPCell Nutrition = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Nutrition, fontHDBoldText));
                Nutrition.Colspan = 2;
                Nutrition.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblNutrition.AddCell(Nutrition);

                PdfPCell Nutrition1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Nutrition, fontBoldText));
                Nutrition1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Nutrition1.HorizontalAlignment = Element.ALIGN_CENTER;
                Nutrition1.Colspan = 2;
                tblNutrition.AddCell(Nutrition1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "1NI") != "")
                {
                    PdfPCell NutIndependentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "1NI"), fontBoldTextOP));
                    tblNutrition.AddCell(NutIndependentOP);

                    tblNutrition.AddCell(NutIndependent);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "2NA") != "")
                {
                    PdfPCell NutAssistanceOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "2NA"), fontBoldTextOP));
                    tblNutrition.AddCell(NutAssistanceOP);
                    PdfPCell NutAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assistance, tableFont));
                    tblNutrition.AddCell(NutAssistance);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "3NC") != "")
                {
                    PdfPCell NutCuingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "3NC"), fontBoldTextOP));
                    tblNutrition.AddCell(NutCuingOP);
                    PdfPCell NutCuing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cuing, tableFont));
                    tblNutrition.AddCell(NutCuing);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "4NF") != "")
                {
                    PdfPCell NutFeedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "4NF"), fontBoldTextOP));
                    tblNutrition.AddCell(NutFeedOP);
                    PdfPCell NutFeed = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Feed, tableFont));
                    tblNutrition.AddCell(NutFeed);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "5NS") != "")
                {
                    PdfPCell txtNutSDROP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "5NS"), fontBoldTextOP));
                    tblNutrition.AddCell(txtNutSDROP);
                    PdfPCell txtNutSDR = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialDietRestriction, tableFont));
                    tblNutrition.AddCell(txtNutSDR);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_SDR"].ToString()))
                {
                    PdfPCell NutSDR = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialDietRestriction, tableFont));
                    NutSDR.Colspan = 2;
                    tblNutrition.AddCell(NutSDR);

                    PdfPCell NutSDROP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_SDR"].ToString(), tableFont));
                    NutSDROP.Colspan = 2;
                    NutSDROP.FixedHeight = 80;
                    tblNutrition.AddCell(NutSDROP);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "6NW") != "")
                {
                    PdfPCell NutSwallowingRiskOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "6NW"), fontBoldTextOP));
                    tblNutrition.AddCell(NutSwallowingRiskOP);
                    PdfPCell NutSwallowingRisk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Swallowingrestriction, tableFont));
                    tblNutrition.AddCell(NutSwallowingRisk);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "7ND") != "")
                {
                    PdfPCell NutDiningRoomOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "7ND"), fontBoldTextOP));
                    tblNutrition.AddCell(NutDiningRoomOP);
                    PdfPCell NutDiningRoom = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DiningRoom, tableFont));
                    tblNutrition.AddCell(NutDiningRoom);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "8NT") != "")
                {
                    PdfPCell NutTrayServiceOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "8NT"), fontBoldTextOP));
                    tblNutrition.AddCell(NutTrayServiceOP);
                    PdfPCell NutTrayService = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TrayService, tableFont));
                    tblNutrition.AddCell(NutTrayService);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "9NF") != "")
                {
                    PdfPCell NutFoodAllergyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "9NF"), fontBoldTextOP));
                    tblNutrition.AddCell(NutFoodAllergyOP);
                    PdfPCell NutFoodAllergy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FoodAllergySensitivity, tableFont));
                    tblNutrition.AddCell(NutFoodAllergy);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_FAS"].ToString()))
                {
                    PdfPCell txtNutAS = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FoodAllergySensitivity, tableFont));
                    txtNutAS.Colspan = 2;
                    tblNutrition.AddCell(txtNutAS);
                    PdfPCell txtNutASOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_FAS"].ToString(), tableFont));
                    txtNutASOP.Colspan = 2;
                    txtNutASOP.FixedHeight = 80;
                    tblNutrition.AddCell(txtNutASOP);
                }
                tblNutrition.AddCell(spaceCell1);
                multiColumn.AddElement(tblNutrition);
            }

            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString().Trim()) ||
              !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_B_incontinence"].ToString().Trim()) ||
              !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bladder_toileting"].ToString().Trim()) ||
          !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bladder_comment"].ToString().Trim()) ||
           !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString().Trim()) ||
       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_ostomy"].ToString().Trim()) ||
       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bowel_toileting"].ToString().Trim()) ||
       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bowel_comment"].ToString().Trim()) ||
       (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_managed"].ToString().Trim()) && dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_managed"].ToString().Trim() != ""))
            {
                PdfPTable tblElimination = new PdfPTable(2);
                tblElimination.WidthPercentage = 100f;
                tblElimination.SetWidths(wthAssessed);
                tblElimination.AddCell(Elimination);

                multiColumn.AddElement(tblElimination);
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString()) ||
        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_B_incontinence"].ToString()) ||
        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bladder_toileting"].ToString()) ||
        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bladder_comment"].ToString()))
                {
                    PdfPTable tblBladder = new PdfPTable(2);
                    tblBladder.WidthPercentage = 100f;
                    tblBladder.SetWidths(wthAssessed);


                    PdfPCell Bladder = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bladder, fontBoldText));
                    Bladder.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Bladder.HorizontalAlignment = Element.ALIGN_CENTER;
                    Bladder.Colspan = 2;
                    tblBladder.AddCell(Bladder);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC") != "")
                    {
                        PdfPCell BlaContinentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC"), fontBoldTextOP));
                        tblBladder.AddCell(BlaContinentOP);

                        tblBladder.AddCell(BlaContinent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI") != "")
                    {
                        PdfPCell BlaInContinentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI"), fontBoldTextOP));
                        tblBladder.AddCell(BlaInContinentOP);
                        tblBladder.AddCell(BlaInContinent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO") != "")
                    {
                        PdfPCell BlaOCCInContinentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO"), fontBoldTextOP));
                        tblBladder.AddCell(BlaOCCInContinentOP);
                        tblBladder.AddCell(BlaOCCInContinent);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_B_incontinence"].ToString()))
                    {
                        PdfPCell txtInContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Ifincontinentisitbeingmanaged, tableFont));
                        txtInContinent.Colspan = 2;
                        tblBladder.AddCell(txtInContinent);
                        PdfPCell txtInContinentOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_B_incontinence"].ToString(), tableFont));
                        txtInContinentOP.Colspan = 2;
                        txtInContinentOP.MinimumHeight = 25;
                        tblBladder.AddCell(txtInContinentOP);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA") != "")
                    {
                        PdfPCell BlaCatheterOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA"), fontBoldTextOP));
                        tblBladder.AddCell(BlaCatheterOP);
                        PdfPCell BlaCatheter = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CatheterChange, tableFont));
                        tblBladder.AddCell(BlaCatheter);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "5BH") != "")
                    {
                        PdfPCell BlaHomeOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "5BH"), fontBoldTextOP));
                        tblBladder.AddCell(BlaHomeOP);
                        PdfPCell BlaHome = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Home, tableFont));
                        tblBladder.AddCell(BlaHome);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "6BA") != "")
                    {
                        PdfPCell BlaAgencyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "6BA"), fontBoldTextOP));
                        tblBladder.AddCell(BlaAgencyOP);
                        PdfPCell BlaAgency = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
                        tblBladder.AddCell(BlaAgency);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bladder_toileting"].ToString()))
                    {
                        PdfPCell txtBlaRoutinetime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Toiletingroutinetime, tableFont));
                        txtBlaRoutinetime.Colspan = 2;
                        tblBladder.AddCell(txtBlaRoutinetime);
                        PdfPCell txtBlaRoutinetimeOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_bladder_toileting"].ToString(), tableFont));
                        txtBlaRoutinetimeOP.Colspan = 2;
                        txtBlaRoutinetimeOP.FixedHeight = 15;
                        tblBladder.AddCell(txtBlaRoutinetimeOP);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bladder_comment"].ToString()))
                    {
                        tblBladder.AddCell(txtBlaComments);
                        PdfPCell txtBlaCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_bladder_comment"].ToString(), tableFont));
                        txtBlaCommentsOP.Colspan = 2;
                        txtBlaCommentsOP.FixedHeight = 50;
                        tblBladder.AddCell(txtBlaCommentsOP);
                    }
                    multiColumn.AddElement(tblBladder);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString()) ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_ostomy"].ToString()) ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bowel_toileting"].ToString()) ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bowel_comment"].ToString()))
                {
                    PdfPTable tblBowel = new PdfPTable(2);
                    tblBowel.WidthPercentage = 100f;
                    tblBowel.SetWidths(wthAssessed);
                    PdfPCell Bowel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bowel, fontBoldText));
                    Bowel.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Bowel.HorizontalAlignment = Element.ALIGN_CENTER;
                    Bowel.Colspan = 2;
                    tblBowel.AddCell(Bowel);

                    if (!String.IsNullOrEmpty(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "1BC")))
                    {
                        PdfPCell BowContinentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "1BC"), fontBoldTextOP));
                        tblBowel.AddCell(BowContinentOP);
                        tblBowel.AddCell(BlaContinent);
                    }
                    if (!String.IsNullOrEmpty(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "2BI")))
                    {
                        PdfPCell BowInContinentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "2BI"), fontBoldTextOP));
                        tblBowel.AddCell(BowInContinentOP);
                        tblBowel.AddCell(BlaInContinent);
                    }
                    if (!String.IsNullOrEmpty(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "4BN")))
                    {
                        PdfPCell BowOCCInContinentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "4BN"), fontBoldTextOP));
                        tblBowel.AddCell(BowOCCInContinentOP);
                        tblBowel.AddCell(BlaOCCInContinent);
                    }
                    if (!String.IsNullOrEmpty(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "3BO")))
                    {
                        PdfPCell OstomyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "3BO"), fontBoldTextOP));
                        tblBowel.AddCell(OstomyOP);
                        PdfPCell Ostomy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Ostomy, tableFont));
                        tblBowel.AddCell(Ostomy);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "5BH") != "")
                    {
                        PdfPCell BowHomeOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "5BH"), fontBoldTextOP));
                        tblBowel.AddCell(BowHomeOP);
                        PdfPCell BowHome = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Home, tableFont));
                        tblBowel.AddCell(BowHome);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "6BA") != "")
                    {
                        PdfPCell BlaAgencyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "6BA"), fontBoldTextOP));
                        tblBowel.AddCell(BlaAgencyOP);
                        PdfPCell BlaAgency = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
                        tblBowel.AddCell(BlaAgency);
                    }

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_ostomy"].ToString()))
                    {
                        PdfPCell txtOstomy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Ostomy, tableFont));
                        txtOstomy.Colspan = 2;
                        tblBowel.AddCell(txtOstomy);
                        PdfPCell txtOstomyOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_ostomy"].ToString(), tableFont));
                        txtOstomyOP.Colspan = 2;
                        txtOstomyOP.FixedHeight = 15;
                        tblBowel.AddCell(txtOstomyOP);
                    }

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bowel_toileting"].ToString()))
                    {
                        PdfPCell txtBowRoutinetime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Toiletingroutinetime, tableFont));
                        txtBowRoutinetime.Colspan = 2;
                        tblBowel.AddCell(txtBowRoutinetime);
                        PdfPCell txtBowRoutinetimeOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_bowel_toileting"].ToString(), tableFont));
                        txtBowRoutinetimeOP.Colspan = 2;
                        txtBowRoutinetimeOP.FixedHeight = 15;
                        tblBowel.AddCell(txtBowRoutinetimeOP);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bowel_comment"].ToString()))
                    {
                        PdfPCell txtBowComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                        txtBowComments.Colspan = 2;
                        tblBowel.AddCell(txtBowComments);
                        PdfPCell txtBowCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_bowel_comment"].ToString(), tableFont));
                        txtBowCommentsOP.Colspan = 2;
                        txtBowCommentsOP.FixedHeight = 50;
                        tblBowel.AddCell(txtBowCommentsOP);
                    }

                    multiColumn.AddElement(tblBowel);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_managed"].ToString()) && dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_managed"].ToString() != "")
                {
                    PdfPTable tblManagedAppropriately = new PdfPTable(2);
                    tblManagedAppropriately.WidthPercentage = 100f;
                    tblManagedAppropriately.SetWidths(wthAssessed);

                    PdfPCell ManagedAppropriately = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ManagedAppropriately, fontBoldText));
                    ManagedAppropriately.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    ManagedAppropriately.HorizontalAlignment = Element.ALIGN_CENTER;
                    ManagedAppropriately.Colspan = 2;
                    tblManagedAppropriately.AddCell(ManagedAppropriately);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_managed"].ToString(), "Y") != "")
                    {
                        PdfPCell YesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_managed"].ToString(), "Y"), fontBoldTextOP));
                        tblManagedAppropriately.AddCell(YesOP);

                        tblManagedAppropriately.AddCell(Yes);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_managed"].ToString(), "N") != "")
                    {
                        PdfPCell NoOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_managed"].ToString(), "N"), fontBoldTextOP));
                        tblManagedAppropriately.AddCell(NoOP);
                        tblManagedAppropriately.AddCell(No);
                    }
                    multiColumn.AddElement(tblManagedAppropriately);

                }
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MA") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_comment"].ToString().Trim()) ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "1WI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "2WS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "3WA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22WF") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23WT") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "24WN") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "5HS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "6HA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22HM") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "25HT") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP") != "" ||
               !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString()) ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "8CS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "9CA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "10SI") != "" ||
              getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "11SS") != "" ||
              getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "12SA") != "" ||
              !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString()) ||
              (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "14TS") != "" ||
               !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_transfers_comment"].ToString().Trim()) ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "15TA") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "16T1") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "17T2") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "18TT") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "19TM") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "20TN") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "21TE") != "" ||
               !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_concerns"].ToString().Trim()) ||
              !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_prothesis"].ToString().Trim()))
               )
            {
                PdfPTable tblMobility1 = new PdfPTable(2);
                tblMobility1.WidthPercentage = 100f;
                tblMobility1.SetWidths(wthAssessed);

                tblMobility1.AddCell(spaceCell1);
                PdfPCell Mobility = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mobility, fontHDBoldText));
                Mobility.Colspan = 2;
                Mobility.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblMobility1.AddCell(Mobility);
                multiColumn.AddElement(tblMobility1);

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MA") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_comment"].ToString()))
                {
                    PdfPTable tblMobility = new PdfPTable(2);
                    tblMobility.WidthPercentage = 100f;
                    tblMobility.SetWidths(wthAssessed);

                    PdfPCell Mobility1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mobility, fontBoldText));
                    Mobility1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Mobility1.HorizontalAlignment = Element.ALIGN_CENTER;
                    Mobility1.Colspan = 2;
                    tblMobility.AddCell(Mobility1);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MI") != "")
                    {
                        PdfPCell IndependentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MI"), fontBoldTextOP));
                        tblMobility.AddCell(IndependentOP);

                        tblMobility.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MS") != "")
                    {
                        PdfPCell SupervisionOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MS"), fontBoldTextOP));
                        tblMobility.AddCell(SupervisionOP);
                        PdfPCell Supervision = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervision, tableFont));
                        tblMobility.AddCell(Supervision);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MA") != "")
                    {
                        PdfPCell AssistanceOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MA"), fontBoldTextOP));
                        tblMobility.AddCell(AssistanceOP);
                        PdfPCell Assistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assistance, tableFont));
                        tblMobility.AddCell(Assistance);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MD") != "")
                    {
                        PdfPCell DependentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MD"), fontBoldTextOP));
                        tblMobility.AddCell(DependentOP);
                        PdfPCell Dependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                        tblMobility.AddCell(Dependent);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_comment"].ToString()))
                    {
                        PdfPCell txtMobilityComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                        txtMobilityComments.Colspan = 2;
                        tblMobility.AddCell(txtMobilityComments);

                        PdfPCell txtMobilityCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_comment"].ToString(), tableFont));
                        txtMobilityCommentsOP.Colspan = 2;
                        txtMobilityCommentsOP.FixedHeight = 50;
                        tblMobility.AddCell(txtMobilityCommentsOP);
                    }
                    multiColumn.AddElement(tblMobility);
                }
                if (
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "1WI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "2WS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "3WA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22WF") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23WT") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "24WN") != ""

                    )
                {
                    PdfPTable tblWalker = new PdfPTable(2);
                    tblWalker.WidthPercentage = 100f;
                    tblWalker.SetWidths(wthAssessed);

                    PdfPCell Walker = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Walker, fontBoldText));
                    Walker.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Walker.HorizontalAlignment = Element.ALIGN_CENTER;
                    Walker.Colspan = 2;
                    tblWalker.AddCell(Walker);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "1WI") != "")
                    {
                        PdfPCell IndependentWalker = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "1WI"), fontBoldTextOP));
                        tblWalker.AddCell(IndependentWalker);
                        tblWalker.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "2WS") != "")
                    {
                        PdfPCell SupervisedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "2WS"), fontBoldTextOP));
                        tblWalker.AddCell(SupervisedOP);
                        tblWalker.AddCell(Supervised);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "3WA") != "")
                    {
                        PdfPCell AssistedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "3WA"), fontBoldTextOP));
                        tblWalker.AddCell(AssistedOP);
                        tblWalker.AddCell(Assisted);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22WF") != "" || getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23WT") != "" ||
                        getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "24WN") != "")
                    {
                        PdfPCell WalkerType = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.WalkerType, tableFont));
                        WalkerType.Colspan = 2;
                        tblWalker.AddCell(WalkerType);
                        if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22WF") != "")
                        {
                            PdfPCell ForeWheelOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22WF"), fontBoldTextOP));
                            tblWalker.AddCell(ForeWheelOP);
                            tblWalker.AddCell(ForeWheel);
                        }
                        if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23WT") != "")
                        {
                            PdfPCell TwoWheelOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23WT"), fontBoldTextOP));
                            tblWalker.AddCell(TwoWheelOP);
                            tblWalker.AddCell(TwoWheel);
                        }
                        if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "24WN") != "")
                        {
                            PdfPCell NoWheelOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "24WN"), fontBoldTextOP));
                            tblWalker.AddCell(NoWheelOP);
                            tblWalker.AddCell(NoWheel);
                        }
                    }
                    multiColumn.AddElement(tblWalker);
                }
                if (
                        getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "5HS") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "6HA") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22HM") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "25HT") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP") != ""
                    )
                {
                    PdfPTable tblWheelchair = new PdfPTable(2);
                    tblWheelchair.WidthPercentage = 100f;
                    tblWheelchair.SetWidths(wthAssessed);
                    PdfPCell Wheelchair = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wheelchair, fontBoldText));
                    Wheelchair.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Wheelchair.HorizontalAlignment = Element.ALIGN_CENTER;
                    Wheelchair.Colspan = 2;
                    tblWheelchair.AddCell(Wheelchair);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI") != "")
                    {
                        PdfPCell IndependentWheelchair = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI"), fontBoldTextOP));
                        tblWheelchair.AddCell(IndependentWheelchair);
                        tblWheelchair.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "5HS") != "")
                    {
                        PdfPCell SupervisedWheelchair = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "5HS"), fontBoldTextOP));
                        tblWheelchair.AddCell(SupervisedWheelchair);
                        tblWheelchair.AddCell(Supervised);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "6HA") != "")
                    {
                        PdfPCell AssistedWheelchair = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "6HA"), fontBoldTextOP));
                        tblWheelchair.AddCell(AssistedWheelchair);
                        tblWheelchair.AddCell(Assisted);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22HM") != "")
                    {
                        PdfPCell ManualOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22HM"), fontBoldTextOP));
                        tblWheelchair.AddCell(ManualOP);
                        PdfPCell Manual = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Manual, tableFont));
                        tblWheelchair.AddCell(Manual);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "25HT") != "" ||
                        getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE") != "" ||
                        getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP") != ""
                        )
                    {
                        PdfPCell WheelchairType = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.WheelchairType, tableFont));
                        WheelchairType.Colspan = 2;
                        tblWheelchair.AddCell(WheelchairType);

                        if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "25HT") != "")
                        {
                            PdfPCell TileOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "25HT"), fontBoldTextOP));
                            tblWheelchair.AddCell(TileOP);
                            PdfPCell Tile = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tile, tableFont));
                            tblWheelchair.AddCell(Tile);
                        }
                        if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE") != "")
                        {
                            PdfPCell ElectricOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE"), fontBoldTextOP));
                            tblWheelchair.AddCell(ElectricOP);
                            PdfPCell Electric = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Electric, tableFont));
                            tblWheelchair.AddCell(Electric);
                        }

                        if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP") != "")
                        {
                            PdfPCell TransportOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP"), fontBoldTextOP));
                            tblWheelchair.AddCell(TransportOP);
                            PdfPCell Transport = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Transport, tableFont));
                            tblWheelchair.AddCell(Transport);
                        }
                    }
                    multiColumn.AddElement(tblWheelchair);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString()) ||
                        getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "8CS") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "9CA") != "")
                {
                    PdfPTable tblCane = new PdfPTable(2);
                    tblCane.WidthPercentage = 100f;
                    tblCane.SetWidths(wthAssessed);

                    PdfPCell Cane = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cane, fontBoldText));
                    Cane.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Cane.HorizontalAlignment = Element.ALIGN_CENTER;
                    Cane.Colspan = 2;
                    tblCane.AddCell(Cane);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI") != "")
                    {
                        PdfPCell IndependentCane = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI"), fontBoldTextOP));
                        tblCane.AddCell(IndependentCane);
                        tblCane.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "8CS") != "")
                    {
                        PdfPCell SupervisedCane = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "8CS"), fontBoldTextOP));
                        tblCane.AddCell(SupervisedCane);
                        tblCane.AddCell(Supervised);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "9CA") != "")
                    {
                        PdfPCell AssistedCane = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "9CA"), fontBoldTextOP));
                        tblCane.AddCell(AssistedCane);
                        tblCane.AddCell(Assisted);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString()))
                    {
                        PdfPCell CaneType = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CaneType, tableFont));
                        CaneType.Colspan = 2;
                        tblCane.AddCell(CaneType);
                        PdfPCell CaneTypeOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString(), tableFont));
                        CaneTypeOP.Colspan = 2;
                        CaneTypeOP.FixedHeight = 30;
                        tblCane.AddCell(CaneTypeOP);
                    }
                    multiColumn.AddElement(tblCane);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "10SI") != "" ||
                  getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "11SS") != "" ||
                  getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "12SA") != "" ||
                  !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString()))
                {
                    PdfPTable tblScooter = new PdfPTable(2);
                    tblScooter.WidthPercentage = 100f;
                    tblScooter.SetWidths(wthAssessed);

                    PdfPCell Scooter = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Scooter, fontBoldText));
                    Scooter.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Scooter.HorizontalAlignment = Element.ALIGN_CENTER;
                    Scooter.Colspan = 2;
                    tblScooter.AddCell(Scooter);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "10SI") != "")
                    {
                        PdfPCell IndependentScooter = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "10SI"), fontBoldTextOP));
                        tblScooter.AddCell(IndependentScooter);
                        tblScooter.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "11SS") != "")
                    {
                        PdfPCell SupervisedScooter = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "11SS"), fontBoldTextOP));
                        tblScooter.AddCell(SupervisedScooter);
                        tblScooter.AddCell(Supervised);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "12SA") != "")
                    {
                        PdfPCell AssistedScooter = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "12SA"), fontBoldTextOP));
                        tblScooter.AddCell(AssistedScooter);
                        tblScooter.AddCell(Assisted);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString()))
                    {
                        PdfPCell ScooterType = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ScooterType, tableFont));
                        ScooterType.Colspan = 2;
                        tblScooter.AddCell(ScooterType);
                        PdfPCell ScooterTypeOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString(), tableFont));
                        ScooterTypeOP.Colspan = 2;
                        ScooterTypeOP.FixedHeight = 15;
                        tblScooter.AddCell(ScooterTypeOP);
                    }
                    multiColumn.AddElement(tblScooter);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI") != "" ||
                   getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "14TS") != "" ||
                   !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_transfers_comment"].ToString()) ||
                   getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "15TA") != "" ||
                   getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "16T1") != "" ||
                   getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "17T2") != "" ||
                   getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "18TT") != "" ||
                   getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "19TM") != "" ||
                   getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "20TN") != "" ||
                   getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "21TE") != "")
                {
                    PdfPTable tblTransfers = new PdfPTable(2);
                    tblTransfers.WidthPercentage = 100f;
                    tblTransfers.SetWidths(wthAssessed);

                    PdfPCell Transfers = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Transfers, fontBoldText));
                    Transfers.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Transfers.HorizontalAlignment = Element.ALIGN_CENTER;
                    Transfers.Colspan = 2;
                    tblTransfers.AddCell(Transfers);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI") != "")
                    {
                        PdfPCell IndependentTransfers = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI"), fontBoldTextOP));
                        tblTransfers.AddCell(IndependentTransfers);
                        tblTransfers.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "14TS") != "")
                    {
                        PdfPCell SupervisedTransfers = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "14TS"), fontBoldTextOP));
                        tblTransfers.AddCell(SupervisedTransfers);
                        tblTransfers.AddCell(Supervised);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "15TA") != "")
                    {
                        PdfPCell AssistedTransfers = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "15TA"), fontBoldTextOP));
                        tblTransfers.AddCell(AssistedTransfers);
                        tblTransfers.AddCell(Assisted);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "16T1") != "")
                    {
                        PdfPCell PersonConstantOP1 = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "16T1"), fontBoldTextOP));
                        tblTransfers.AddCell(PersonConstantOP1);
                        PdfPCell PersonConstant1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PersonConstant_1, tableFont));
                        tblTransfers.AddCell(PersonConstant1);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "17T2") != "")
                    {
                        PdfPCell PersonConstantOP2 = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "17T2"), fontBoldTextOP));
                        tblTransfers.AddCell(PersonConstantOP2);
                        PdfPCell PersonConstant2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PersonConstant_2, tableFont));
                        tblTransfers.AddCell(PersonConstant2);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "18TT") != "")
                    {
                        PdfPCell StandbyAssistanceOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "18TT"), fontBoldTextOP));
                        tblTransfers.AddCell(StandbyAssistanceOP);
                        PdfPCell StandbyAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.StandbyAssistance, tableFont));
                        tblTransfers.AddCell(StandbyAssistance);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "19TM") != "")
                    {
                        PdfPCell MinimalAssistanceOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "19TM"), fontBoldTextOP));
                        tblTransfers.AddCell(MinimalAssistanceOP);
                        PdfPCell MinimalAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MinimalAssistance, tableFont));
                        tblTransfers.AddCell(MinimalAssistance);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "20TN") != "")
                    {
                        PdfPCell IntermittentAssistanceOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "20TN"), fontBoldTextOP));
                        tblTransfers.AddCell(IntermittentAssistanceOP);
                        PdfPCell IntermittentAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IntermittentAssistance, tableFont));
                        tblTransfers.AddCell(IntermittentAssistance);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "21TE") != "")
                    {
                        PdfPCell MechanicalLiftOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "21TE"), fontBoldTextOP));
                        tblTransfers.AddCell(MechanicalLiftOP);
                        PdfPCell MechanicalLift = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MechanicalLift, tableFont));
                        tblTransfers.AddCell(MechanicalLift);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_transfers_comment"].ToString()))
                    {
                        tblTransfers.AddCell(txtBlaComments);
                        PdfPCell TransfersCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_transfers_comment"].ToString(), tableFont));
                        TransfersCommentsOP.Colspan = 2;
                        TransfersCommentsOP.FixedHeight = 40;
                        tblTransfers.AddCell(TransfersCommentsOP);
                    }
                    multiColumn.AddElement(tblTransfers);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_concerns"].ToString()) ||
             !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_prothesis"].ToString()))
                {
                    PdfPTable tblMobilityConcern = new PdfPTable(2);
                    tblMobilityConcern.WidthPercentage = 100f;
                    tblMobilityConcern.SetWidths(wthAssessed);

                    PdfPCell mobilityconcern = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Arethereanymobilityconcern, fontBoldText));
                    mobilityconcern.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    mobilityconcern.HorizontalAlignment = Element.ALIGN_CENTER;
                    mobilityconcern.Colspan = 2;
                    tblMobilityConcern.AddCell(mobilityconcern);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_concerns"].ToString(), "Y") != "")
                    {
                        PdfPCell YesmobilityconcernOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_concerns"].ToString(), "Y"), fontBoldTextOP));
                        tblMobilityConcern.AddCell(YesmobilityconcernOP);
                        tblMobilityConcern.AddCell(Yes);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_concerns"].ToString(), "N") != "")
                    {
                        PdfPCell NoMobilityconcernOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_concerns"].ToString(), "N"), fontBoldTextOP));
                        tblMobilityConcern.AddCell(NoMobilityconcernOP);
                        tblMobilityConcern.AddCell(No);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_prothesis"].ToString()))
                    {
                        PdfPCell Prothesis = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Prothesisspecify, tableFont));
                        Prothesis.Colspan = 2;
                        tblMobilityConcern.AddCell(Prothesis);
                        PdfPCell ProthesisOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_prothesis"].ToString(), tableFont));
                        ProthesisOP.Colspan = 2;
                        ProthesisOP.FixedHeight = 15;
                        tblMobilityConcern.AddCell(ProthesisOP);
                    }
                    tblMobilityConcern.AddCell(spaceCell1);
                    multiColumn.AddElement(tblMobilityConcern);
                }
            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene_appropriate"].ToString().Trim()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString()) ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "54PN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "52PH") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "53PA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4BI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5BS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6BA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "56BA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH56BA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7DI") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8DS") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9DA") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "57DH") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "58DA") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "26DH") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "27DN") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "28DO") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "29DT") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "30AA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "31AG") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "33AS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "34AF") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10SI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11SS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12SA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13OI") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14OS") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15OA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "51TO") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "16TF") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "17TP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "18TN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "59TU") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "60TL") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "61DN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "19DU") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "20DL") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "21DF") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "22DP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "23PT") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24PS") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "25PO") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "35PP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "36PE") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "37PA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "38PD") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "62PA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "63PE") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "44PS") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "45PM") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "46PT") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "47PW") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "48PH") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "49PF") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "50PA") != "" ||
            dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_bathing_time"].ToString() != "" ||
            dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_bathing_frequency"].ToString() != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "64SN") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "39SR") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "40SB") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "41SS") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "42SP") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "43SD") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "65SH") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "66SA") != "" ||
           dsAssessmentDetails.Tables[0].Rows[0]["fd_skin_care_comment"].ToString() != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1SA") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2SP") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3PR") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4PL") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5PW") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6PC") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service"].ToString(), "1SY") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service"].ToString(), "2SN") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service"].ToString(), "3SC") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service"].ToString(), "4SA") != "" ||
           dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service_agency"].ToString() != "")
            {
                PdfPTable tblPersonalHygiene1 = new PdfPTable(2);
                tblPersonalHygiene1.WidthPercentage = 100f;
                tblPersonalHygiene1.SetWidths(wthAssessed);

                tblPersonalHygiene1.AddCell(spaceCell1);
                PdfPCell PersonalHygiene = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PersonalHygiene, fontHDBoldText));
                PersonalHygiene.Colspan = 2;
                PersonalHygiene.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblPersonalHygiene1.AddCell(PersonalHygiene);
                multiColumn.AddElement(tblPersonalHygiene1);

                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene_appropriate"].ToString()) ||
               !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString()))
                {
                    PdfPTable tblPersonalHygiene = new PdfPTable(2);
                    tblPersonalHygiene.WidthPercentage = 100f;
                    tblPersonalHygiene.SetWidths(wthAssessed);

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene_appropriate"].ToString()))
                    {
                        PdfPCell PersonalHygiene1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DoesPersonalHygieneappearappropriate, fontBoldText));
                        PersonalHygiene1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                        PersonalHygiene1.HorizontalAlignment = Element.ALIGN_CENTER;
                        PersonalHygiene1.Colspan = 2;
                        tblPersonalHygiene.AddCell(PersonalHygiene1);
                        if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene_appropriate"].ToString(), "Y") != "")
                        {
                            PdfPCell YesPersonalHygieneOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene_appropriate"].ToString(), "Y"), fontBoldTextOP));
                            tblPersonalHygiene.AddCell(YesPersonalHygieneOP);
                            tblPersonalHygiene.AddCell(Yes);
                        }
                        if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene_appropriate"].ToString(), "N") != "")
                        {
                            PdfPCell NoPersonalHygieneOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene_appropriate"].ToString(), "N"), fontBoldTextOP));
                            tblPersonalHygiene.AddCell(NoPersonalHygieneOP);
                            tblPersonalHygiene.AddCell(No);
                        }

                    }
                    multiColumn.AddElement(tblPersonalHygiene);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "54PN") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "52PH") != "" ||
                     getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "53PA") != ""
                    )
                {
                    PdfPTable tblAMcare = new PdfPTable(2);
                    tblAMcare.WidthPercentage = 100f;
                    tblAMcare.SetWidths(wthAssessed);

                    PdfPCell AMcare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AMcare, fontBoldText));
                    AMcare.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AMcare.HorizontalAlignment = Element.ALIGN_CENTER;
                    AMcare.Colspan = 2;
                    tblAMcare.AddCell(AMcare);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "54PN") != "")
                    {
                        PdfPCell PerNAOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "54PN"), fontBoldTextOP));
                        tblAMcare.AddCell(PerNAOP);
                        tblAMcare.AddCell(NA);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "")
                    {
                        PdfPCell IndependentAMcare = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI"), fontBoldTextOP));
                        tblAMcare.AddCell(IndependentAMcare);
                        tblAMcare.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "")
                    {
                        PdfPCell SupervisedAMcare = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS"), fontBoldTextOP));
                        tblAMcare.AddCell(SupervisedAMcare);
                        tblAMcare.AddCell(Supervised);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA") != "")
                    {
                        PdfPCell AssistedAMcare = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA"), fontBoldTextOP));
                        tblAMcare.AddCell(AssistedAMcare);
                        tblAMcare.AddCell(Assisted);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "52PH") != "")
                    {
                        PdfPCell HomeAMCareOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "52PH"), fontBoldTextOP));
                        tblAMcare.AddCell(HomeAMCareOP);
                        tblAMcare.AddCell(HomeAMCare);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "53PA") != "")
                    {
                        PdfPCell AgencyAMCareOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "53PA"), fontBoldTextOP));
                        tblAMcare.AddCell(AgencyAMCareOP);
                        tblAMcare.AddCell(AgencyAMCare);
                    }
                    multiColumn.AddElement(tblAMcare);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4BI") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5BS") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6BA") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "56BA") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH56BA") != ""
                )
                {
                    PdfPTable tblBathing = new PdfPTable(2);
                    tblBathing.WidthPercentage = 100f;
                    tblBathing.SetWidths(wthAssessed);

                    PdfPCell Bathing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bathing, fontBoldText));
                    Bathing.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Bathing.HorizontalAlignment = Element.ALIGN_CENTER;
                    Bathing.Colspan = 2;
                    tblBathing.AddCell(Bathing);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4BI") != "")
                    {
                        PdfPCell IndependentBathing = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4BI"), fontBoldTextOP));
                        tblBathing.AddCell(IndependentBathing);
                        tblBathing.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5BS") != "")
                    {
                        PdfPCell SupervisedBathing = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5BS"), fontBoldTextOP));
                        tblBathing.AddCell(SupervisedBathing);
                        tblBathing.AddCell(Supervised);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6BA") != "")
                    {
                        PdfPCell AssistedBathing = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6BA"), fontBoldTextOP));
                        tblBathing.AddCell(AssistedBathing);
                        tblBathing.AddCell(Assisted);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH") != "")
                    {
                        PdfPCell HomeBathingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH"), fontBoldTextOP));
                        tblBathing.AddCell(HomeBathingOP);
                        tblBathing.AddCell(HomeAMCare);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "56BA") != "")
                    {
                        PdfPCell AgencyBothingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "56BA"), fontBoldTextOP));
                        tblBathing.AddCell(AgencyBothingOP);
                        tblBathing.AddCell(AgencyAMCare);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH56BA") != "")
                    {
                        PdfPCell BothBothingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH56BA"), fontBoldTextOP));
                        tblBathing.AddCell(BothBothingOP);
                        tblBathing.AddCell(AgencyAMCare);
                    }
                    multiColumn.AddElement(tblBathing);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7DI") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8DS") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9DA") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "57DH") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "58DA") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "26DH") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "27DN") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "28DO") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "29DT") != "")
                {
                    PdfPTable tblDressing = new PdfPTable(2);
                    tblDressing.WidthPercentage = 100f;
                    tblDressing.SetWidths(wthAssessed);

                    PdfPCell Dressing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DressingUndressing, fontBoldText));
                    Dressing.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Dressing.HorizontalAlignment = Element.ALIGN_CENTER;
                    Dressing.Colspan = 2;
                    tblDressing.AddCell(Dressing);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7DI") != "")
                    {
                        PdfPCell IndependentDressing = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7DI"), fontBoldTextOP));
                        tblDressing.AddCell(IndependentDressing);
                        tblDressing.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8DS") != "")
                    {
                        PdfPCell SupervisedDressing = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8DS"), fontBoldTextOP));
                        tblDressing.AddCell(SupervisedDressing);
                        tblDressing.AddCell(Supervised);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9DA") != "")
                    {
                        PdfPCell AssistedDressing = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9DA"), fontBoldTextOP));
                        tblDressing.AddCell(AssistedDressing);
                        tblDressing.AddCell(Assisted);
                    }


                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "26DH") != "")
                    {
                        PdfPCell DresHelpAssembleOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "26DH"), fontBoldTextOP));
                        tblDressing.AddCell(DresHelpAssembleOP);
                        PdfPCell DresHelpAssemble = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.HelpAssemblingClothes, tableFont));
                        tblDressing.AddCell(DresHelpAssemble);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "27DN") != "")
                    {
                        PdfPCell DresIntermittentSuperOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "27DN"), fontBoldTextOP));
                        tblDressing.AddCell(DresIntermittentSuperOP);
                        PdfPCell DresIntermittentSuper = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IntermittentSupervision, tableFont));
                        tblDressing.AddCell(DresIntermittentSuper);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "28DO") != "")
                    {
                        PdfPCell DresConstantSubOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "28DO"), fontBoldTextOP));
                        tblDressing.AddCell(DresConstantSubOP);
                        PdfPCell DresConstantSub = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ConstantSubSomeAssistance, tableFont));
                        tblDressing.AddCell(DresConstantSub);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "29DT") != "")
                    {
                        PdfPCell DresTotalAssistanceOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "29DT"), fontBoldTextOP));
                        tblDressing.AddCell(DresTotalAssistanceOP);
                        PdfPCell DresTotalAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TotalAssistance, tableFont));
                        tblDressing.AddCell(DresTotalAssistance);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "57DH") != "")
                    {
                        PdfPCell HomeDressing = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "57DH"), fontBoldTextOP));
                        tblDressing.AddCell(HomeDressing);
                        tblDressing.AddCell(HomeAMCare);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "58DA") != "")
                    {
                        PdfPCell AgencyDressing = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "58DA"), fontBoldTextOP));
                        tblDressing.AddCell(AgencyDressing);
                        tblDressing.AddCell(AgencyAMCare);
                    }
                    multiColumn.AddElement(tblDressing);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "30AA") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "31AG") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "33AS") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "34AF") != "")
                {
                    PdfPTable tblAssistWith = new PdfPTable(2);
                    tblAssistWith.WidthPercentage = 100f;
                    tblAssistWith.SetWidths(wthAssessed);

                    PdfPCell AssistWith = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistWith, fontBoldText));
                    AssistWith.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AssistWith.HorizontalAlignment = Element.ALIGN_CENTER;
                    AssistWith.Colspan = 2;
                    tblAssistWith.AddCell(AssistWith);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "30AA") != "")
                    {
                        PdfPCell AswArmsInSleeveOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "30AA"), fontBoldTextOP));
                        tblAssistWith.AddCell(AswArmsInSleeveOP);
                        PdfPCell AswArmsInSleeve = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ArmsInSleeves, tableFont));
                        tblAssistWith.AddCell(AswArmsInSleeve);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "31AG") != "")
                    {
                        PdfPCell AswGarmentOverHeadOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "31AG"), fontBoldTextOP));
                        tblAssistWith.AddCell(AswGarmentOverHeadOP);
                        PdfPCell AswGarmentOverHead = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.GarmentOverHead, tableFont));
                        tblAssistWith.AddCell(AswGarmentOverHead);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP") != "")
                    {
                        PdfPCell AswPullingPantsOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP"), fontBoldTextOP));
                        tblAssistWith.AddCell(AswPullingPantsOP);
                        PdfPCell AswPullingPants = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PullingPantsOn, tableFont));
                        tblAssistWith.AddCell(AswPullingPants);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "33AS") != "")
                    {
                        PdfPCell AswSocksShoesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "33AS"), fontBoldTextOP));
                        tblAssistWith.AddCell(AswSocksShoesOP);
                        PdfPCell AswSocksShoes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SocksStockingsShoes, tableFont));
                        tblAssistWith.AddCell(AswSocksShoes);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "34AF") != "")
                    {
                        PdfPCell AswFastenersOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "34AF"), fontBoldTextOP));
                        tblAssistWith.AddCell(AswFastenersOP);
                        PdfPCell AswFasteners = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FastenersFrontBack, tableFont));
                        tblAssistWith.AddCell(AswFasteners);
                    }
                    multiColumn.AddElement(tblAssistWith);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10SI") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11SS") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12SA") != "")
                {
                    PdfPTable tblShaving = new PdfPTable(2);
                    tblShaving.WidthPercentage = 100f;
                    tblShaving.SetWidths(wthAssessed);
                    PdfPCell Shaving = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Shaving, fontBoldText));
                    Shaving.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Shaving.HorizontalAlignment = Element.ALIGN_CENTER;
                    Shaving.Colspan = 2;
                    tblShaving.AddCell(Shaving);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10SI") != "")
                    {

                        PdfPCell IndependentShaving = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10SI"), fontBoldTextOP));
                        tblShaving.AddCell(IndependentShaving);
                        tblShaving.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11SS") != "")
                    {
                        PdfPCell SupervisedShaving = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11SS"), fontBoldTextOP));
                        tblShaving.AddCell(SupervisedShaving);
                        tblShaving.AddCell(Supervised);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12SA") != "")
                    {
                        PdfPCell AssistedShaving = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12SA"), fontBoldTextOP));
                        tblShaving.AddCell(AssistedShaving);
                        tblShaving.AddCell(Assisted);
                    }
                    multiColumn.AddElement(tblShaving);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13OI") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14OS") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15OA") != "")
                {
                    PdfPTable tblOralcare = new PdfPTable(2);
                    tblOralcare.WidthPercentage = 100f;
                    tblOralcare.SetWidths(wthAssessed);

                    PdfPCell Oralcare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Oralcare, fontBoldText));
                    Oralcare.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Oralcare.HorizontalAlignment = Element.ALIGN_CENTER;
                    Oralcare.Colspan = 2;
                    tblOralcare.AddCell(Oralcare);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13OI") != "")
                    {
                        PdfPCell IndependentOralcare = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13OI"), fontBoldTextOP));
                        tblOralcare.AddCell(IndependentOralcare);
                        tblOralcare.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14OS") != "")
                    {
                        PdfPCell SupervisedOralcare = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14OS"), fontBoldTextOP));
                        tblOralcare.AddCell(SupervisedOralcare);
                        tblOralcare.AddCell(Supervised);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15OA") != "")
                    {
                        PdfPCell AssistedOralcare = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15OA"), fontBoldTextOP));
                        tblOralcare.AddCell(AssistedOralcare);
                        tblOralcare.AddCell(Assisted);
                    }
                    multiColumn.AddElement(tblOralcare);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "51TO") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "16TF") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "17TP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "18TN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "59TU") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "60TL") != ""
                    )
                {
                    PdfPTable tblTeeth = new PdfPTable(2);
                    tblTeeth.WidthPercentage = 100f;
                    tblTeeth.SetWidths(wthAssessed);

                    PdfPCell Teeth = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Teeth, fontBoldText));
                    Teeth.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Teeth.HorizontalAlignment = Element.ALIGN_CENTER;
                    Teeth.Colspan = 2;
                    tblTeeth.AddCell(Teeth);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "51TO") != "")
                    {
                        PdfPCell TeeOwnTeethOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "51TO"), fontBoldTextOP));
                        tblTeeth.AddCell(TeeOwnTeethOP);
                        PdfPCell TeeOwnTeeth = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OwnTeeth, tableFont));
                        tblTeeth.AddCell(TeeOwnTeeth);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "16TF") != "")
                    {
                        PdfPCell TeeFullOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "16TF"), fontBoldTextOP));
                        tblTeeth.AddCell(TeeFullOP);
                        PdfPCell TeeFull = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Full, tableFont));
                        tblTeeth.AddCell(TeeFull);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "17TP") != "")
                    {
                        PdfPCell TeePartialOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "17TP"), fontBoldTextOP));
                        tblTeeth.AddCell(TeePartialOP);
                        PdfPCell TeePartial = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Partial, tableFont));
                        tblTeeth.AddCell(TeePartial);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "18TN") != "")
                    {
                        PdfPCell TeeNoneOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "18TN"), fontBoldTextOP));
                        tblTeeth.AddCell(TeeNoneOP);
                        PdfPCell TeeNone = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.None, tableFont));
                        tblTeeth.AddCell(TeeNone);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "59TU") != "")
                    {
                        PdfPCell UpperOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "59TU"), fontBoldTextOP));
                        tblTeeth.AddCell(UpperOP);
                        PdfPCell Upper = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Upper, tableFont));
                        tblTeeth.AddCell(Upper);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "60TL") != "")
                    {
                        PdfPCell LowerOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "60TL"), fontBoldTextOP));
                        tblTeeth.AddCell(LowerOP);
                        PdfPCell Lower = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Lower, tableFont));
                        tblTeeth.AddCell(Lower);
                    }
                    multiColumn.AddElement(tblTeeth);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "61DN") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "19DU") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "20DL") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "21DF") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "22DP") != "")
                {
                    PdfPTable tblDentures = new PdfPTable(2);
                    tblDentures.WidthPercentage = 100f;
                    tblDentures.SetWidths(wthAssessed);

                    PdfPCell Dentures = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dentures, fontBoldText));
                    Dentures.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Dentures.HorizontalAlignment = Element.ALIGN_CENTER;
                    Dentures.Colspan = 2;
                    tblDentures.AddCell(Dentures);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "61DN") != "")
                    {
                        PdfPCell NAOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "61DN"), fontBoldTextOP));
                        tblDentures.AddCell(NAOP);
                        PdfPCell PersonalNA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                        tblDentures.AddCell(PersonalNA);
                    }

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "19DU") != "")
                    {
                        PdfPCell UpperOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "19DU"), fontBoldTextOP));
                        tblDentures.AddCell(UpperOP);
                        PdfPCell Upper = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Upper, tableFont));
                        tblDentures.AddCell(Upper);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "20DL") != "")
                    {
                        PdfPCell LowerOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "20DL"), fontBoldTextOP));
                        tblDentures.AddCell(LowerOP);
                        PdfPCell Lower = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Lower, tableFont));
                        tblDentures.AddCell(Lower);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "21DF") != "")
                    {
                        PdfPCell FullOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "21DF"), fontBoldTextOP));
                        tblDentures.AddCell(FullOP);
                        PdfPCell Full = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Full, tableFont));
                        tblDentures.AddCell(Full);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "22DP") != "")
                    {
                        PdfPCell PartialOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "22DP"), fontBoldTextOP));
                        tblDentures.AddCell(PartialOP);
                        PdfPCell Partial = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Partial, tableFont));
                        tblDentures.AddCell(Partial);
                    }
                    multiColumn.AddElement(tblDentures);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "23PT") != "" ||
              getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24PS") != "" ||
              getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "25PO") != "" ||
              getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "35PP") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "36PE") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "37PA") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "38PD") != "")
                {
                    PdfPTable tblPreferredBathing = new PdfPTable(2);
                    tblPreferredBathing.WidthPercentage = 100f;
                    tblPreferredBathing.SetWidths(wthAssessed);

                    PdfPCell PreferredBathing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredBathing, fontBoldText));
                    PreferredBathing.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    PreferredBathing.HorizontalAlignment = Element.ALIGN_CENTER;
                    PreferredBathing.Colspan = 2;
                    tblPreferredBathing.AddCell(PreferredBathing);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "23PT") != "")
                    {
                        PdfPCell PreBatTubOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "23PT"), fontBoldTextOP));
                        tblPreferredBathing.AddCell(PreBatTubOP);
                        PdfPCell PreBatTub = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tub, tableFont));
                        tblPreferredBathing.AddCell(PreBatTub);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24PS") != "")
                    {
                        PdfPCell PreBatShowerOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24PS"), fontBoldTextOP));
                        tblPreferredBathing.AddCell(PreBatShowerOP);
                        PdfPCell PreBatShower = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Shower, tableFont));
                        tblPreferredBathing.AddCell(PreBatShower);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "25PO") != "")
                    {
                        PdfPCell PreBatOtherOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "25PO"), fontBoldTextOP));
                        tblPreferredBathing.AddCell(PreBatOtherOP);
                        PdfPCell PreBatOther = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, tableFont));
                        tblPreferredBathing.AddCell(PreBatOther);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "35PP") != "")
                    {
                        PdfPCell PreBatSpongeOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "35PP"), fontBoldTextOP));
                        tblPreferredBathing.AddCell(PreBatSpongeOP);
                        PdfPCell PreBatSponge = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sponge, tableFont));
                        tblPreferredBathing.AddCell(PreBatSponge);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "36PE") != "")
                    {
                        PdfPCell PreBatSelfOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "36PE"), fontBoldTextOP));
                        tblPreferredBathing.AddCell(PreBatSelfOP);
                        PdfPCell PreBatSelf = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Self, tableFont));
                        tblPreferredBathing.AddCell(PreBatSelf);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "37PA") != "")
                    {
                        PdfPCell PreBatAssistOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "37PA"), fontBoldTextOP));
                        tblPreferredBathing.AddCell(PreBatAssistOP);
                        PdfPCell PreBatAssist = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assist, tableFont));
                        tblPreferredBathing.AddCell(PreBatAssist);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "38PD") != "")
                    {
                        PdfPCell PreBatDependetOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "38PD"), fontBoldTextOP));
                        tblPreferredBathing.AddCell(PreBatDependetOP);
                        PdfPCell PreBatDependet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependet, tableFont));
                        tblPreferredBathing.AddCell(PreBatDependet);
                    }
                    multiColumn.AddElement(tblPreferredBathing);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "62PA") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "63PE") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "44PS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "45PM") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "46PT") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "47PW") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "48PH") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "49PF") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "50PA") != "" ||
                dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_bathing_time"].ToString() != "" ||
                dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_bathing_frequency"].ToString() != "")
                {
                    PdfPTable tblPreferredDay = new PdfPTable(2);
                    tblPreferredDay.WidthPercentage = 100f;
                    tblPreferredDay.SetWidths(wthAssessed);

                    PdfPCell PreferredDay = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredDay, fontBoldText));
                    PreferredDay.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    PreferredDay.HorizontalAlignment = Element.ALIGN_CENTER;
                    PreferredDay.Colspan = 2;
                    tblPreferredDay.AddCell(PreferredDay);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "62PA") != "")
                    {
                        PdfPCell NAOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "62PA"), fontBoldTextOP));
                        tblPreferredDay.AddCell(NAOP);
                        PdfPCell PerNA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                        tblPreferredDay.AddCell(PerNA);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "63PE") != "")
                    {
                        PdfPCell EveryOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "63PE"), fontBoldTextOP));
                        tblPreferredDay.AddCell(EveryOP);
                        PdfPCell EveryDay = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EveryDay, tableFont));
                        tblPreferredDay.AddCell(EveryDay);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "44PS") != "")
                    {
                        PdfPCell SundayOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "44PS"), fontBoldTextOP));
                        tblPreferredDay.AddCell(SundayOP);
                        PdfPCell Sunday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sunday, tableFont));
                        tblPreferredDay.AddCell(Sunday);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "45PM") != "")
                    {
                        PdfPCell MondayOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "45PM"), fontBoldTextOP));
                        tblPreferredDay.AddCell(MondayOP);
                        PdfPCell Monday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Monday, tableFont));
                        tblPreferredDay.AddCell(Monday);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "46PT") != "")
                    {
                        PdfPCell TuesdayOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "46PT"), fontBoldTextOP));
                        tblPreferredDay.AddCell(TuesdayOP);
                        PdfPCell Tuesday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tuesday, tableFont));
                        tblPreferredDay.AddCell(Tuesday);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "47PW") != "")
                    {
                        PdfPCell WednesdayOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "47PW"), fontBoldTextOP));
                        tblPreferredDay.AddCell(WednesdayOP);
                        PdfPCell Wednesday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wednesday, tableFont));
                        tblPreferredDay.AddCell(Wednesday);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "48PH") != "")
                    {
                        PdfPCell ThursdayOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "48PH"), fontBoldTextOP));
                        tblPreferredDay.AddCell(ThursdayOP);
                        PdfPCell Thursday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Thursday, tableFont));
                        tblPreferredDay.AddCell(Thursday);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "49PF") != "")
                    {
                        PdfPCell FridayOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "49PF"), fontBoldTextOP));
                        tblPreferredDay.AddCell(FridayOP);
                        PdfPCell Friday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Friday, tableFont));
                        tblPreferredDay.AddCell(Friday);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "50PA") != "")
                    {
                        PdfPCell SaturdayOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "50PA"), fontBoldTextOP));
                        tblPreferredDay.AddCell(SaturdayOP);
                        PdfPCell Saturday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Saturday, tableFont));
                        tblPreferredDay.AddCell(Saturday);
                    }
                    if (dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_bathing_time"].ToString() != "")
                    {
                        PdfPCell txtPTD = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredTimeofDay, tableFont));
                        txtPTD.Colspan = 2;
                        tblPreferredDay.AddCell(txtPTD);
                        PdfPCell txtPTDOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_bathing_time"].ToString(), tableFont));
                        txtPTDOP.Colspan = 2;

                        tblPreferredDay.AddCell(txtPTDOP);
                    }
                    if (dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_bathing_frequency"].ToString() != "")
                    {
                        PdfPCell txtFrequency = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Frequency, tableFont));
                        txtFrequency.Colspan = 2;
                        tblPreferredDay.AddCell(txtFrequency);
                        PdfPCell txtFrequencyOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_bathing_frequency"].ToString(), tableFont));
                        txtFrequencyOP.Colspan = 2;

                        tblPreferredDay.AddCell(txtFrequencyOP);
                    }
                    multiColumn.AddElement(tblPreferredDay);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "64SN") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "39SR") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "40SB") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "41SS") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "42SP") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "43SD") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "65SH") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "66SA") != "" ||
                    dsAssessmentDetails.Tables[0].Rows[0]["fd_skin_care_comment"].ToString() != "")
                {
                    PdfPTable tblSkinCare = new PdfPTable(2);
                    tblSkinCare.WidthPercentage = 100f;
                    tblSkinCare.SetWidths(wthAssessed);

                    PdfPCell SkinCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SkinCare, fontBoldText));
                    SkinCare.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    SkinCare.HorizontalAlignment = Element.ALIGN_CENTER;
                    SkinCare.Colspan = 2;
                    tblSkinCare.AddCell(SkinCare);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "64SN") != "")
                    {
                        PdfPCell NoneOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "64SN"), fontBoldTextOP));
                        tblSkinCare.AddCell(NoneOP);
                        PdfPCell SkinNA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                        tblSkinCare.AddCell(SkinNA);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "39SR") != "")
                    {
                        PdfPCell SCRiskofskinbreakdownOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "39SR"), fontBoldTextOP));
                        tblSkinCare.AddCell(SCRiskofskinbreakdownOP);
                        PdfPCell SCRiskofskinbreakdown = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Riskofskinbreakdown, tableFont));
                        tblSkinCare.AddCell(SCRiskofskinbreakdown);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "40SB") != "")
                    {
                        PdfPCell SCBruisesEasilyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "40SB"), fontBoldTextOP));
                        tblSkinCare.AddCell(SCBruisesEasilyOP);
                        PdfPCell SCBruisesEasily = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BruisesEasily, tableFont));
                        tblSkinCare.AddCell(SCBruisesEasily);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "41SS") != "")
                    {
                        PdfPCell SCScheduledTurningOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "41SS"), fontBoldTextOP));
                        tblSkinCare.AddCell(SCScheduledTurningOP);
                        PdfPCell SCScheduledTurning = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ScheduledTurning, tableFont));
                        tblSkinCare.AddCell(SCScheduledTurning);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "42SP") != "")
                    {
                        PdfPCell SCSpecialTreatementsOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "42SP"), fontBoldTextOP));
                        tblSkinCare.AddCell(SCSpecialTreatementsOP);
                        PdfPCell SCSpecialTreatements = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialTreatements, tableFont));
                        tblSkinCare.AddCell(SCSpecialTreatements);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "43SD") != "")
                    {
                        PdfPCell SCDecubitusUlcerOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "43SD"), fontBoldTextOP));
                        tblSkinCare.AddCell(SCDecubitusUlcerOP);
                        PdfPCell SCDecubitusUlcer = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DecubitusUlcer, tableFont));
                        tblSkinCare.AddCell(SCDecubitusUlcer);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "65SH") != "")
                    {
                        PdfPCell HomeOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "65SH"), fontBoldTextOP));
                        tblSkinCare.AddCell(HomeOP);
                        PdfPCell Home = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Home, tableFont));
                        tblSkinCare.AddCell(Home);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "66SA") != "")
                    {
                        PdfPCell AgencyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "66SA"), fontBoldTextOP));
                        tblSkinCare.AddCell(AgencyOP);
                        PdfPCell Agency = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
                        tblSkinCare.AddCell(Agency);
                    }
                    if (dsAssessmentDetails.Tables[0].Rows[0]["fd_skin_care_comment"].ToString() != "")
                    {
                        PdfPCell SkinCareComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                        SkinCareComments.Colspan = 2;
                        tblSkinCare.AddCell(SkinCareComments);
                        PdfPCell SkinCareCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_skin_care_comment"].ToString(), tableFont));
                        SkinCareCommentsOP.Colspan = 2;
                        SkinCareCommentsOP.FixedHeight = 70;
                        tblSkinCare.AddCell(SkinCareCommentsOP);
                    }
                    multiColumn.AddElement(tblSkinCare);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1SA") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2SP") != "")
                {
                    PdfPTable tblSleepRest = new PdfPTable(2);
                    tblSleepRest.WidthPercentage = 100f;
                    tblSleepRest.SetWidths(wthAssessed);

                    PdfPCell SleepRest = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SleepRest, fontBoldText));
                    SleepRest.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    SleepRest.HorizontalAlignment = Element.ALIGN_CENTER;
                    SleepRest.Colspan = 2;
                    tblSleepRest.AddCell(SleepRest);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1SA") != "")
                    {
                        PdfPCell SlpAMRestOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1SA"), fontBoldTextOP));
                        tblSleepRest.AddCell(SlpAMRestOP);
                        PdfPCell SlpAMRest = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AMRest, tableFont));
                        tblSleepRest.AddCell(SlpAMRest);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2SP") != "")
                    {
                        PdfPCell SlpPMRestOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2SP"), fontBoldTextOP));
                        tblSleepRest.AddCell(SlpPMRestOP);
                        PdfPCell SlpPMRest = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PMRest, tableFont));
                        tblSleepRest.AddCell(SlpPMRest);
                    }
                    multiColumn.AddElement(tblSleepRest);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3PR") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4PL") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5PW") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6PC") != ""
                    )
                {
                    PdfPTable tblSleepPattern = new PdfPTable(2);
                    tblSleepPattern.WidthPercentage = 100f;
                    tblSleepPattern.SetWidths(wthAssessed);

                    PdfPCell SleepPattern = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SleepPattern, fontBoldText));
                    SleepPattern.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    SleepPattern.HorizontalAlignment = Element.ALIGN_CENTER;
                    SleepPattern.Colspan = 2;
                    tblSleepPattern.AddCell(SleepPattern);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3PR") != "")
                    {
                        PdfPCell RestfulOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3PR"), fontBoldTextOP));
                        tblSleepPattern.AddCell(RestfulOP);
                        PdfPCell Restful = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Restful, tableFont));
                        tblSleepPattern.AddCell(Restful);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4PL") != "")
                    {
                        PdfPCell RestlessOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4PL"), fontBoldTextOP));
                        tblSleepPattern.AddCell(RestlessOP);
                        PdfPCell Restless = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Restless, tableFont));
                        tblSleepPattern.AddCell(Restless);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5PW") != "")
                    {
                        PdfPCell SptWandersAtNightOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5PW"), fontBoldTextOP));
                        tblSleepPattern.AddCell(SptWandersAtNightOP);
                        PdfPCell SptWandersAtNight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.WandersAtNight, tableFont));
                        tblSleepPattern.AddCell(SptWandersAtNight);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6PC") != "")
                    {
                        PdfPCell CPAPOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6PC"), fontBoldTextOP));
                        tblSleepPattern.AddCell(CPAPOP);
                        PdfPCell CPAP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CPAP, tableFont));
                        tblSleepPattern.AddCell(CPAP);
                    }
                    multiColumn.AddElement(tblSleepPattern);
                }
                if (
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service"].ToString(), "3SC") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service"].ToString(), "4SA") != "" ||
                    dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service_agency"].ToString() != "")
                {
                    PdfPTable tblspeService = new PdfPTable(2);
                    tblspeService.WidthPercentage = 100f;
                    tblspeService.SetWidths(wthAssessed);

                    PdfPCell speService = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ServiceProvisionByExternalService, fontBoldText));
                    speService.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    speService.HorizontalAlignment = Element.ALIGN_CENTER;
                    speService.Colspan = 2;
                    tblspeService.AddCell(speService);


                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service"].ToString(), "3SC") != "")
                    {
                        PdfPCell CCACOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service"].ToString(), "3SC"), fontBoldTextOP));
                        tblspeService.AddCell(CCACOP);
                        PdfPCell CCAC = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CCAC, tableFont));
                        tblspeService.AddCell(CCAC);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service"].ToString(), "4SA") != "")
                    {
                        PdfPCell AgencyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service"].ToString(), "4SA"), fontBoldTextOP));
                        tblspeService.AddCell(AgencyOP);
                        PdfPCell Agency = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
                        tblspeService.AddCell(Agency);
                    }
                    if (dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service_agency"].ToString() != "")
                    {
                        PdfPCell speServiceComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NameOfAgency, tableFont));
                        speServiceComments.Colspan = 2;
                        tblspeService.AddCell(speServiceComments);
                        PdfPCell speServiceCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_PH_service_agency"].ToString(), tableFont));
                        speServiceCommentsOP.Colspan = 2;
                        speServiceCommentsOP.FixedHeight = 30;
                        tblspeService.AddCell(speServiceCommentsOP);
                    }
                    multiColumn.AddElement(tblspeService);
                }
            }
            float[] wthtblBathroom = new float[] { 1f, 2f, 1f, 2f, 1f, 2f };
            PdfPCell BathroomD = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.D, tableFont));
            PdfPCell BathroomE = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.E, tableFont));
            PdfPCell BathroomN = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.N, tableFont));
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "10CD") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "11CE") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "12CN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "1TI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "2TA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "3TN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "4T1") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "5T2") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "21TC") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "6TT") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "7BD") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "8BE") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "9BN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "13UD") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "14UE") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "15UN") != ""
                )
            {
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "1TI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "2TA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "3TN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "4T1") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "5T2") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "21TC") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "6TT") != "")
                {
                    PdfPTable tblmotToilet = new PdfPTable(2);
                    tblmotToilet.WidthPercentage = 100f;
                    tblmotToilet.SetWidths(wthAssessed);

                    tblmotToilet.AddCell(spaceCell1);

                    PdfPCell motToilet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ToiletingModeofToileting, fontHDBoldText));
                    motToilet.Colspan = 2;
                    motToilet.BackgroundColor = BaseColor.LIGHT_GRAY;
                    tblmotToilet.AddCell(motToilet);

                    PdfPCell Toileting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Toileting, fontBoldText));
                    Toileting.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Toileting.HorizontalAlignment = Element.ALIGN_CENTER;
                    Toileting.Colspan = 2;
                    tblmotToilet.AddCell(Toileting);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "1TI") != "")
                    {
                        PdfPCell ToiIndependent = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "1TI"), fontBoldTextOP));
                        tblmotToilet.AddCell(ToiIndependent);
                        tblmotToilet.AddCell(NutIndependent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "2TA") != "")
                    {
                        PdfPCell ToiAssistanceOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "2TA"), fontBoldTextOP));
                        tblmotToilet.AddCell(ToiAssistanceOP);
                        PdfPCell ToiAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assistancefortranfers, tableFont));
                        tblmotToilet.AddCell(ToiAssistance);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "3TN") != "")
                    {
                        PdfPCell ToiIntermittentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "3TN"), fontBoldTextOP));
                        tblmotToilet.AddCell(ToiIntermittentOP);
                        PdfPCell ToiIntermittent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IntermittentSupervision, tableFont));
                        tblmotToilet.AddCell(ToiIntermittent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "4T1") != "")
                    {
                        PdfPCell ToiPerson1OP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "4T1"), fontBoldTextOP));
                        tblmotToilet.AddCell(ToiPerson1OP);
                        PdfPCell ToiPerson1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OnePersonAssist, tableFont));
                        tblmotToilet.AddCell(ToiPerson1);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "5T2") != "")
                    {
                        PdfPCell ToiPerson2OP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "5T2"), fontBoldTextOP));
                        tblmotToilet.AddCell(ToiPerson2OP);
                        PdfPCell ToiPerson2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TwoPersonAssist, tableFont));
                        tblmotToilet.AddCell(ToiPerson2);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "21TC") != "")
                    {
                        PdfPCell CuingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "21TC"), fontBoldTextOP));
                        tblmotToilet.AddCell(CuingOP);
                        PdfPCell Cuing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cuing, tableFont));
                        tblmotToilet.AddCell(Cuing);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "6TT") != "")
                    {
                        PdfPCell ToiRoutineOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "6TT"), fontBoldTextOP));
                        tblmotToilet.AddCell(ToiRoutineOP);
                        PdfPCell ToiRoutine = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ToiletRoutine, tableFont));
                        tblmotToilet.AddCell(ToiRoutine);
                    }


                    multiColumn.AddElement(tblmotToilet);
                }


                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "7BD") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "8BE") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "9BN") != "")
                {
                    PdfPTable tblBathroom = new PdfPTable(6);
                    tblBathroom.WidthPercentage = 100f;
                    tblBathroom.SetWidths(wthtblBathroom);

                    PdfPCell Bathroom = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bathroom, fontBoldText));
                    Bathroom.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Bathroom.HorizontalAlignment = Element.ALIGN_CENTER;
                    Bathroom.Colspan = 6;
                    tblBathroom.AddCell(Bathroom);


                    PdfPCell ToiBatDOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "7BD"), fontBoldTextOP));
                    tblBathroom.AddCell(ToiBatDOP);
                    tblBathroom.AddCell(BathroomD);

                    PdfPCell ToiBatEOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "8BE"), fontBoldTextOP));
                    tblBathroom.AddCell(ToiBatEOP);
                    tblBathroom.AddCell(BathroomE);

                    PdfPCell ToiBatNOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "9BN"), fontBoldTextOP));
                    tblBathroom.AddCell(ToiBatNOP);
                    tblBathroom.AddCell(BathroomN);
                    multiColumn.AddElement(tblBathroom);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "10CD") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "11CE") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "12CN") != "")
                {
                    PdfPTable tblCommode = new PdfPTable(6);
                    tblCommode.WidthPercentage = 100f;
                    tblCommode.SetWidths(wthtblBathroom);

                    PdfPCell Commode = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Commode, fontBoldText));
                    Commode.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Commode.HorizontalAlignment = Element.ALIGN_CENTER;
                    Commode.Colspan = 6;
                    tblCommode.AddCell(Commode);

                    PdfPCell CommodeDOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "10CD"), fontBoldTextOP));
                    tblCommode.AddCell(CommodeDOP);
                    tblCommode.AddCell(BathroomD);

                    PdfPCell CommodeEOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "11CE"), fontBoldTextOP));
                    tblCommode.AddCell(CommodeEOP);
                    tblCommode.AddCell(BathroomE);

                    PdfPCell CommodeNOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "12CN"), fontBoldTextOP));
                    tblCommode.AddCell(CommodeNOP);
                    tblCommode.AddCell(BathroomN);
                    multiColumn.AddElement(tblCommode);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "13UD") != "" ||
                   getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "14UE") != "" ||
                   getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "15UN") != "")
                {

                    PdfPTable tblBedpanUrinal = new PdfPTable(6);
                    tblBedpanUrinal.WidthPercentage = 100f;
                    tblBedpanUrinal.SetWidths(wthtblBathroom);

                    PdfPCell BedpanUrinal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BedpanUrinal, fontBoldText));
                    BedpanUrinal.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    BedpanUrinal.HorizontalAlignment = Element.ALIGN_CENTER;
                    BedpanUrinal.Colspan = 6;
                    tblBedpanUrinal.AddCell(BedpanUrinal);

                    PdfPCell BedpanUrinalDOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "13UD"), fontBoldTextOP));
                    tblBedpanUrinal.AddCell(BedpanUrinalDOP);
                    tblBedpanUrinal.AddCell(BathroomD);

                    PdfPCell BedpanUrinalEOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "14UE"), fontBoldTextOP));
                    tblBedpanUrinal.AddCell(BedpanUrinalEOP);
                    tblBedpanUrinal.AddCell(BathroomE);

                    PdfPCell BedpanUrinalNOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "15UN"), fontBoldTextOP));
                    tblBedpanUrinal.AddCell(BedpanUrinalNOP);
                    tblBedpanUrinal.AddCell(BathroomN);

                    multiColumn.AddElement(tblBedpanUrinal);
                }
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "16BS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "17BM") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "18BL") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "19BX") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "20BP") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_comment"].ToString())
                )
            {


                PdfPTable tblContinenceProducts = new PdfPTable(2);
                tblContinenceProducts.WidthPercentage = 100f;
                tblContinenceProducts.SetWidths(wthAssessed);
                tblContinenceProducts.AddCell(spaceCell1);
                PdfPCell ContinenceProducts = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ContinenceProducts, fontHDBoldText));
                ContinenceProducts.Colspan = 2;
                ContinenceProducts.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblContinenceProducts.AddCell(ContinenceProducts);

                PdfPCell Briefs = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Briefs, fontBoldText));
                Briefs.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Briefs.HorizontalAlignment = Element.ALIGN_CENTER;
                Briefs.Colspan = 2;
                tblContinenceProducts.AddCell(Briefs);


                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "16BS") != "")
                {
                    PdfPCell ToiBrfSOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "16BS"), fontBoldTextOP));
                    tblContinenceProducts.AddCell(ToiBrfSOP);
                    PdfPCell ToiBrfS = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.S, tableFont));
                    tblContinenceProducts.AddCell(ToiBrfS);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "17BM") != "")
                {
                    PdfPCell ToiBrfMOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "17BM"), fontBoldTextOP));
                    tblContinenceProducts.AddCell(ToiBrfMOP);
                    PdfPCell ToiBrfM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.M, tableFont));
                    tblContinenceProducts.AddCell(ToiBrfM);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "18BL") != "")
                {
                    PdfPCell ToiBrfLOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "18BL"), fontBoldTextOP));
                    tblContinenceProducts.AddCell(ToiBrfLOP);
                    PdfPCell ToiBrfL = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.L, tableFont));
                    tblContinenceProducts.AddCell(ToiBrfL);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "19BX") != "")
                {
                    PdfPCell ToiBrfXOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "19BX"), fontBoldTextOP));
                    tblContinenceProducts.AddCell(ToiBrfXOP);
                    PdfPCell ToiBrfX = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.XL, tableFont));
                    tblContinenceProducts.AddCell(ToiBrfX);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "20BP") != "")
                {
                    PdfPCell ToiBrfPadsOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "20BP"), fontBoldTextOP));
                    tblContinenceProducts.AddCell(ToiBrfPadsOP);
                    PdfPCell ToiBrfPads = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pads, tableFont));
                    tblContinenceProducts.AddCell(ToiBrfPads);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_comment"].ToString()))
                {
                    PdfPCell briefComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    briefComments.Colspan = 2;
                    tblContinenceProducts.AddCell(briefComments);
                    PdfPCell briefCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_comment"].ToString(), tableFont));
                    briefCommentsOP.Colspan = 2;
                    briefCommentsOP.FixedHeight = 70;
                    tblContinenceProducts.AddCell(briefCommentsOP);
                }

                multiColumn.AddElement(tblContinenceProducts);
            }

            float[] wthtblBathroom1 = new float[] { 1f, 2f, 1f, 2f, 1f, 2f };
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "1EI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "2ER") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "3EE") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "4EC") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "5EF") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "12EN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "6OB") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "7OL") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "8OD") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "9MB") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "10ML") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "11MD") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_breakfast"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_lunch"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_dinner"].ToString()))
            {
                PdfPTable tblEating = new PdfPTable(2);
                tblEating.WidthPercentage = 100f;
                tblEating.SetWidths(wthAssessed);
                tblEating.AddCell(spaceCell1);

                PdfPTable tblEating1 = new PdfPTable(6);
                tblEating1.WidthPercentage = 100f;
                tblEating1.SetWidths(wthtblBathroom1);

                PdfPCell Eating = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Eating, fontHDBoldText));
                Eating.Colspan = 2;
                Eating.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblEating.AddCell(Eating);

                PdfPCell Eating1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Eating, fontBoldText));
                Eating1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Eating1.HorizontalAlignment = Element.ALIGN_CENTER;
                Eating1.Colspan = 2;
                tblEating.AddCell(Eating1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "12EN") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "1EI") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "2ER") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "3EE") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "4EC") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "5EF") != ""
                    )
                {

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "12EN") != "")
                    {
                        PdfPCell EatNA = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "12EN"), fontBoldTextOP));
                        tblEating.AddCell(EatNA);
                        tblEating.AddCell(NA);
                    }

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "1EI") != "")
                    {
                        PdfPCell EatIndependent = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "1EI"), fontBoldTextOP));
                        tblEating.AddCell(EatIndependent);
                        tblEating.AddCell(Independent);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "2ER") != "")
                    {
                        PdfPCell EatRequiresAssistanceOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "2ER"), fontBoldTextOP));
                        tblEating.AddCell(EatRequiresAssistanceOP);
                        PdfPCell EatRequiresAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RequiresAssistance, tableFont));
                        tblEating.AddCell(EatRequiresAssistance);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "3EE") != "")
                    {
                        PdfPCell EatIntermitentEncouragementOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "3EE"), fontBoldTextOP));
                        tblEating.AddCell(EatIntermitentEncouragementOP);
                        PdfPCell EatIntermitentEncouragement = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IntermittentEncouragement, tableFont));
                        tblEating.AddCell(EatIntermitentEncouragement);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "4EC") != "")
                    {
                        PdfPCell EatConstantEncouragementOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "4EC"), fontBoldTextOP));
                        tblEating.AddCell(EatConstantEncouragementOP);
                        PdfPCell EatConstantEncouragement = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ConstantEncouragement, tableFont));
                        tblEating.AddCell(EatConstantEncouragement);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "5EF") != "")
                    {
                        PdfPCell EatCompleteFeedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "5EF"), fontBoldTextOP));
                        tblEating.AddCell(EatCompleteFeedOP);
                        PdfPCell EatCompleteFeed = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CompleteFeed, tableFont));
                        tblEating.AddCell(EatCompleteFeed);
                    }

                }

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "6OB") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "7OL") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "8OD") != ""
                    )
                {
                    PdfPCell txtOnUnit = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Onunit, tableFont));
                    txtOnUnit.Colspan = 2;
                    tblEating.AddCell(txtOnUnit);


                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "6OB") != "")
                    {

                        PdfPCell EatBOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "6OB"), fontBoldTextOP));
                        tblEating.AddCell(EatBOP);

                        PdfPCell EatB = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EatB, tableFont));
                        tblEating.AddCell(EatB);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "7OL") != "")
                    {
                        PdfPCell EatLOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "7OL"), fontBoldTextOP));
                        tblEating.AddCell(EatLOP);
                        PdfPCell EatL = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EatL, tableFont));
                        tblEating.AddCell(EatL);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "8OD") != "")
                    {
                        PdfPCell EatDOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "8OD"), fontBoldTextOP));
                        tblEating.AddCell(EatDOP);
                        PdfPCell EatDA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EatD, tableFont));
                        tblEating.AddCell(EatDA);
                    }


                }

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "9MB") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "10ML") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "11MD") != ""
                   )
                {
                    PdfPCell txtMainDR = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MainDR, tableFont));
                    txtMainDR.Colspan = 2;
                    tblEating.AddCell(txtMainDR);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "9MB") != "")
                    {

                        PdfPCell EatBOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "9MB"), fontBoldTextOP));
                        tblEating.AddCell(EatBOP);
                        PdfPCell EatB = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EatB, tableFont));
                        tblEating.AddCell(EatB);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "10ML") != "")
                    {
                        PdfPCell EatLOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "10ML"), fontBoldTextOP));
                        tblEating.AddCell(EatLOP);
                        PdfPCell EatL = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EatL, tableFont));
                        tblEating.AddCell(EatL);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "11MD") != "")
                    {
                        PdfPCell EatDOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "11MD"), fontBoldTextOP));
                        tblEating.AddCell(EatDOP);
                        PdfPCell EatDA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EatD, tableFont));
                        tblEating.AddCell(EatDA);
                    }


                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_breakfast"].ToString()) ||
                    !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_lunch"].ToString()) ||
                    !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_dinner"].ToString())
                    )
                {

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_breakfast"].ToString()))
                    {
                        PdfPCell txtBreakfast = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Breakfast, tableFont));
                        txtBreakfast.Colspan = 2;
                        tblEating.AddCell(txtBreakfast);
                        PdfPCell txtBreakfastOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_breakfast"].ToString(), tableFont));
                        txtBreakfastOP.Colspan = 2;
                        txtBreakfastOP.FixedHeight = 15;
                        tblEating.AddCell(txtBreakfastOP);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_lunch"].ToString()))
                    {
                        PdfPCell txtLunch = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Lunch, tableFont));
                        txtLunch.Colspan = 2;
                        tblEating.AddCell(txtLunch);
                        PdfPCell txtLunchOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_lunch"].ToString(), tableFont));
                        txtLunchOP.Colspan = 2;
                        txtLunchOP.FixedHeight = 15;
                        tblEating.AddCell(txtLunchOP);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_dinner"].ToString()))
                    {
                        PdfPCell txtDinner = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dinner, tableFont));
                        txtDinner.Colspan = 2;
                        tblEating.AddCell(txtDinner);
                        PdfPCell txtDinnerOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating_dinner"].ToString(), tableFont));
                        txtDinnerOP.Colspan = 2;
                        txtDinnerOP.FixedHeight = 15;
                        tblEating.AddCell(txtDinnerOP);
                    }

                }
                tblEating.AddCell(spaceCell1);
                multiColumn.AddElement(tblEating);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "1NA") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_describe"].ToString()) ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "2NC") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "3NS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "4NH") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "5NT") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "6NR") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "7NM") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "8NI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "9NU") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "15NO") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "10NS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "12DR") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "13DM") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "14NP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "11NN") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional_comment"].ToString()))
            {
                PdfPTable tblNutritionalStatus = new PdfPTable(2);
                tblNutritionalStatus.WidthPercentage = 100f;
                tblNutritionalStatus.SetWidths(wthAssessed);
                tblNutritionalStatus.AddCell(spaceCell1);

                PdfPCell NutritionalStatus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NutritionalStatus, fontHDBoldText));
                NutritionalStatus.Colspan = 2;
                NutritionalStatus.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblNutritionalStatus.AddCell(NutritionalStatus);

                PdfPCell NutritionalStatus1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NutritionalStatus, fontBoldText));
                NutritionalStatus1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                NutritionalStatus1.HorizontalAlignment = Element.ALIGN_CENTER;
                NutritionalStatus1.Colspan = 2;
                tblNutritionalStatus.AddCell(NutritionalStatus1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "11NN") != "")
                {
                    PdfPCell NstNAOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "11NN"), fontBoldTextOP));
                    tblNutritionalStatus.AddCell(NstNAOP);
                    PdfPCell NstNA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    tblNutritionalStatus.AddCell(NstNA);
                }

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "1NA") != "")
                {
                    PdfPCell NstAssistiveDevicesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "1NA"), fontBoldTextOP));
                    tblNutritionalStatus.AddCell(NstAssistiveDevicesOP);
                    PdfPCell NstAssistiveDevices = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistiveDevices, tableFont));
                    tblNutritionalStatus.AddCell(NstAssistiveDevices);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_describe"].ToString()))
                {
                    PdfPCell txtEatDescribe = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Describe, tableFont));
                    txtEatDescribe.Colspan = 2;
                    tblNutritionalStatus.AddCell(txtEatDescribe);
                    PdfPCell txtEatDescribeOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_describe"].ToString(), tableFont));
                    txtEatDescribeOP.Colspan = 2;
                    txtEatDescribeOP.FixedHeight = 50;
                    tblNutritionalStatus.AddCell(txtEatDescribeOP);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "2NC") != "")
                {
                    PdfPCell NstDifficultyChewingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "2NC"), fontBoldTextOP));
                    tblNutritionalStatus.AddCell(NstDifficultyChewingOP);
                    PdfPCell NstDifficultyChewing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DifficultyChewing, tableFont));
                    tblNutritionalStatus.AddCell(NstDifficultyChewing);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "3NS") != "")
                {
                    PdfPCell NstDifficultySwallowingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "3NS"), fontBoldTextOP));
                    tblNutritionalStatus.AddCell(NstDifficultySwallowingOP);
                    PdfPCell NstDifficultySwallowing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DifficultySwallowing, tableFont));
                    tblNutritionalStatus.AddCell(NstDifficultySwallowing);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "4NH") != "")
                {
                    PdfPCell NstChokesEasilyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "4NH"), fontBoldTextOP));
                    tblNutritionalStatus.AddCell(NstChokesEasilyOP);
                    PdfPCell NstChokesEasily = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ChokesEasily, tableFont));
                    tblNutritionalStatus.AddCell(NstChokesEasily);
                }

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "6NR") != "")
                {
                    PdfPCell NstLowNoRiskOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "6NR"), fontBoldTextOP));
                    tblNutritionalStatus.AddCell(NstLowNoRiskOP);
                    PdfPCell NstLowNoRisk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.LowNoRisk, tableFont));
                    tblNutritionalStatus.AddCell(NstLowNoRisk);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "7NM") != "")
                {
                    PdfPCell NstModerateRiskOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "7NM"), fontBoldTextOP));
                    tblNutritionalStatus.AddCell(NstModerateRiskOP);
                    PdfPCell NstModerateRisk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ModerateRisk, tableFont));
                    tblNutritionalStatus.AddCell(NstModerateRisk);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "8NI") != "")
                {
                    PdfPCell NstHighRiskOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "8NI"), fontBoldTextOP));
                    tblNutritionalStatus.AddCell(NstHighRiskOP);
                    PdfPCell NstHighRisk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.HighRisk, tableFont));
                    tblNutritionalStatus.AddCell(NstHighRisk);
                }

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "12DR") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "13DM") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "14NP") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "5NT") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "10NS") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "9NU") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "15NO") != ""
                    )
                {
                    PdfPCell txtNstComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Diet, tableFont));
                    txtNstComments.Colspan = 2;
                    tblNutritionalStatus.AddCell(txtNstComments);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "12DR") != "")
                    {
                        PdfPCell NstRegOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "12DR"), fontBoldTextOP));
                        tblNutritionalStatus.AddCell(NstRegOP);
                        PdfPCell NstReg = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DietReg, tableFont));
                        tblNutritionalStatus.AddCell(NstReg);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "13DM") != "")
                    {
                        PdfPCell NstMinOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "13DM"), fontBoldTextOP));
                        tblNutritionalStatus.AddCell(NstMinOP);
                        PdfPCell NstMin = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DietMinced, tableFont));
                        tblNutritionalStatus.AddCell(NstMin);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "14NP") != "")
                    {
                        PdfPCell NstPurOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "14NP"), fontBoldTextOP));
                        tblNutritionalStatus.AddCell(NstPurOP);
                        PdfPCell NstPur = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DietPureed, tableFont));
                        tblNutritionalStatus.AddCell(NstPur);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "10NS") != "")
                    {
                        PdfPCell NstSoftOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "10NS"), fontBoldTextOP));
                        tblNutritionalStatus.AddCell(NstSoftOP);
                        PdfPCell NstSoft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Soft, tableFont));
                        tblNutritionalStatus.AddCell(NstSoft);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "5NT") != "")
                    {
                        PdfPCell NstThickenFluidsOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "5NT"), fontBoldTextOP));
                        tblNutritionalStatus.AddCell(NstThickenFluidsOP);
                        PdfPCell NstThickenFluids = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ThickenFluids, tableFont));
                        tblNutritionalStatus.AddCell(NstThickenFluids);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "9NU") != "")
                    {
                        PdfPCell NstSupplementOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "9NU"), fontBoldTextOP));
                        tblNutritionalStatus.AddCell(NstSupplementOP);
                        PdfPCell NstSupplement = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supplement, tableFont));
                        tblNutritionalStatus.AddCell(NstSupplement);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "15NO") != "")
                    {
                        PdfPCell NstSupplementOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "15NO"), fontBoldTextOP));
                        tblNutritionalStatus.AddCell(NstSupplementOP);
                        PdfPCell NstSupplement = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Others, tableFont));
                        tblNutritionalStatus.AddCell(NstSupplement);
                    }
                }

                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional_comment"].ToString()))
                {
                    PdfPCell txtNstComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtNstComments.Colspan = 2;
                    tblNutritionalStatus.AddCell(txtNstComments);
                    PdfPCell txtNstCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional_comment"].ToString(), tableFont));
                    txtNstCommentsOP.Colspan = 2;
                    txtNstCommentsOP.FixedHeight = 55;
                    tblNutritionalStatus.AddCell(txtNstCommentsOP);
                }
                multiColumn.AddElement(tblNutritionalStatus);
            }
            Phrase ratePhrase = new Phrase();
            string rate = dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_rate"].ToString().Trim();
            if (rate != "" && rate != "0")
            {
                decimal rateValue = Convert.ToDecimal(rate);
                rate = Math.Round(rateValue).ToString();
                ratePhrase = new Phrase(rate, ProgressiveReport.font9);
            }

            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_supplier"].ToString()) ||
                (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_rate"].ToString()) && rate != "0" && rate != "") ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7ON") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "1OI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "2OS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "3OA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "8OO") != "")
            {
                PdfPTable tblSpecialNeeds = new PdfPTable(2);
                tblSpecialNeeds.WidthPercentage = 100f;
                tblSpecialNeeds.SetWidths(wthAssessed);


                tblSpecialNeeds.AddCell(spaceCell1);
                PdfPCell SpecialNeeds = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialNeeds, fontHDBoldText));
                SpecialNeeds.Colspan = 2;
                SpecialNeeds.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblSpecialNeeds.AddCell(SpecialNeeds);

                PdfPCell Oxygen = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.O2Oxygen, fontBoldText));
                Oxygen.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Oxygen.HorizontalAlignment = Element.ALIGN_CENTER;
                Oxygen.Colspan = 2;
                tblSpecialNeeds.AddCell(Oxygen);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7ON") != "")
                {
                    PdfPCell ANA = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7ON"), fontBoldTextOP));
                    tblSpecialNeeds.AddCell(ANA);
                    tblSpecialNeeds.AddCell(NA);
                }

                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_supplier"].ToString()))
                {
                    PdfPCell txtSupNameOP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SupplierName, tableFont));
                    txtSupNameOP.Colspan = 2;
                    tblSpecialNeeds.AddCell(txtSupNameOP);
                    PdfPCell txtSupName = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_supplier"].ToString(), tableFont));
                    txtSupName.Colspan = 2;
                    txtSupName.FixedHeight = 15;
                    tblSpecialNeeds.AddCell(txtSupName);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_rate"].ToString()))
                {
                    PdfPCell Rate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Rate, tableFont));
                    Rate.Colspan = 2;
                    tblSpecialNeeds.AddCell(Rate);
                    PdfPCell RateOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_rate"].ToString(), tableFont));
                    RateOP.Colspan = 2;
                    RateOP.FixedHeight = 15;
                    tblSpecialNeeds.AddCell(RateOP);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "1OI") != "")
                {
                    PdfPCell RateIndependent = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "1OI"), fontBoldTextOP));
                    tblSpecialNeeds.AddCell(RateIndependent);
                    tblSpecialNeeds.AddCell(Independent);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "2OS") != "")
                {
                    PdfPCell RateSupervised = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "2OS"), fontBoldTextOP));
                    tblSpecialNeeds.AddCell(RateSupervised);
                    tblSpecialNeeds.AddCell(Supervised);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "3OA") != "")
                {
                    PdfPCell RateAssisted = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "3OA"), fontBoldTextOP));
                    tblSpecialNeeds.AddCell(RateAssisted);
                    tblSpecialNeeds.AddCell(Assisted);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "8OO") != "")
                {
                    PdfPCell SatsO = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "8OO"), fontBoldTextOP));
                    tblSpecialNeeds.AddCell(SatsO);
                    tblSpecialNeeds.AddCell(OSats);
                }
                multiColumn.AddElement(tblSpecialNeeds);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9CN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "4CI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "5CS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "6CA") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_other"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_comments"].ToString()))
            {
                PdfPTable tblsnCPAP = new PdfPTable(2);
                tblsnCPAP.WidthPercentage = 100f;
                tblsnCPAP.SetWidths(wthAssessed);

                PdfPCell snCPAP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CPAP, fontBoldText));
                snCPAP.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                snCPAP.HorizontalAlignment = Element.ALIGN_CENTER;
                snCPAP.Colspan = 2;
                tblsnCPAP.AddCell(snCPAP);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9CN") != "")
                {
                    PdfPCell CAPNA = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9CN"), fontBoldTextOP));
                    tblsnCPAP.AddCell(CAPNA);
                    tblsnCPAP.AddCell(NA);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "4CI") != "")
                {
                    PdfPCell CPAPIndependent = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "4CI"), fontBoldTextOP));
                    tblsnCPAP.AddCell(CPAPIndependent);
                    tblsnCPAP.AddCell(Independent);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "5CS") != "")
                {
                    PdfPCell CPAPSupervised = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "5CS"), fontBoldTextOP));
                    tblsnCPAP.AddCell(CPAPSupervised);
                    tblsnCPAP.AddCell(Supervised);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "6CA") != "")
                {
                    PdfPCell CPAPAssisted = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "6CA"), fontBoldTextOP));
                    tblsnCPAP.AddCell(CPAPAssisted);
                    tblsnCPAP.AddCell(Assisted);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_other"].ToString()))
                {
                    PdfPCell txtSPNeedOther = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, tableFont));
                    txtSPNeedOther.Colspan = 2;
                    tblsnCPAP.AddCell(txtSPNeedOther);
                    PdfPCell txtSPNeedOtherOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_other"].ToString(), tableFont));
                    txtSPNeedOtherOP.Colspan = 2;
                    txtSPNeedOtherOP.FixedHeight = 55;
                    tblsnCPAP.AddCell(txtSPNeedOtherOP);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_comments"].ToString()))
                {
                    PdfPCell txtSPNeedComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtSPNeedComments.Colspan = 2;
                    tblsnCPAP.AddCell(txtSPNeedComments);
                    PdfPCell txtSPNeedCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_comments"].ToString(), tableFont));
                    txtSPNeedCommentsOP.Colspan = 2;
                    txtSPNeedCommentsOP.FixedHeight = 70;
                    tblsnCPAP.AddCell(txtSPNeedCommentsOP);
                }
                multiColumn.AddElement(tblsnCPAP);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "10SC") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "1SSU") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "2SW") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "3SUS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "4SA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "5SS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "6SD") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "7SP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "8SR") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "9SCR") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "11SO") != "" ||
              !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString())
               )
            {
                PdfPTable tblSpecialAlerts = new PdfPTable(2);
                tblSpecialAlerts.WidthPercentage = 100f;
                tblSpecialAlerts.SetWidths(wthAssessed);

                tblSpecialAlerts.AddCell(spaceCell1);
                PdfPCell SpecialAlerts = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialAlerts, fontHDBoldText));
                SpecialAlerts.Colspan = 2;
                SpecialAlerts.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblSpecialAlerts.AddCell(SpecialAlerts);

                PdfPCell SpecialAlerts1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialAlerts, fontBoldText));
                SpecialAlerts1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                SpecialAlerts1.HorizontalAlignment = Element.ALIGN_CENTER;
                SpecialAlerts1.Colspan = 2;
                tblSpecialAlerts.AddCell(SpecialAlerts1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "10SC") != "")
                {
                    PdfPCell SecuredUnitOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "10SC"), fontBoldTextOP));
                    tblSpecialAlerts.AddCell(SecuredUnitOP);
                    PdfPCell SecuredUnit = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    tblSpecialAlerts.AddCell(SecuredUnit);
                }

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "1SSU") != "")
                {
                    PdfPCell SecuredUnitOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "1SSU"), fontBoldTextOP));
                    tblSpecialAlerts.AddCell(SecuredUnitOP);
                    PdfPCell SecuredUnit = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SecuredUnit, tableFont));
                    tblSpecialAlerts.AddCell(SecuredUnit);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "2SW") != "")
                {
                    PdfPCell WandererOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "2SW"), fontBoldTextOP));
                    tblSpecialAlerts.AddCell(WandererOP);
                    PdfPCell Wanderer = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wanderer, tableFont));
                    tblSpecialAlerts.AddCell(Wanderer);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "3SUS") != "")
                {
                    PdfPCell UnsafeSmokerOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "3SUS"), fontBoldTextOP));
                    tblSpecialAlerts.AddCell(UnsafeSmokerOP);
                    PdfPCell UnsafeSmoker = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.UnsafeSmoker, tableFont));
                    tblSpecialAlerts.AddCell(UnsafeSmoker);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "4SA") != "")
                {
                    PdfPCell Substance = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "4SA"), fontBoldTextOP));
                    tblSpecialAlerts.AddCell(Substance);
                    PdfPCell SubstanceAbuse = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SubstanceAbuse, tableFont));
                    tblSpecialAlerts.AddCell(SubstanceAbuse);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "5SS") != "")
                {
                    PdfPCell SeizuresOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "5SS"), fontBoldTextOP));
                    tblSpecialAlerts.AddCell(SeizuresOP);
                    PdfPCell Seizures = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Seizures, tableFont));
                    tblSpecialAlerts.AddCell(Seizures);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "6SD") != "")
                {
                    PdfPCell DiabeticOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "6SD"), fontBoldTextOP));
                    tblSpecialAlerts.AddCell(DiabeticOP);
                    PdfPCell Diabetic = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Diabetic, tableFont));
                    tblSpecialAlerts.AddCell(Diabetic);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "7SP") != "")
                {
                    PdfPCell Pacemaker1 = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "7SP"), fontBoldTextOP));
                    tblSpecialAlerts.AddCell(Pacemaker1);
                    PdfPCell Pacemaker = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pacemaker, tableFont));
                    tblSpecialAlerts.AddCell(Pacemaker);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "8SR") != "")
                {
                    PdfPCell Resist = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "8SR"), fontBoldTextOP));
                    tblSpecialAlerts.AddCell(Resist);
                    PdfPCell Resisttocare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Resisttocare, tableFont));
                    tblSpecialAlerts.AddCell(Resisttocare);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "9SCR") != "")
                {
                    PdfPCell Choking = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "9SCR"), fontBoldTextOP));
                    tblSpecialAlerts.AddCell(Choking);
                    PdfPCell Chokingrisk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Chokingrisk, tableFont));
                    tblSpecialAlerts.AddCell(Chokingrisk);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "11SO") != "")
                {
                    PdfPCell OthersOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alerts"].ToString(), "11SO"), fontBoldTextOP));
                    tblSpecialAlerts.AddCell(OthersOP);
                    PdfPCell Others = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Others, tableFont));
                    tblSpecialAlerts.AddCell(Others);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_alert_comment"].ToString()))
                {
                    PdfPCell txtSpecialAlertComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtSpecialAlertComments.Colspan = 2;
                    tblSpecialAlerts.AddCell(txtSpecialAlertComments);
                    PdfPCell txtSpecialAlertCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_alert_comment"].ToString(), tableFont));
                    txtSpecialAlertCommentsOP.Colspan = 2;
                    txtSpecialAlertCommentsOP.FixedHeight = 15;
                    tblSpecialAlerts.AddCell(txtSpecialAlertCommentsOP);
                }
                multiColumn.AddElement(tblSpecialAlerts);
            }

            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "1VN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "2VI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "8VIL") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "9VIR") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "3VB") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "6VL") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "7VR") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "4VG") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "5VC") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "10VA") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision_comments"].ToString())
                )
            {
                PdfPTable tblSensoryAbilities = new PdfPTable(2);
                tblSensoryAbilities.WidthPercentage = 100f;
                tblSensoryAbilities.SetWidths(wthAssessed);

                tblSensoryAbilities.AddCell(spaceCell1);

                PdfPCell SensoryAbilities = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SensoryAbilities, fontHDBoldText));
                SensoryAbilities.Colspan = 2;
                SensoryAbilities.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblSensoryAbilities.AddCell(SensoryAbilities);

                PdfPCell Vision = new PdfPCell(new Phrase("Comments ", fontBoldText));
                Vision.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Vision.HorizontalAlignment = Element.ALIGN_CENTER;
                Vision.Colspan = 2;
                tblSensoryAbilities.AddCell(Vision);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "1VN") != "")
                {
                    PdfPCell ViNormalOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "1VN"), fontBoldTextOP));
                    tblSensoryAbilities.AddCell(ViNormalOP);
                    PdfPCell ViNormal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Normal, tableFont));
                    tblSensoryAbilities.AddCell(ViNormal);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "2VI") != "")
                {
                    PdfPCell ViImpairedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "2VI"), fontBoldTextOP));
                    tblSensoryAbilities.AddCell(ViImpairedOP);
                    PdfPCell ViImpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Impaired, tableFont));
                    tblSensoryAbilities.AddCell(ViImpaired);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "8VIL") != "")
                {
                    PdfPCell ViImpairedLeftOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "8VIL"), fontBoldTextOP));
                    tblSensoryAbilities.AddCell(ViImpairedLeftOP);
                    PdfPCell ViImpairedLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ImpairedLeft, tableFont));
                    tblSensoryAbilities.AddCell(ViImpairedLeft);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "9VIR") != "")
                {

                    PdfPCell ViImpairedRightOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "9VIR"), fontBoldTextOP));
                    tblSensoryAbilities.AddCell(ViImpairedRightOP);
                    PdfPCell ViImpairedRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ImpairedRight, tableFont));
                    tblSensoryAbilities.AddCell(ViImpairedRight);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "3VB") != "")
                {
                    PdfPCell ViBlindOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "3VB"), fontBoldTextOP));
                    tblSensoryAbilities.AddCell(ViBlindOP);
                    PdfPCell ViBlind = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Blind, tableFont));
                    tblSensoryAbilities.AddCell(ViBlind);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "6VL") != "")
                {
                    PdfPCell ViBlindLeftOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "6VL"), fontBoldTextOP));
                    tblSensoryAbilities.AddCell(ViBlindLeftOP);
                    PdfPCell ViBlindLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BlindLeft, tableFont));
                    tblSensoryAbilities.AddCell(ViBlindLeft);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "7VR") != "")
                {
                    PdfPCell ViBlindRightOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "7VR"), fontBoldTextOP));
                    tblSensoryAbilities.AddCell(ViBlindRightOP);
                    PdfPCell ViBlindRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BlindRight, tableFont));
                    tblSensoryAbilities.AddCell(ViBlindRight);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "4VG") != "")
                {
                    PdfPCell ViGlassesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "4VG"), fontBoldTextOP));
                    tblSensoryAbilities.AddCell(ViGlassesOP);
                    PdfPCell ViGlasses = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Glasses, tableFont));
                    tblSensoryAbilities.AddCell(ViGlasses);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "5VC") != "")
                {
                    PdfPCell ViContactLensOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "5VC"), fontBoldTextOP));
                    tblSensoryAbilities.AddCell(ViContactLensOP);
                    PdfPCell ViContactLens = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ContactLens, tableFont));
                    tblSensoryAbilities.AddCell(ViContactLens);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "10VA") != "")
                {
                    PdfPCell ViAdequateOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "10VA"), fontBoldTextOP));
                    tblSensoryAbilities.AddCell(ViAdequateOP);
                    PdfPCell ViAdequate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Adequate, tableFont));
                    tblSensoryAbilities.AddCell(ViAdequate);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "11VR") != "")
                {
                    PdfPCell ReadingGlassOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "11VR"), fontBoldTextOP));
                    tblSensoryAbilities.AddCell(ReadingGlassOP);
                    PdfPCell ReadingGlass = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ReadingGlasses, tableFont));
                    tblSensoryAbilities.AddCell(ReadingGlass);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision_comments"].ToString()))
                {
                    PdfPCell txtViComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtViComments.Colspan = 2;
                    tblSensoryAbilities.AddCell(txtViComments);
                    PdfPCell txtViCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision_comments"].ToString(), tableFont));
                    txtViCommentsOP.Colspan = 2;
                    txtViCommentsOP.FixedHeight = 50;
                    tblSensoryAbilities.AddCell(txtViCommentsOP);
                }

                multiColumn.AddElement(tblSensoryAbilities);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "1HN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "2HI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "9HM") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "10HP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "3HD") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "11HE") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "12HA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "4HL") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "5HR") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "6HN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "7HS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "8HA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "13HQ") != ""
                )
            {
                PdfPTable tblHearing = new PdfPTable(2);
                tblHearing.WidthPercentage = 100f;
                tblHearing.SetWidths(wthAssessed);

                PdfPCell Hearing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Hearing, fontBoldText));
                Hearing.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Hearing.HorizontalAlignment = Element.ALIGN_CENTER;
                Hearing.Colspan = 2;
                tblHearing.AddCell(Hearing);

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "1HN") != "")
                {
                    PdfPCell HeaNormalOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "1HN"), fontBoldTextOP));
                    tblHearing.AddCell(HeaNormalOP);
                    PdfPCell HeaNormal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Normal, tableFont));
                    tblHearing.AddCell(HeaNormal);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "2HI") != "")
                {
                    PdfPCell HeaImpairedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "2HI"), fontBoldTextOP));
                    tblHearing.AddCell(HeaImpairedOP);
                    PdfPCell HeaImpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Impaired, tableFont));
                    tblHearing.AddCell(HeaImpaired);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "9HM") != "")
                {
                    PdfPCell HeaImpairedLeftOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "9HM"), fontBoldTextOP));
                    tblHearing.AddCell(HeaImpairedLeftOP);
                    PdfPCell HeaImpairedLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ImpairedLeft, tableFont));
                    tblHearing.AddCell(HeaImpairedLeft);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "10HP") != "")
                {
                    PdfPCell HeaImpairedRightOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "10HP"), fontBoldTextOP));
                    tblHearing.AddCell(HeaImpairedRightOP);
                    PdfPCell HeaImpairedRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ImpairedRight, tableFont));
                    tblHearing.AddCell(HeaImpairedRight);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "3HD") != "")
                {
                    PdfPCell HeaDeafOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "3HD"), fontBoldTextOP));
                    tblHearing.AddCell(HeaDeafOP);
                    PdfPCell HeaDeaf = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Deaf, tableFont));
                    tblHearing.AddCell(HeaDeaf);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "11HE") != "")
                {
                    PdfPCell HeaDeafLeftOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "11HE"), fontBoldTextOP));
                    tblHearing.AddCell(HeaDeafLeftOP);
                    PdfPCell HeaDeafLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DeafLeft, tableFont));
                    tblHearing.AddCell(HeaDeafLeft);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "12HA") != "")
                {
                    PdfPCell HeaDeafRightOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "12HA"), fontBoldTextOP));
                    tblHearing.AddCell(HeaDeafRightOP);
                    PdfPCell HeaDeafRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DeafRight, tableFont));
                    tblHearing.AddCell(HeaDeafRight);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "4HL") != "")
                {
                    PdfPCell HeaAideLeftOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "4HL"), fontBoldTextOP));
                    tblHearing.AddCell(HeaAideLeftOP);
                    PdfPCell HeaAideLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AideLeft, tableFont));
                    tblHearing.AddCell(HeaAideLeft);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "5HR") != "")
                {

                    PdfPCell HeaAideRightOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "5HR"), fontBoldTextOP));
                    tblHearing.AddCell(HeaAideRightOP);
                    PdfPCell HeaAideRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AideRight, tableFont));
                    tblHearing.AddCell(HeaAideRight);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "6HN") != "")
                {
                    PdfPCell HeaIndependentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "6HN"), fontBoldTextOP));
                    tblHearing.AddCell(HeaIndependentOP);
                    PdfPCell HeaIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    tblHearing.AddCell(HeaIndependent);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "7HS") != "")
                {
                    PdfPCell HeaSupervisedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "7HS"), fontBoldTextOP));
                    tblHearing.AddCell(HeaSupervisedOP);
                    PdfPCell HeaSupervised = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervised, tableFont));
                    tblHearing.AddCell(HeaSupervised);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "8HA") != "")
                {
                    PdfPCell HeaAssistedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "8HA"), fontBoldTextOP));
                    tblHearing.AddCell(HeaAssistedOP);
                    PdfPCell HeaAssisted = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assisted, tableFont));
                    tblHearing.AddCell(HeaAssisted);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "13HQ") != "")
                {
                    PdfPCell HeaAdequateOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "13HQ"), fontBoldTextOP));
                    tblHearing.AddCell(HeaAdequateOP);
                    PdfPCell HeaAdequate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Adequate, tableFont));
                    tblHearing.AddCell(HeaAdequate);
                }
                multiColumn.AddElement(tblHearing);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "1CU") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "2CF") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "3CJ") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "4CC") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "5CS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "6CI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "7CG") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "4MCU") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "5MCM") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "6MCO") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "7MCS") != ""
                )
            {
                PdfPTable tblCognitivefunction = new PdfPTable(2);
                tblCognitivefunction.WidthPercentage = 100f;
                tblCognitivefunction.SetWidths(wthAssessed);

                tblCognitivefunction.AddCell(spaceCell1);

                PdfPCell Cognitivefunction = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cognitivefunction, fontHDBoldText));
                Cognitivefunction.Colspan = 2;
                Cognitivefunction.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblCognitivefunction.AddCell(Cognitivefunction);

                PdfPCell Cognitivefunction1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cognitivefunction, fontBoldText));
                Cognitivefunction1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Cognitivefunction1.HorizontalAlignment = Element.ALIGN_CENTER;
                Cognitivefunction1.Colspan = 2;
                tblCognitivefunction.AddCell(Cognitivefunction1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "1CU") != "")
                {
                    PdfPCell CogUnimpairedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "1CU"), fontBoldTextOP));
                    tblCognitivefunction.AddCell(CogUnimpairedOP);
                    PdfPCell CogUnimpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unimpaired, tableFont));
                    tblCognitivefunction.AddCell(CogUnimpaired);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "2CF") != "")
                {
                    PdfPCell CogForgetfulOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "2CF"), fontBoldTextOP));
                    tblCognitivefunction.AddCell(CogForgetfulOP);
                    PdfPCell CogForgetful = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Forgetful, tableFont));
                    tblCognitivefunction.AddCell(CogForgetful);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "3CJ") != "")
                {
                    PdfPCell CogJudgementPoorOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "3CJ"), fontBoldTextOP));
                    tblCognitivefunction.AddCell(CogJudgementPoorOP);
                    PdfPCell CogJudgementPoor = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Judgementpoor, tableFont));
                    tblCognitivefunction.AddCell(CogJudgementPoor);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "4CC") != "")
                {
                    PdfPCell CogConfusedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "4CC"), fontBoldTextOP));
                    tblCognitivefunction.AddCell(CogConfusedOP);
                    PdfPCell CogConfused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Confused, tableFont));
                    tblCognitivefunction.AddCell(CogConfused);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "5CS") != "")
                {
                    PdfPCell CogShorttermlossOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "5CS"), fontBoldTextOP));
                    tblCognitivefunction.AddCell(CogShorttermlossOP);
                    PdfPCell CogShorttermloss = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Shorttermloss, tableFont));
                    tblCognitivefunction.AddCell(CogShorttermloss);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "6CI") != "")
                {
                    PdfPCell CogSignificantImpairmentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "6CI"), fontBoldTextOP));
                    tblCognitivefunction.AddCell(CogSignificantImpairmentOP);
                    PdfPCell CogSignificantImpairment = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Significantimpairment, tableFont));
                    tblCognitivefunction.AddCell(CogSignificantImpairment);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "7CG") != "")
                {
                    PdfPCell CogCuingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "7CG"), fontBoldTextOP));
                    tblCognitivefunction.AddCell(CogCuingOP);
                    PdfPCell CogCuing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cuing, tableFont));
                    tblCognitivefunction.AddCell(CogCuing);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "4MCU") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "5MCM") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "6MCO") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "7MCS") != ""
                    )
                {
                    tblCognitivefunction.AddCell(spaceCell1);

                    PdfPCell Confused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Confused, fontHDBoldText));
                    Confused.Colspan = 2;
                    Confused.BackgroundColor = BaseColor.LIGHT_GRAY;
                    tblCognitivefunction.AddCell(Confused);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "4MCU") != "")
                    {
                        PdfPCell ConUnimpairedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "4MCU"), fontBoldTextOP));
                        tblCognitivefunction.AddCell(ConUnimpairedOP);
                        PdfPCell ConUnimpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unimpaired, tableFont));
                        tblCognitivefunction.AddCell(ConUnimpaired);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "5MCM") != "")
                    {
                        PdfPCell ConMildOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "5MCM"), fontBoldTextOP));
                        tblCognitivefunction.AddCell(ConMildOP);
                        PdfPCell ConMild = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mild, tableFont));
                        tblCognitivefunction.AddCell(ConMild);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "6MCO") != "")
                    {
                        PdfPCell ConModerateOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "6MCO"), fontBoldTextOP));
                        tblCognitivefunction.AddCell(ConModerateOP);
                        PdfPCell ConModerate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Moderate, tableFont));
                        tblCognitivefunction.AddCell(ConModerate);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "7MCS") != "")
                    {
                        PdfPCell ConSevereOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "7MCS"), fontBoldTextOP));
                        tblCognitivefunction.AddCell(ConSevereOP);
                        PdfPCell ConSevere = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Severe, tableFont));
                        tblCognitivefunction.AddCell(ConSevere);
                    }
                }

                multiColumn.AddElement(tblCognitivefunction);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT") != ""
                )
            {
                PdfPTable tblMemoryandOrientation = new PdfPTable(2);
                tblMemoryandOrientation.WidthPercentage = 100f;
                tblMemoryandOrientation.SetWidths(wthAssessed);
                tblMemoryandOrientation.AddCell(spaceCell1);

                PdfPCell MemoryandOrientation = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MemoryAndOrientation, fontHDBoldText));
                MemoryandOrientation.Colspan = 2;
                MemoryandOrientation.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblMemoryandOrientation.AddCell(MemoryandOrientation);

                PdfPCell Oriented = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Oriented, fontBoldText));
                Oriented.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Oriented.HorizontalAlignment = Element.ALIGN_CENTER;
                Oriented.Colspan = 2;
                tblMemoryandOrientation.AddCell(Oriented);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP") != "")
                {
                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP"), fontBoldTextOP));
                    tblMemoryandOrientation.AddCell(OriPersonOP);
                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Person, tableFont));
                    tblMemoryandOrientation.AddCell(OriPerson);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL") != "")
                {
                    PdfPCell OriPlaceOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL"), fontBoldTextOP));
                    tblMemoryandOrientation.AddCell(OriPlaceOP);
                    PdfPCell OriPlace = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Place, tableFont));
                    tblMemoryandOrientation.AddCell(OriPlace);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT") != "")
                {
                    PdfPCell OriTimeOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT"), fontBoldTextOP));
                    tblMemoryandOrientation.AddCell(OriTimeOP);
                    PdfPCell OriTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Time, tableFont));
                    tblMemoryandOrientation.AddCell(OriTime);
                }
                multiColumn.AddElement(tblMemoryandOrientation);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "5SN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "1SYS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "2SYU") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "3SN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "4SR") != "")
            {
                PdfPTable tblSmoking = new PdfPTable(2);
                tblSmoking.WidthPercentage = 100f;
                tblSmoking.SetWidths(wthAssessed);

                tblSmoking.AddCell(spaceCell1);

                PdfPCell Smoking = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Smoking, fontHDBoldText));
                Smoking.Colspan = 2;
                Smoking.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblSmoking.AddCell(Smoking);

                PdfPCell Smoking1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Smoking, fontBoldText));
                Smoking1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Smoking1.HorizontalAlignment = Element.ALIGN_CENTER;
                Smoking1.Colspan = 2;
                tblSmoking.AddCell(Smoking1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "5SN") != "")
                {
                    PdfPCell SmokNAOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "5SN"), fontBoldTextOP));
                    tblSmoking.AddCell(SmokNAOP);
                    PdfPCell SmokNA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    tblSmoking.AddCell(SmokNA);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "1SYS") != "")
                {
                    PdfPCell SmoYesSupervisedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "1SYS"), fontBoldTextOP));
                    tblSmoking.AddCell(SmoYesSupervisedOP);
                    PdfPCell SmoYesSupervised = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.YesSupervised, tableFont));
                    tblSmoking.AddCell(SmoYesSupervised);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "2SYU") != "")
                {
                    PdfPCell SmoYesUnSupervisedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "2SYU"), fontBoldTextOP));
                    tblSmoking.AddCell(SmoYesUnSupervisedOP);
                    PdfPCell SmoYesUnSupervised = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.YesUnsupervised, tableFont));
                    tblSmoking.AddCell(SmoYesUnSupervised);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "3SN") != "")
                {
                    PdfPCell SmoNoOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "3SN"), fontBoldTextOP));
                    tblSmoking.AddCell(SmoNoOP);
                    PdfPCell SmoNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                    tblSmoking.AddCell(SmoNo);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "4SR") != "")
                {
                    PdfPCell SmoRiskOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_smoking"].ToString(), "4SR"), fontBoldTextOP));
                    tblSmoking.AddCell(SmoRiskOP);
                    PdfPCell SmoRisk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Risk, tableFont));
                    tblSmoking.AddCell(SmoRisk);
                }
                multiColumn.AddElement(tblSmoking);
            }

            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "1SS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "18SN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "2SR") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "3SA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "4SI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "5SL") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "6SN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "7SM") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "8ST") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "9SB") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "10SE") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "11SW") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "12SD") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "13SO") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "14SU") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "15SF") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "16SH") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "17SY") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_safty_pasd_comment"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd_other"].ToString())
             )
            {
                PdfPTable tblSafetyPasd = new PdfPTable(2);
                tblSafetyPasd.WidthPercentage = 100f;
                tblSafetyPasd.SetWidths(wthAssessed);

                tblSafetyPasd.AddCell(spaceCell1);

                PdfPCell SafetyPasd = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SafetyRestraintsPasd, fontHDBoldText));
                SafetyPasd.Colspan = 2;
                SafetyPasd.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblSafetyPasd.AddCell(SafetyPasd);

                PdfPCell SafetyPasd1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SafetyRestraintsPasd, fontBoldText));
                SafetyPasd1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                SafetyPasd1.HorizontalAlignment = Element.ALIGN_CENTER;
                SafetyPasd1.Colspan = 2;
                tblSafetyPasd.AddCell(SafetyPasd1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "18SN") != "")
                {
                    PdfPCell SafNAOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "18SN"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafNAOP);
                    PdfPCell SafNA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    tblSafetyPasd.AddCell(SafNA);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "1SS") != "")
                {
                    PdfPCell SafSeatLapbeltOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "1SS"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafSeatLapbeltOP);
                    PdfPCell SafSeatLapbelt = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SeatLapbelt, tableFont));
                    tblSafetyPasd.AddCell(SafSeatLapbelt);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "2SR") != "")
                {
                    PdfPCell SafRailsHalfOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "2SR"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafRailsHalfOP);
                    PdfPCell SafRailsHalf = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RailsHalf, tableFont));
                    tblSafetyPasd.AddCell(SafRailsHalf);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "3SA") != "")
                {
                    PdfPCell SafRailsFullOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "3SA"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafRailsFullOP);
                    PdfPCell SafRailsFull = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RailsFull, tableFont));
                    tblSafetyPasd.AddCell(SafRailsFull);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "4SI") != "")
                {
                    PdfPCell SafRailsRightOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "4SI"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafRailsRightOP);
                    PdfPCell SafRailsRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RailsRight, tableFont));
                    tblSafetyPasd.AddCell(SafRailsRight);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "5SL") != "")
                {
                    PdfPCell SafRailsLeftOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "5SL"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafRailsLeftOP);
                    PdfPCell SafRailsLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RailsLeft, tableFont));
                    tblSafetyPasd.AddCell(SafRailsLeft);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "6SN") != "")
                {
                    PdfPCell SafRailsNightOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "6SN"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafRailsNightOP);
                    PdfPCell SafRailsNight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RailsNight, tableFont));
                    tblSafetyPasd.AddCell(SafRailsNight);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "7SM") != "")
                {
                    PdfPCell SafMattressonfloorOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "7SM"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafMattressonfloorOP);
                    PdfPCell SafMattressonfloor = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mattressonfloor, tableFont));
                    tblSafetyPasd.AddCell(SafMattressonfloor);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "8ST") != "")
                {
                    PdfPCell SafTransferPoleOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "8ST"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafTransferPoleOP);
                    PdfPCell SafTransferPole = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TransferPole, tableFont));
                    tblSafetyPasd.AddCell(SafTransferPole);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "9SB") != "")
                {
                    PdfPCell SafTableTrayOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "9SB"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafTableTrayOP);
                    PdfPCell SafTableTray = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TableTray, tableFont));
                    tblSafetyPasd.AddCell(SafTableTray);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "10SE") != "")
                {
                    PdfPCell SafReclinerOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "10SE"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafReclinerOP);
                    PdfPCell SafRecliner = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Recliner, tableFont));
                    tblSafetyPasd.AddCell(SafRecliner);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "11SW") != "")
                {
                    PdfPCell SafTiltwcOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "11SW"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafTiltwcOP);
                    PdfPCell SafTiltwc = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tiltwc, tableFont));
                    tblSafetyPasd.AddCell(SafTiltwc);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "12SD") != "")
                {
                    PdfPCell SafWandersOnUnitOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "12SD"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafWandersOnUnitOP);
                    PdfPCell SafWandersOnUnit = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.WandersOnunit, tableFont));
                    tblSafetyPasd.AddCell(SafWandersOnUnit);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "13SO") != "")
                {
                    PdfPCell SafWandersOffUnitOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "13SO"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafWandersOffUnitOP);
                    PdfPCell SafWandersOffUnit = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.WandersOffunit, tableFont));
                    tblSafetyPasd.AddCell(SafWandersOffUnit);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "14SU") != "")
                {
                    PdfPCell SafOutofbuildingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "14SU"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafOutofbuildingOP);
                    PdfPCell SafOutofbuilding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Outofbuilding, tableFont));
                    tblSafetyPasd.AddCell(SafOutofbuilding);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "15SF") != "")
                {
                    PdfPCell SafUnsafeSmokerOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "15SF"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafUnsafeSmokerOP);
                    PdfPCell SafUnsafeSmoker = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.UnsafeSmoker, tableFont));
                    tblSafetyPasd.AddCell(SafUnsafeSmoker);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "16SH") != "")
                {
                    PdfPCell SafHighRiskFallsOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "16SH"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafHighRiskFallsOP);
                    PdfPCell SafHighRiskFalls = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.HighRiskFalls, tableFont));
                    tblSafetyPasd.AddCell(SafHighRiskFalls);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "17SY") != "")
                {
                    PdfPCell SafBalconyriskAssessmentOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "17SY"), fontBoldTextOP));
                    tblSafetyPasd.AddCell(SafBalconyriskAssessmentOP);
                    PdfPCell SafBalconyriskssessment = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BalconyriskAssessment, tableFont));
                    tblSafetyPasd.AddCell(SafBalconyriskssessment);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd_other"].ToString()))
                {
                    PdfPCell txtSafOther = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, tableFont));
                    txtSafOther.Colspan = 2;
                    tblSafetyPasd.AddCell(txtSafOther);
                    PdfPCell txtSafOtherOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd_other"].ToString(), tableFont));
                    txtSafOtherOP.Colspan = 2;
                    txtSafOtherOP.FixedHeight = 15;
                    tblSafetyPasd.AddCell(txtSafOtherOP);
                }

                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_safty_pasd_comment"].ToString()))
                {
                    PdfPCell txtSafeComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtSafeComments.Colspan = 2;
                    tblSafetyPasd.AddCell(txtSafeComments);
                    PdfPCell txtSafeCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_safty_pasd_comment"].ToString(), tableFont));
                    txtSafeCommentsOP.Colspan = 2;
                    txtSafeCommentsOP.FixedHeight = 15;
                    tblSafetyPasd.AddCell(txtSafeCommentsOP);
                }
                multiColumn.AddElement(tblSafetyPasd);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "1BN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "2BC") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "4BA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "15BG") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "5BD") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "6BE") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "7BI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "8BH") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "9BN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "11BR") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "17BS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "18BT") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "19BP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "20BO") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "21BB") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "22BF") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "23BW") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "24BK") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "25BU") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "26BX") != "" ||
                        getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "12BO") != "" ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour_comments"].ToString())
                )
            {
                PdfPTable tblBehaviour = new PdfPTable(2);
                tblBehaviour.WidthPercentage = 100f;
                tblBehaviour.SetWidths(wthAssessed);

                tblBehaviour.AddCell(spaceCell1);

                PdfPCell Behaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Behaviour, fontHDBoldText));
                Behaviour.Colspan = 2;
                Behaviour.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblBehaviour.AddCell(Behaviour);

                PdfPCell Behaviour1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Behaviour, fontBoldText));
                Behaviour1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Behaviour1.HorizontalAlignment = Element.ALIGN_CENTER;
                Behaviour1.Colspan = 2;
                tblBehaviour.AddCell(Behaviour1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "1BN") != "")
                {
                    PdfPCell BehConcernsOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "1BN"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehConcernsOP);
                    PdfPCell BehConcerns = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NOConcerns, tableFont));
                    tblBehaviour.AddCell(BehConcerns);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "2BC") != "")
                {
                    PdfPCell BehCooperativeOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "2BC"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehCooperativeOP);
                    PdfPCell BehCooperative = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cooperative, tableFont));
                    tblBehaviour.AddCell(BehCooperative);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") != "")
                {
                    PdfPCell BehWandersOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehWandersOP);
                    PdfPCell BehWanders = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wanders, tableFont));
                    tblBehaviour.AddCell(BehWanders);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "4BA") != "")
                {
                    PdfPCell BehAgitatedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "4BA"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehAgitatedOP);
                    PdfPCell BehAgitated = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agitated, tableFont));
                    tblBehaviour.AddCell(BehAgitated);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "15BG") != "")
                {
                    PdfPCell BehAggressiveOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "15BG"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehAggressiveOP);
                    PdfPCell BehAggressive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Aggressive, tableFont));
                    tblBehaviour.AddCell(BehAggressive);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "5BD") != "")
                {
                    PdfPCell BehDepressionOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "5BD"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehDepressionOP);
                    PdfPCell BehDepression = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Depression, tableFont));
                    tblBehaviour.AddCell(BehDepression);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "6BE") != "")
                {
                    PdfPCell BehDemandingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "6BE"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehDemandingOP);
                    PdfPCell BehDemanding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Demanding, tableFont));
                    tblBehaviour.AddCell(BehDemanding);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "7BI") != "")
                {
                    PdfPCell BehDisruptiveOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "7BI"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehDisruptiveOP);
                    PdfPCell BehDisruptive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Disruptive, tableFont));
                    tblBehaviour.AddCell(BehDisruptive);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "8BH") != "")
                {
                    PdfPCell BehHoardingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "8BH"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehHoardingOP);
                    PdfPCell BehHoarding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Hoarding, tableFont));
                    tblBehaviour.AddCell(BehHoarding);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "9BN") != "")
                {
                    PdfPCell BehIneffectiveCopingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "9BN"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehIneffectiveCopingOP);
                    PdfPCell BehIneffectiveCoping = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IneffectiveCoping, tableFont));
                    tblBehaviour.AddCell(BehIneffectiveCoping);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP") != "")
                {
                    PdfPCell BehPotentialforinjurytoselforothersOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehPotentialforinjurytoselforothersOP);
                    PdfPCell BehPotentialforinjurytoselforothers = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PotentialforInjury, tableFont));
                    tblBehaviour.AddCell(BehPotentialforinjurytoselforothers);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "11BR") != "")
                {
                    PdfPCell BehResistsTreatmentorRefusesCareOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "11BR"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehResistsTreatmentorRefusesCareOP);
                    PdfPCell BehResistsTreatmentorRefusesCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResistsTreatment, tableFont));
                    tblBehaviour.AddCell(BehResistsTreatmentorRefusesCare);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "17BS") != "")
                {
                    PdfPCell BehSuspiciousOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "17BS"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehSuspiciousOP);
                    PdfPCell BehSuspicious = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suspicious, tableFont));
                    tblBehaviour.AddCell(BehSuspicious);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "18BT") != "")
                {
                    PdfPCell BehIngestForeignItemsOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "18BT"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehIngestForeignItemsOP);
                    PdfPCell BehIngestForeignItems = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IngestsForeignItems, tableFont));
                    tblBehaviour.AddCell(BehIngestForeignItems);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "19BP") != "")
                {
                    PdfPCell BehInappropriateSexualBehaviourOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "19BP"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehInappropriateSexualBehaviourOP);
                    PdfPCell BehInappropriateSexualBehaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InappropriateSexualBehaviour, tableFont));
                    tblBehaviour.AddCell(BehInappropriateSexualBehaviour);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "20BO") != "")
                {
                    PdfPCell BehInappropriateSmokingOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "20BO"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehInappropriateSmokingOP);
                    PdfPCell BehInappropriateSmoking = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InappropriateSmoking, tableFont));
                    tblBehaviour.AddCell(BehInappropriateSmoking);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "21BB") != "")
                {
                    PdfPCell BehSubstanceAbuseOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "21BB"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehSubstanceAbuseOP);
                    PdfPCell BehSubstanceAbuse = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SubstanceAbuse, tableFont));
                    tblBehaviour.AddCell(BehSubstanceAbuse);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "22BF") != "")
                {
                    PdfPCell BehRefusesResistsTxOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "22BF"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehRefusesResistsTxOP);
                    PdfPCell BehRefusesResistsTx = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RefusesResistsTx, tableFont));
                    tblBehaviour.AddCell(BehRefusesResistsTx);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "23BW") != "")
                {
                    PdfPCell BehSadDepressedWithdrawnOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "23BW"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehSadDepressedWithdrawnOP);
                    PdfPCell BehSadDepressedWithdrawn = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SadDepressedwithdrawn, tableFont));
                    tblBehaviour.AddCell(BehSadDepressedWithdrawn);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "24BK") != "")
                {
                    PdfPCell BehSeeksAttentionOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "24BK"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehSeeksAttentionOP);
                    PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SeeksAttention, tableFont));
                    tblBehaviour.AddCell(BehSeeksAttention);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "25BU") != "")
                {
                    PdfPCell BehSuicidalOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "25BU"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehSuicidalOP);
                    PdfPCell BehSuicidal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suicidal, tableFont));
                    tblBehaviour.AddCell(BehSuicidal);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "26BX") != "")
                {
                    PdfPCell BehAnxiousBehaviourOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "26BX"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehAnxiousBehaviourOP);
                    PdfPCell BehAnxiousBehaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AnxiousBehaviour, tableFont));
                    tblBehaviour.AddCell(BehAnxiousBehaviour);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "12BO") != "")
                {
                    PdfPCell BehOtherOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "12BO"), fontBoldTextOP));
                    tblBehaviour.AddCell(BehOtherOP);
                    PdfPCell BehOther = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, tableFont));
                    tblBehaviour.AddCell(BehOther);
                }

                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour_comments"].ToString()))
                {
                    PdfPCell txtBehComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtBehComments.Colspan = 2;
                    tblBehaviour.AddCell(txtBehComments);
                    PdfPCell txtBehCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour_comments"].ToString(), tableFont));
                    txtBehCommentsOP.Colspan = 2;
                    txtBehCommentsOP.FixedHeight = 60;
                    tblBehaviour.AddCell(txtBehCommentsOP);
                }
                multiColumn.AddElement(tblBehaviour);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "1SN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "2SD") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "9SA") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString()) ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "8CM") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication_comments"].ToString())
                )
            {
                PdfPTable tblCommunication = new PdfPTable(2);
                tblCommunication.WidthPercentage = 100f;
                tblCommunication.SetWidths(wthAssessed);
                tblCommunication.AddCell(spaceCell1);

                PdfPCell Communication = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Communication, fontHDBoldText));
                Communication.Colspan = 2;
                Communication.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblCommunication.AddCell(Communication);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "1SN") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "2SD") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "9SA") != "")
                {
                    PdfPCell Speech = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Speech, fontBoldText));
                    Speech.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Speech.HorizontalAlignment = Element.ALIGN_CENTER;
                    Speech.Colspan = 2;
                    tblCommunication.AddCell(Speech);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "1SN") != "")
                    {
                        PdfPCell SpeNormalOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "1SN"), fontBoldTextOP));
                        tblCommunication.AddCell(SpeNormalOP);
                        PdfPCell SpeNormal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Normal, tableFont));
                        tblCommunication.AddCell(SpeNormal);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "2SD") != "")
                    {
                        PdfPCell SpeDifficultyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "2SD"), fontBoldTextOP));
                        tblCommunication.AddCell(SpeDifficultyOP);
                        PdfPCell SpeDifficulty = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficulty, tableFont));
                        tblCommunication.AddCell(SpeDifficulty);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "9SA") != "")
                    {
                        PdfPCell SpeAphOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "9SA"), fontBoldTextOP));
                        tblCommunication.AddCell(SpeAphOP);
                        PdfPCell SpeAphOP1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Aphasia, tableFont));
                        tblCommunication.AddCell(SpeAphOP1);
                    }
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString()) ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "8CM") != "" ||
               !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication_comments"].ToString()))
                {
                    PdfPCell Communication1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Communicating, fontBoldText));
                    Communication1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Communication1.HorizontalAlignment = Element.ALIGN_CENTER;
                    Communication1.Colspan = 2;
                    tblCommunication.AddCell(Communication1);
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString()))
                    {
                        PdfPCell txtLanguageSpoken = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.LanguageSpoken, tableFont));
                        txtLanguageSpoken.Colspan = 2;
                        tblCommunication.AddCell(txtLanguageSpoken);
                        PdfPCell txtLanguageSpokenOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString(), tableFont));
                        txtLanguageSpokenOP.Colspan = 2;
                        txtLanguageSpokenOP.FixedHeight = 15;
                        tblCommunication.AddCell(txtLanguageSpokenOP);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL") != "")
                    {
                        PdfPCell SpeLanguagebarrierOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL"), fontBoldTextOP));
                        tblCommunication.AddCell(SpeLanguagebarrierOP);
                        PdfPCell SpeLanguagebarrier = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Languagebarrier, tableFont));
                        tblCommunication.AddCell(SpeLanguagebarrier);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU") != "")
                    {
                        PdfPCell SpeUnderstandsInstructionOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU"), fontBoldTextOP));
                        tblCommunication.AddCell(SpeUnderstandsInstructionOP);
                        PdfPCell SpeUnderstandsInstruction = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.UnderstandsInstruction, tableFont));
                        tblCommunication.AddCell(SpeUnderstandsInstruction);
                    }

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD") != "")
                    {
                        PdfPCell SpeDifficultyinCommunicatingbutUnderstandsOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD"), fontBoldTextOP));
                        tblCommunication.AddCell(SpeDifficultyinCommunicatingbutUnderstandsOP);
                        PdfPCell SpeDifficultyinCommunicatingbutUnderstands = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficultyincommunicating, tableFont));
                        tblCommunication.AddCell(SpeDifficultyinCommunicatingbutUnderstands);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI") != "")
                    {
                        PdfPCell SpeDifficultyinUnderstandingbutCommunicatesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI"), fontBoldTextOP));
                        tblCommunication.AddCell(SpeDifficultyinUnderstandingbutCommunicatesOP);
                        PdfPCell SpeDifficultyinUnderstandingbutCommunicates = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficultyinunderstanding, tableFont));
                        tblCommunication.AddCell(SpeDifficultyinUnderstandingbutCommunicates);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "8CM") != "")
                    {
                        PdfPCell SpeImpairedabilitytocommunicateorunderstandOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "8CM"), fontBoldTextOP));
                        tblCommunication.AddCell(SpeImpairedabilitytocommunicateorunderstandOP);
                        PdfPCell SpeImpairedabilitytocommunicateorunderstand = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Impairedabilitytocommunicate, tableFont));
                        tblCommunication.AddCell(SpeImpairedabilitytocommunicateorunderstand);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication_comments"].ToString()))
                    {
                        PdfPCell txtSpeComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                        txtSpeComments.Colspan = 2;
                        tblCommunication.AddCell(txtSpeComments);
                        PdfPCell txtSpeCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication_comments"].ToString(), tableFont));
                        txtSpeCommentsOP.Colspan = 2;
                        txtSpeCommentsOP.FixedHeight = 50;
                        tblCommunication.AddCell(txtSpeCommentsOP);
                    }
                    multiColumn.AddElement(tblCommunication);
                }
            }
            Phrase alcPhrase = new Phrase();
            string alcAmt = dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol_amt"].ToString().Trim();
            if (alcAmt != "" && alcAmt != "0")
            {
                decimal amtValue = Convert.ToDecimal(alcAmt);
                alcAmt = Math.Round(amtValue).ToString();
                ratePhrase = new Phrase(alcAmt, ProgressiveReport.font9);
            }

            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol"].ToString(), "Y") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol"].ToString(), "N") != "" ||
                (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol_amt"].ToString().Trim()) && alcAmt != "0") ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "1AY") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "2AN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "3DY") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "4DN") != ""
                )
            {
                PdfPTable tblAlcoholDruguse = new PdfPTable(2);
                tblAlcoholDruguse.WidthPercentage = 100f;
                tblAlcoholDruguse.SetWidths(wthAssessed);

                tblAlcoholDruguse.AddCell(spaceCell1);

                PdfPCell AlcoholDruguse = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AlcoholDrugUse, fontHDBoldText));
                AlcoholDruguse.Colspan = 2;
                AlcoholDruguse.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblAlcoholDruguse.AddCell(AlcoholDruguse);

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol"].ToString(), "Y") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol"].ToString(), "N") != "" ||
                    !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol_amt"].ToString())
                    )
                {
                    PdfPCell Alcohol = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Alcohol, fontBoldText));
                    Alcohol.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Alcohol.HorizontalAlignment = Element.ALIGN_CENTER;
                    Alcohol.Colspan = 2;
                    tblAlcoholDruguse.AddCell(Alcohol);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol"].ToString(), "Y") != "")
                    {
                        PdfPCell AlcYesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol"].ToString(), "Y"), fontBoldTextOP));
                        tblAlcoholDruguse.AddCell(AlcYesOP);
                        PdfPCell AlcYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                        tblAlcoholDruguse.AddCell(AlcYes);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol"].ToString(), "N") != "")
                    {
                        PdfPCell AlcNoOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol"].ToString(), "N"), fontBoldTextOP));
                        tblAlcoholDruguse.AddCell(AlcNoOP);
                        PdfPCell AlcNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                        tblAlcoholDruguse.AddCell(AlcNo);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol_amt"].ToString()))
                    {
                        PdfPTable tblAlcohol = new PdfPTable(2);
                        tblAlcohol.WidthPercentage = 100f;
                        tblAlcohol.SetWidths(new float[] { 4f, 4f });

                        int unit = Convert.ToInt16(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol_unit"].ToString());
                        string alcoholUnit = "";
                        if (unit > 0)
                        {
                            string[] alcohol = { "", "Drinks", "Sips", "Shots" };
                            alcoholUnit = alcohol[unit];
                        }
                        PdfPCell txtAlcAmt = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Amt, tableFont));
                        tblAlcohol.AddCell(txtAlcAmt);

                        PdfPCell txtAlcoholMeasuremenText = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unit, tableFont));
                        tblAlcohol.AddCell(txtAlcoholMeasuremenText);

                        PdfPCell txtAlcAmtOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_alcohol_amt"].ToString(), tableFont));
                        txtAlcAmtOP.FixedHeight = 15;
                        tblAlcohol.AddCell(txtAlcAmtOP);

                        PdfPCell txtAlcUnitOP = new PdfPCell(new Phrase(alcoholUnit, tableFont));
                        txtAlcUnitOP.FixedHeight = 15;
                        tblAlcohol.AddCell(txtAlcUnitOP);

                        PdfPCell alcoholCell = new PdfPCell(tblAlcohol);
                        alcoholCell.Colspan = 2;
                        tblAlcoholDruguse.AddCell(alcoholCell);
                    }
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "1AY") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "2AN") != "")
                {
                    PdfPCell Abusealcohol = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Abusealcohol, fontBoldText));
                    Abusealcohol.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Abusealcohol.HorizontalAlignment = Element.ALIGN_CENTER;
                    Abusealcohol.Colspan = 2;
                    tblAlcoholDruguse.AddCell(Abusealcohol);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "1AY") != "")
                    {
                        PdfPCell AbuYesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "1AY"), fontBoldTextOP));
                        tblAlcoholDruguse.AddCell(AbuYesOP);
                        PdfPCell AbuYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                        tblAlcoholDruguse.AddCell(AbuYes);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "2AN") != "")
                    {
                        PdfPCell AbuNoOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "2AN"), fontBoldTextOP));
                        tblAlcoholDruguse.AddCell(AbuNoOP);
                        PdfPCell AbuNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                        tblAlcoholDruguse.AddCell(AbuNo);
                    }
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "3DY") != "" ||
                    getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "4DN") != "")
                {
                    PdfPCell Abusedrugs = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Abusedrugs, fontBoldText));
                    Abusedrugs.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Abusedrugs.HorizontalAlignment = Element.ALIGN_CENTER;
                    Abusedrugs.Colspan = 2;
                    tblAlcoholDruguse.AddCell(Abusedrugs);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "3DY") != "")
                    {
                        PdfPCell AbusYesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "3DY"), fontBoldTextOP));
                        tblAlcoholDruguse.AddCell(AbusYesOP);
                        PdfPCell AbusYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                        tblAlcoholDruguse.AddCell(AbusYes);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "4DN") != "")
                    {
                        PdfPCell AbusNoOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_AD_abuse"].ToString(), "4DN"), fontBoldTextOP));
                        tblAlcoholDruguse.AddCell(AbusNoOP);
                        PdfPCell AbusNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                        tblAlcoholDruguse.AddCell(AbusNo);
                    }
                }
                multiColumn.AddElement(tblAlcoholDruguse);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "1SEN") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_pendant"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_ted_stocking"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_support_brace"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_others"].ToString())
                )
            {
                PdfPTable tblSpecialEquipments = new PdfPTable(2);
                tblSpecialEquipments.WidthPercentage = 100f;
                tblSpecialEquipments.SetWidths(wthAssessed);

                tblSpecialEquipments.AddCell(spaceCell1);

                PdfPCell SpecialEquipments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialEquipments, fontHDBoldText));
                SpecialEquipments.Colspan = 2;
                SpecialEquipments.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblSpecialEquipments.AddCell(SpecialEquipments);

                PdfPCell SpecialEquipments1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialEquipments, fontBoldText));
                SpecialEquipments1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                SpecialEquipments1.HorizontalAlignment = Element.ALIGN_CENTER;
                SpecialEquipments1.Colspan = 2;
                tblSpecialEquipments.AddCell(SpecialEquipments1);

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "1SEN") != "")
                {
                    PdfPCell AbusNAOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "1SEN"), fontBoldTextOP));
                    tblSpecialEquipments.AddCell(AbusNAOP);
                    PdfPCell AbusNA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    tblSpecialEquipments.AddCell(AbusNA);
                }


                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_pendant"].ToString()))
                {
                    PdfPCell txtSpePendant = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pendant, tableFont));
                    txtSpePendant.Colspan = 2;
                    tblSpecialEquipments.AddCell(txtSpePendant);
                    PdfPCell txtSpePendantOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_pendant"].ToString(), tableFont));
                    txtSpePendantOP.Colspan = 2;
                    txtSpePendantOP.FixedHeight = 15;
                    tblSpecialEquipments.AddCell(txtSpePendantOP);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_ted_stocking"].ToString()))
                {
                    PdfPCell txtSpeTEDstocking = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TEDstocking, tableFont));
                    txtSpeTEDstocking.Colspan = 2;
                    tblSpecialEquipments.AddCell(txtSpeTEDstocking);
                    PdfPCell txtSpeTEDstockingOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_ted_stocking"].ToString(), tableFont));
                    txtSpeTEDstockingOP.Colspan = 2;
                    txtSpeTEDstockingOP.FixedHeight = 15;
                    tblSpecialEquipments.AddCell(txtSpeTEDstockingOP);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_support_brace"].ToString()))
                {
                    PdfPCell txtSpeSupportbrace = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supportbrace, tableFont));
                    txtSpeSupportbrace.Colspan = 2;
                    tblSpecialEquipments.AddCell(txtSpeSupportbrace);
                    PdfPCell txtSpeSupportbraceOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_support_brace"].ToString(), tableFont));
                    txtSpeSupportbraceOP.Colspan = 2;
                    txtSpeSupportbraceOP.FixedHeight = 15;
                    tblSpecialEquipments.AddCell(txtSpeSupportbraceOP);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_others"].ToString()))
                {
                    PdfPCell txtSpeOthers = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Others, tableFont));
                    txtSpeOthers.Colspan = 2;
                    tblSpecialEquipments.AddCell(txtSpeOthers);
                    PdfPCell txtSpeOthersOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_others"].ToString(), tableFont));
                    txtSpeOthersOP.Colspan = 2;
                    txtSpeOthersOP.FixedHeight = 15;
                    tblSpecialEquipments.AddCell(txtSpeOthersOP);
                }
                multiColumn.AddElement(tblSpecialEquipments);
            }

            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_level_of_care"].ToString(), "1LT") != "" ||
                 getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_level_of_care"].ToString(), "2LP") != "" ||
                 getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_level_of_care"].ToString(), "3LI") != ""
                 )
            {
                PdfPTable tblLevelofCare = new PdfPTable(2);
                tblLevelofCare.WidthPercentage = 100f;
                tblLevelofCare.SetWidths(wthAssessed);

                tblLevelofCare.AddCell(spaceCell1);

                PdfPCell LevelofCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CareNeeds, fontHDBoldText));
                LevelofCare.Colspan = 2;
                LevelofCare.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblLevelofCare.AddCell(LevelofCare);

                PdfPCell LevelofCare1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CareNeeds, fontBoldText));
                LevelofCare1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                LevelofCare1.HorizontalAlignment = Element.ALIGN_CENTER;
                LevelofCare1.Colspan = 2;
                tblLevelofCare.AddCell(LevelofCare1);

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_level_of_care"].ToString(), "1LT") != "")
                {
                    PdfPCell TotcareOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_level_of_care"].ToString(), "1LT"), fontBoldTextOP));
                    tblLevelofCare.AddCell(TotcareOP);
                    PdfPCell Totcare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TotalCare, tableFont));
                    tblLevelofCare.AddCell(Totcare);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_level_of_care"].ToString(), "2LP") != "")
                {
                    PdfPCell PartialOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_level_of_care"].ToString(), "2LP"), fontBoldTextOP));
                    tblLevelofCare.AddCell(PartialOP);
                    PdfPCell Partial = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PartialAssist, tableFont));
                    tblLevelofCare.AddCell(Partial);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_level_of_care"].ToString(), "3LI") != "")
                {
                    PdfPCell PartialOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_level_of_care"].ToString(), "3LI"), fontBoldTextOP));
                    tblLevelofCare.AddCell(PartialOP);
                    PdfPCell Partial = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    tblLevelofCare.AddCell(Partial);
                }


                multiColumn.AddElement(tblLevelofCare);
            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_news_paper"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_laundry"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_CCAC"].ToString()))
            {
                PdfPTable tblGeneralInformation = new PdfPTable(2);
                tblGeneralInformation.WidthPercentage = 100f;
                tblGeneralInformation.SetWidths(wthAssessed);

                tblGeneralInformation.AddCell(spaceCell1);

                PdfPCell GeneralInformation = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.GeneralInformation, fontHDBoldText));
                GeneralInformation.Colspan = 2;
                GeneralInformation.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblGeneralInformation.AddCell(GeneralInformation);

                PdfPCell GeneralInformation1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.GeneralInformation, fontBoldText));
                GeneralInformation1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                GeneralInformation1.HorizontalAlignment = Element.ALIGN_CENTER;
                GeneralInformation1.Colspan = 2;
                tblGeneralInformation.AddCell(GeneralInformation1);

                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_news_paper"].ToString()))
                {
                    PdfPCell txtGenNewsPaper = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NewsPaper, tableFont));
                    txtGenNewsPaper.Colspan = 2;
                    tblGeneralInformation.AddCell(txtGenNewsPaper);
                    PdfPCell txtGenNewsPaperOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_news_paper"].ToString(), tableFont));
                    txtGenNewsPaperOP.Colspan = 2;
                    txtGenNewsPaperOP.FixedHeight = 15;
                    tblGeneralInformation.AddCell(txtGenNewsPaperOP);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_laundry"].ToString()))
                {
                    PdfPCell txtGenLaundry = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Laundry, tableFont));
                    txtGenLaundry.Colspan = 2;
                    tblGeneralInformation.AddCell(txtGenLaundry);
                    PdfPCell txtGenLaundryOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_laundry"].ToString(), tableFont));
                    txtGenLaundryOP.Colspan = 2;
                    txtGenLaundryOP.FixedHeight = 15;
                    tblGeneralInformation.AddCell(txtGenLaundryOP);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_CCAC"].ToString()))
                {
                    PdfPCell txtGenCCAC = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CCAC, tableFont));
                    txtGenCCAC.Colspan = 2;
                    tblGeneralInformation.AddCell(txtGenCCAC);
                    PdfPCell txtGenCCACOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_CCAC"].ToString(), tableFont));
                    txtGenCCACOP.Colspan = 2;
                    txtGenCCACOP.FixedHeight = 15;
                    tblGeneralInformation.AddCell(txtGenCCACOP);
                }
                multiColumn.AddElement(tblGeneralInformation);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "1RY") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "2RN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "3IY") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "4IN") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "5RS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "6RN") != ""
                )
            {
                PdfPTable tblActivities = new PdfPTable(2);
                tblActivities.WidthPercentage = 100f;
                tblActivities.SetWidths(wthAssessed);

                tblActivities.AddCell(spaceCell1);

                PdfPCell Activities = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Activities, fontHDBoldText));
                Activities.Colspan = 2;
                Activities.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblActivities.AddCell(Activities);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "1RY") != "" ||
               getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "2RN") != "")
                {
                    PdfPCell AttendsProgramsRegularly = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AttendsProgramsRegularly, fontBoldText));
                    AttendsProgramsRegularly.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AttendsProgramsRegularly.HorizontalAlignment = Element.ALIGN_CENTER;
                    AttendsProgramsRegularly.Colspan = 2;
                    tblActivities.AddCell(AttendsProgramsRegularly);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "1RY") != "")
                    {
                        PdfPCell AttYesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "1RY"), fontBoldTextOP));
                        tblActivities.AddCell(AttYesOP);
                        PdfPCell AttYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                        tblActivities.AddCell(AttYes);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "2RN") != "")
                    {
                        PdfPCell AttNoOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "2RN"), fontBoldTextOP));
                        tblActivities.AddCell(AttNoOP);
                        PdfPCell AttNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                        tblActivities.AddCell(AttNo);
                    }
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "3IY") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "4IN") != "")
                {
                    PdfPCell AttendsIndependently = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AttendsIndependently, fontBoldText));
                    AttendsIndependently.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AttendsIndependently.HorizontalAlignment = Element.ALIGN_CENTER;
                    AttendsIndependently.Colspan = 2;
                    tblActivities.AddCell(AttendsIndependently);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "3IY") != "")
                    {
                        PdfPCell AtIYesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "3IY"), fontBoldTextOP));
                        tblActivities.AddCell(AtIYesOP);
                        PdfPCell AtIYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                        tblActivities.AddCell(AtIYes);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "4IN") != "")
                    {
                        PdfPCell AtINoOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "4IN"), fontBoldTextOP));
                        tblActivities.AddCell(AtINoOP);
                        PdfPCell AtINo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                        tblActivities.AddCell(AtINo);
                    }
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "5RS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "6RN") != "")
                {
                    PdfPCell RemindingRequired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RemindingRequired, fontBoldText));
                    RemindingRequired.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    RemindingRequired.HorizontalAlignment = Element.ALIGN_CENTER;
                    RemindingRequired.Colspan = 2;
                    tblActivities.AddCell(RemindingRequired);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "5RS") != "")
                    {
                        PdfPCell RemYesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "5RS"), fontBoldTextOP));
                        tblActivities.AddCell(RemYesOP);
                        PdfPCell RemYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                        tblActivities.AddCell(RemYes);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "6RN") != "")
                    {
                        PdfPCell RemNoOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_activities"].ToString(), "6RN"), fontBoldTextOP));
                        tblActivities.AddCell(RemNoOP);
                        PdfPCell RemNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                        tblActivities.AddCell(RemNo);
                    }
                }
                multiColumn.AddElement(tblActivities);
            }

            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "1OP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "2OS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "3OW") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "4OA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "5OP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "6PP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "7PW") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "8PA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "9PP") != ""
              )
            {
                PdfPTable tblOTPT = new PdfPTable(2);
                tblOTPT.WidthPercentage = 100f;
                tblOTPT.SetWidths(wthAssessed);
                tblOTPT.AddCell(spaceCell1);

                PdfPCell OTPT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OTPT, fontHDBoldText));
                OTPT.Colspan = 2;
                OTPT.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblOTPT.AddCell(OTPT);

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "1OP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "2OS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "3OW") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "4OA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "5OP") != "")
                {

                    PdfPCell OT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OT, fontBoldText));
                    OT.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    OT.HorizontalAlignment = Element.ALIGN_CENTER;
                    OT.Colspan = 2;
                    tblOTPT.AddCell(OT);
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "1OP") != "")
                    {
                        PdfPCell PhysioOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "1OP"), fontBoldTextOP));
                        tblOTPT.AddCell(PhysioOP);
                        PdfPCell Physio = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Physio, tableFont));
                        tblOTPT.AddCell(Physio);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "2OS") != "")
                    {
                        PdfPCell ProgramstartedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "2OS"), fontBoldTextOP));
                        tblOTPT.AddCell(ProgramstartedOP);
                        PdfPCell Programstarted = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Programstarted, tableFont));
                        tblOTPT.AddCell(Programstarted);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "3OW") != "")
                    {
                        PdfPCell WeeklyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "3OW"), fontBoldTextOP));
                        tblOTPT.AddCell(WeeklyOP);
                        PdfPCell WeeklyOPA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Weeklyscheduled, tableFont));
                        tblOTPT.AddCell(WeeklyOPA);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "4OA") != "")
                    {
                        PdfPCell AgancyOTPT = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "4OA"), fontBoldTextOP));
                        tblOTPT.AddCell(AgancyOTPT);
                        PdfPCell AgancyOT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
                        tblOTPT.AddCell(AgancyOT);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "5OP") != "")
                    {
                        PdfPCell PrivateOTPT = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "5OP"), fontBoldTextOP));
                        tblOTPT.AddCell(PrivateOTPT);
                        PdfPCell PrivateOT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Private, tableFont));
                        tblOTPT.AddCell(PrivateOT);
                    }


                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "6PP") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "7PW") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "8PA") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "9PP") != "")
                {
                    PdfPCell PT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PT, fontBoldText));
                    PT.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    PT.HorizontalAlignment = Element.ALIGN_CENTER;
                    PT.Colspan = 2;
                    tblOTPT.AddCell(PT);

                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "6PP") != "")
                    {
                        PdfPCell ProgramstartedOPOT = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "6PP"), fontBoldTextOP));
                        tblOTPT.AddCell(ProgramstartedOPOT);
                        PdfPCell ProgramstartedPT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Programstarted, tableFont));
                        tblOTPT.AddCell(ProgramstartedPT);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "7PW") != "")
                    {
                        PdfPCell WeeklyOPOT = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "7PW"), fontBoldTextOP));
                        tblOTPT.AddCell(WeeklyOPOT);
                        PdfPCell WeeklyOPAPT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Weeklyscheduled, tableFont));
                        tblOTPT.AddCell(WeeklyOPAPT);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "8PA") != "")
                    {
                        PdfPCell AgancyPT = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "8PA"), fontBoldTextOP));
                        tblOTPT.AddCell(AgancyPT);
                        PdfPCell AgancyOTPT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
                        tblOTPT.AddCell(AgancyOTPT);
                    }
                    if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "9PP") != "")
                    {
                        PdfPCell PrivatePT = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "9PP"), fontBoldTextOP));
                        tblOTPT.AddCell(PrivatePT);
                        PdfPCell PrivateOTPT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Private, tableFont));
                        tblOTPT.AddCell(PrivateOTPT);
                    }

                }
                multiColumn.AddElement(tblOTPT);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "1RPL") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "2RPS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "3RP1") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "4RPF") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_activity_preferences"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_exercise_group"].ToString())
                )
            {
                PdfPTable tblRecreationPrograms = new PdfPTable(2);
                tblRecreationPrograms.WidthPercentage = 100f;
                tblRecreationPrograms.SetWidths(wthAssessed);
                tblRecreationPrograms.AddCell(spaceCell1);

                PdfPCell RecreationPrograms = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RecreationPrograms, fontHDBoldText));
                RecreationPrograms.Colspan = 2;
                RecreationPrograms.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblRecreationPrograms.AddCell(RecreationPrograms);
                PdfPCell ParticipationToProgram = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ParticipationToProgram, fontBoldText));
                ParticipationToProgram.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                ParticipationToProgram.HorizontalAlignment = Element.ALIGN_CENTER;
                ParticipationToProgram.Colspan = 2;
                tblRecreationPrograms.AddCell(ParticipationToProgram);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "1RPL") != "")
                {
                    PdfPCell ParLargeGroupOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "1RPL"), fontBoldTextOP));
                    tblRecreationPrograms.AddCell(ParLargeGroupOP);
                    PdfPCell ParLargeGroup = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.LargeGroup, tableFont));
                    tblRecreationPrograms.AddCell(ParLargeGroup);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "2RPS") != "")
                {
                    PdfPCell ParSmallGroupOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "2RPS"), fontBoldTextOP));
                    tblRecreationPrograms.AddCell(ParSmallGroupOP);
                    PdfPCell ParSmallGroup = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SmallGroup, tableFont));
                    tblRecreationPrograms.AddCell(ParSmallGroup);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "3RP1") != "")
                {
                    PdfPCell ParL1OP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "3RP1"), fontBoldTextOP));
                    tblRecreationPrograms.AddCell(ParL1OP);
                    PdfPCell ParL1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.L1, tableFont));
                    tblRecreationPrograms.AddCell(ParL1);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "4RPF") != "")
                {
                    PdfPCell ParFamilyOnlyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_recreation_programs"].ToString(), "4RPF"), fontBoldTextOP));
                    tblRecreationPrograms.AddCell(ParFamilyOnlyOP);
                    PdfPCell ParFamilyOnly = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilyOnly, tableFont));
                    tblRecreationPrograms.AddCell(ParFamilyOnly);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_activity_preferences"].ToString()))
                {
                    PdfPCell txtParActivityPreferences = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ActivityPreferences, tableFont));
                    txtParActivityPreferences.Colspan = 2;
                    tblRecreationPrograms.AddCell(txtParActivityPreferences);
                    PdfPCell txtParActivityPreferencesOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_activity_preferences"].ToString(), tableFont));
                    txtParActivityPreferencesOP.Colspan = 2;
                    txtParActivityPreferencesOP.FixedHeight = 50;
                    tblRecreationPrograms.AddCell(txtParActivityPreferencesOP);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_exercise_group"].ToString()))
                {
                    PdfPCell txtParExerciseGroup = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ExerciseGroup, tableFont));
                    txtParExerciseGroup.Colspan = 2;
                    tblRecreationPrograms.AddCell(txtParExerciseGroup);
                    PdfPCell txtParExerciseGroupOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_exercise_group"].ToString(), tableFont));
                    txtParExerciseGroupOP.Colspan = 2;
                    txtParExerciseGroupOP.FixedHeight = 50;
                    tblRecreationPrograms.AddCell(txtParExerciseGroupOP);
                }
                multiColumn.AddElement(tblRecreationPrograms);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_spiritual"].ToString(), "1EI") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_spiritual"].ToString(), "2ER") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_spiritual_phone"].ToString()))
            {
                PdfPTable tblSpiritual = new PdfPTable(2);
                tblSpiritual.WidthPercentage = 100f;
                tblSpiritual.SetWidths(wthAssessed);

                tblSpiritual.AddCell(spaceCell1);

                PdfPCell Spiritual = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Spiritual, fontHDBoldText));
                Spiritual.Colspan = 2;
                Spiritual.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblSpiritual.AddCell(Spiritual);

                PdfPCell Spiritual1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Spiritual, fontBoldText));
                Spiritual1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Spiritual1.HorizontalAlignment = Element.ALIGN_CENTER;
                Spiritual1.Colspan = 2;
                tblSpiritual.AddCell(Spiritual1);

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_spiritual"].ToString(), "1EI") != "")
                {
                    PdfPCell SpiAttendsServicesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_spiritual"].ToString(), "1EI"), fontBoldTextOP));
                    tblSpiritual.AddCell(SpiAttendsServicesOP);
                    PdfPCell SpiAttendsServices = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AttendsServices, tableFont));
                    tblSpiritual.AddCell(SpiAttendsServices);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_spiritual"].ToString(), "2ER") != "")
                {
                    PdfPCell SpiSpecialNeedsOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_spiritual"].ToString(), "2ER"), fontBoldTextOP));
                    tblSpiritual.AddCell(SpiSpecialNeedsOP);
                    PdfPCell SpiSpecialNeeds = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialNeeds, tableFont));
                    tblSpiritual.AddCell(SpiSpecialNeeds);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_spiritual_phone"].ToString()))
                {
                    PdfPCell txtSpiPhone = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Phone + " #", tableFont));
                    txtSpiPhone.Colspan = 2;
                    tblSpiritual.AddCell(txtSpiPhone);

                    PdfPCell txtSpiPhoneOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_spiritual_phone"].ToString(), tableFont));
                    txtSpiPhoneOP.Colspan = 2;
                    txtSpiPhoneOP.FixedHeight = 15;
                    tblSpiritual.AddCell(txtSpiPhoneOP);
                }
                multiColumn.AddElement(tblSpiritual);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "1MS") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "2ML") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "3MA") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MA_pharmacy"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MA_injections"].ToString()) ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "4MB") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "5MI") != ""
                )
            {
                PdfPTable tblMedicationAdministration = new PdfPTable(2);
                tblMedicationAdministration.WidthPercentage = 100f;
                tblMedicationAdministration.SetWidths(wthAssessed);

                tblMedicationAdministration.AddCell(spaceCell1);

                PdfPCell MedicationAdministration = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MedicationAdministration, fontHDBoldText));
                MedicationAdministration.Colspan = 2;
                MedicationAdministration.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblMedicationAdministration.AddCell(MedicationAdministration);

                PdfPCell MedicationAdministration1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MedicationAdministration, fontBoldText));
                MedicationAdministration1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                MedicationAdministration1.HorizontalAlignment = Element.ALIGN_CENTER;
                MedicationAdministration1.Colspan = 2;
                tblMedicationAdministration.AddCell(MedicationAdministration1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "1MS") != "")
                {
                    PdfPCell MedSelfAdministrationOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "1MS"), fontBoldTextOP));
                    tblMedicationAdministration.AddCell(MedSelfAdministrationOP);
                    PdfPCell MedSelfAdministration = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SelfAdministration, tableFont));
                    tblMedicationAdministration.AddCell(MedSelfAdministration);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "2ML") != "")
                {
                    PdfPCell MedAdministeredbyHomeStaffOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "2ML"), fontBoldTextOP));
                    tblMedicationAdministration.AddCell(MedAdministeredbyHomeStaffOP);
                    PdfPCell MedAdministeredbyHomeStaff = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AdministeredbyHomeStaff, tableFont));
                    tblMedicationAdministration.AddCell(MedAdministeredbyHomeStaff);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "3MA") != "")
                {
                    PdfPCell MedAdministeredbyAgencyStaffOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "3MA"), fontBoldTextOP));
                    tblMedicationAdministration.AddCell(MedAdministeredbyAgencyStaffOP);
                    PdfPCell MedAdministeredbyAgencyStaff = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AdministeredbyAgencyStaff, tableFont));
                    tblMedicationAdministration.AddCell(MedAdministeredbyAgencyStaff);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "4MB") != "")
                {
                    PdfPCell MedAdmB = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "4MB"), fontBoldTextOP));
                    tblMedicationAdministration.AddCell(MedAdmB);
                    PdfPCell MedAdmBNAme = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.B12, tableFont));
                    tblMedicationAdministration.AddCell(MedAdmBNAme);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "5MI") != "")
                {
                    PdfPCell MedAdmInsu = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "5MI"), fontBoldTextOP));
                    tblMedicationAdministration.AddCell(MedAdmInsu);
                    PdfPCell MedAdmInsui = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Insuiln, tableFont));
                    tblMedicationAdministration.AddCell(MedAdmInsui);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MA_pharmacy"].ToString()))
                {
                    PdfPCell txtMedPharmacyprovider = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pharmacyprovider, tableFont));
                    txtMedPharmacyprovider.Colspan = 2;
                    tblMedicationAdministration.AddCell(txtMedPharmacyprovider);
                    PdfPCell txtMedPharmacyproviderOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_MA_pharmacy"].ToString(), tableFont));
                    txtMedPharmacyproviderOP.Colspan = 2;
                    txtMedPharmacyproviderOP.FixedHeight = 50;
                    tblMedicationAdministration.AddCell(txtMedPharmacyproviderOP);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MA_injections"].ToString()))
                {
                    PdfPCell txtMedInjectionsIfyesexplain = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Others, tableFont));
                    txtMedInjectionsIfyesexplain.Colspan = 2;
                    tblMedicationAdministration.AddCell(txtMedInjectionsIfyesexplain);
                    PdfPCell txtMedInjectionsIfyesexplainOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_MA_injections"].ToString(), tableFont));
                    txtMedInjectionsIfyesexplainOP.Colspan = 2;
                    txtMedInjectionsIfyesexplainOP.FixedHeight = 50;
                    tblMedicationAdministration.AddCell(txtMedInjectionsIfyesexplainOP);
                }


                multiColumn.AddElement(tblMedicationAdministration);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_advanced_directive_completed"].ToString(), "Y") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_advanced_directive_completed"].ToString(), "N") != "")
            {
                PdfPTable tblAdvancedDirectiveCompleted = new PdfPTable(2);
                tblAdvancedDirectiveCompleted.WidthPercentage = 100f;
                tblAdvancedDirectiveCompleted.SetWidths(wthAssessed);

                tblAdvancedDirectiveCompleted.AddCell(spaceCell1);

                PdfPCell AdvancedDirectiveCompleted = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AdvancedDirectiveCompleted, fontHDBoldText));
                AdvancedDirectiveCompleted.Colspan = 2;
                AdvancedDirectiveCompleted.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblAdvancedDirectiveCompleted.AddCell(AdvancedDirectiveCompleted);

                PdfPCell AdvancedDirectiveCompleted1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AdvancedDirectiveCompleted, fontBoldText));
                AdvancedDirectiveCompleted1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                AdvancedDirectiveCompleted1.HorizontalAlignment = Element.ALIGN_CENTER;
                AdvancedDirectiveCompleted1.Colspan = 2;
                tblAdvancedDirectiveCompleted.AddCell(AdvancedDirectiveCompleted1);

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_advanced_directive_completed"].ToString(), "Y") != "")
                {
                    PdfPCell AdvYesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_advanced_directive_completed"].ToString(), "Y"), fontBoldTextOP));
                    tblAdvancedDirectiveCompleted.AddCell(AdvYesOP);
                    PdfPCell AdvYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                    tblAdvancedDirectiveCompleted.AddCell(AdvYes);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_advanced_directive_completed"].ToString(), "N") != "")
                {
                    PdfPCell AdvNoOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_advanced_directive_completed"].ToString(), "N"), fontBoldTextOP));
                    tblAdvancedDirectiveCompleted.AddCell(AdvNoOP);
                    PdfPCell AdvNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                    tblAdvancedDirectiveCompleted.AddCell(AdvNo);
                }
                multiColumn.AddElement(tblAdvancedDirectiveCompleted);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "Y") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "N") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_agency_servicing"].ToString()) ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_comments"].ToString())
                )
            {
                PdfPTable tblWoundcare = new PdfPTable(2);
                tblWoundcare.WidthPercentage = 100f;
                tblWoundcare.SetWidths(wthAssessed);

                tblWoundcare.AddCell(spaceCell1);

                PdfPCell Woundcare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Woundcare, fontHDBoldText));
                Woundcare.Colspan = 2;
                Woundcare.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblWoundcare.AddCell(Woundcare);

                PdfPCell Woundcare1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Woundcare, fontBoldText));
                Woundcare1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Woundcare1.HorizontalAlignment = Element.ALIGN_CENTER;
                Woundcare1.Colspan = 2;
                tblWoundcare.AddCell(Woundcare1);

                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "Y") != "")
                {
                    PdfPCell WoYesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "Y"), fontBoldTextOP));
                    tblWoundcare.AddCell(WoYesOP);
                    PdfPCell WoYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                    tblWoundcare.AddCell(WoYes);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "N") != "")
                {
                    PdfPCell WoNoOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "N"), fontBoldTextOP));
                    tblWoundcare.AddCell(WoNoOP);
                    PdfPCell WoNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                    tblWoundcare.AddCell(WoNo);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_agency_servicing"].ToString()))
                {

                    PdfPCell txtWCAgencyservicing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agencyservicing, tableFont));
                    txtWCAgencyservicing.Colspan = 2;
                    tblWoundcare.AddCell(txtWCAgencyservicing);
                    PdfPCell txtWCAgencyservicingOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_agency_servicing"].ToString(), tableFont));
                    txtWCAgencyservicingOP.Colspan = 2;
                    txtWCAgencyservicingOP.FixedHeight = 70;
                    tblWoundcare.AddCell(txtWCAgencyservicingOP);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_comments"].ToString()))
                {
                    PdfPCell txtWCComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtWCComments.Colspan = 2;
                    tblWoundcare.AddCell(txtWCComments);
                    PdfPCell txtWCCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_comments"].ToString(), tableFont));
                    txtWCCommentsOP.Colspan = 2;
                    txtWCCommentsOP.FixedHeight = 70;
                    tblWoundcare.AddCell(txtWCCommentsOP);
                }
                multiColumn.AddElement(tblWoundcare);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "Y") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "N") != ""
                )
            {
                PdfPTable tblResidentFamilymeetingtobearranged = new PdfPTable(2);
                tblResidentFamilymeetingtobearranged.WidthPercentage = 100f;
                tblResidentFamilymeetingtobearranged.SetWidths(wthAssessed);

                tblResidentFamilymeetingtobearranged.AddCell(spaceCell1);

                PdfPCell ResidentFamilymeetingtobearranged = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentFamilymeetingtobearranged, fontHDBoldText));
                ResidentFamilymeetingtobearranged.Colspan = 2;
                ResidentFamilymeetingtobearranged.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblResidentFamilymeetingtobearranged.AddCell(ResidentFamilymeetingtobearranged);

                PdfPCell ResidentFamilymeetingtobearranged1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentFamilymeetingtobearranged, fontBoldText));
                ResidentFamilymeetingtobearranged1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                ResidentFamilymeetingtobearranged1.HorizontalAlignment = Element.ALIGN_CENTER;
                ResidentFamilymeetingtobearranged1.Colspan = 2;
                tblResidentFamilymeetingtobearranged.AddCell(ResidentFamilymeetingtobearranged1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "Y") != "")
                {
                    PdfPCell ResYesOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "Y"), fontBoldTextOP));
                    tblResidentFamilymeetingtobearranged.AddCell(ResYesOP);
                    PdfPCell ResYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                    tblResidentFamilymeetingtobearranged.AddCell(ResYes);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "N") != "")
                {
                    PdfPCell ResNoOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "N"), fontBoldTextOP));
                    tblResidentFamilymeetingtobearranged.AddCell(ResNoOP);
                    PdfPCell ResNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                    tblResidentFamilymeetingtobearranged.AddCell(ResNo);
                }
                multiColumn.AddElement(tblResidentFamilymeetingtobearranged);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "1ID") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "2IW") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "3IM") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "4IN") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_involvement_comment"].ToString())
                )
            {
                PdfPTable tblFamilyInvolvement = new PdfPTable(2);
                tblFamilyInvolvement.WidthPercentage = 100f;
                tblFamilyInvolvement.SetWidths(wthAssessed);

                tblFamilyInvolvement.AddCell(spaceCell1);

                PdfPCell FamilyInvolvement = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilyInvolement, fontHDBoldText));
                FamilyInvolvement.Colspan = 2;
                FamilyInvolvement.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblFamilyInvolvement.AddCell(FamilyInvolvement);

                PdfPCell FamilyInvolvement1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilyInvolement, fontBoldText));
                FamilyInvolvement1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                FamilyInvolvement1.HorizontalAlignment = Element.ALIGN_CENTER;
                FamilyInvolvement1.Colspan = 2;
                tblFamilyInvolvement.AddCell(FamilyInvolvement1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "1ID") != "")
                {
                    PdfPCell FamDailyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "1ID"), fontBoldTextOP));
                    tblFamilyInvolvement.AddCell(FamDailyOP);
                    PdfPCell FamDaily = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.daily, tableFont));
                    tblFamilyInvolvement.AddCell(FamDaily);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "2IW") != "")
                {
                    PdfPCell FamWeeklyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "2IW"), fontBoldTextOP));
                    tblFamilyInvolvement.AddCell(FamWeeklyOP);
                    PdfPCell FamWeekly = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Weekly, tableFont));
                    tblFamilyInvolvement.AddCell(FamWeekly);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "3IM") != "")
                {
                    PdfPCell FamMonthlyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "3IM"), fontBoldTextOP));
                    tblFamilyInvolvement.AddCell(FamMonthlyOP);
                    PdfPCell FamMonthly = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Monthly, tableFont));
                    tblFamilyInvolvement.AddCell(FamMonthly);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "4IN") != "")
                {
                    PdfPCell FamNeverOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "4IN"), fontBoldTextOP));
                    tblFamilyInvolvement.AddCell(FamNeverOP);
                    PdfPCell FamNever = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Never, tableFont));
                    tblFamilyInvolvement.AddCell(FamNever);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_involvement_comment"].ToString()))
                {
                    PdfPCell txtFamComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtFamComments.Colspan = 2;
                    tblFamilyInvolvement.AddCell(txtFamComments);
                    PdfPCell txtFamCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_involvement_comment"].ToString(), tableFont));
                    txtFamCommentsOP.Colspan = 2;
                    txtFamCommentsOP.FixedHeight = 70;
                    tblFamilyInvolvement.AddCell(txtFamCommentsOP);
                }
                multiColumn.AddElement(tblFamilyInvolvement);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "5CD") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "6CW") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "7CM") != "" ||
                getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "8CN") != "" ||
                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_counselling_comment"].ToString())
                )
            {
                PdfPTable tblFamilyCounselling = new PdfPTable(2);
                tblFamilyCounselling.WidthPercentage = 100f;
                tblFamilyCounselling.SetWidths(wthAssessed);

                tblFamilyCounselling.AddCell(spaceCell1);

                PdfPCell FamilyCounselling = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilyCounselling, fontHDBoldText));
                FamilyCounselling.Colspan = 2;
                FamilyCounselling.BackgroundColor = BaseColor.LIGHT_GRAY;
                tblFamilyCounselling.AddCell(FamilyCounselling);

                PdfPCell FamilyCounselling1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilyCounselling, fontBoldText));
                FamilyCounselling1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                FamilyCounselling1.HorizontalAlignment = Element.ALIGN_CENTER;
                FamilyCounselling1.Colspan = 2;
                tblFamilyCounselling.AddCell(FamilyCounselling1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "5CD") != "")
                {
                    PdfPCell FacDailyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "5CD"), fontBoldTextOP));
                    tblFamilyCounselling.AddCell(FacDailyOP);
                    PdfPCell FacDaily = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.daily, tableFont));
                    tblFamilyCounselling.AddCell(FacDaily);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "6CW") != "")
                {
                    PdfPCell FacWeeklyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "6CW"), fontBoldTextOP));
                    tblFamilyCounselling.AddCell(FacWeeklyOP);
                    PdfPCell FacWeekly = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Weekly, tableFont));
                    tblFamilyCounselling.AddCell(FacWeekly);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "7CM") != "")
                {
                    PdfPCell FacMonthlyOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "7CM"), fontBoldTextOP));
                    tblFamilyCounselling.AddCell(FacMonthlyOP);
                    PdfPCell FacMonthly = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Monthly, tableFont));
                    tblFamilyCounselling.AddCell(FacMonthly);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "8CN") != "")
                {
                    PdfPCell FacNeverOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "8CN"), fontBoldTextOP));
                    tblFamilyCounselling.AddCell(FacNeverOP);
                    PdfPCell FacNever = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Never, tableFont));
                    tblFamilyCounselling.AddCell(FacNever);
                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_counselling_comment"].ToString()))
                {
                    PdfPCell txtFacComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtFacComments.Colspan = 2;
                    tblFamilyCounselling.AddCell(txtFacComments);
                    PdfPCell txtFacCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_counselling_comment"].ToString(), tableFont));
                    txtFacCommentsOP.Colspan = 2;
                    txtFacCommentsOP.FixedHeight = 70;
                    tblFamilyCounselling.AddCell(txtFacCommentsOP);
                }
                multiColumn.AddElement(tblFamilyCounselling);
            }
        }
        return multiColumn;
    }
    public MultiColumnText ResidentCareAssessmentImmunizationTable(MultiColumnText multiColumn)
    {
        DataSet dsAssessmentDetails = dsRCA;
        Font tableFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.NORMAL, BaseColor.BLACK);
        Font fontHDBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
        Font fontBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
        Font fontLargeBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);

        iTextSharp.text.Font fontFooter = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.ITALIC, BaseColor.DARK_GRAY);
        iTextSharp.text.Font fontGeneralText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
        iTextSharp.text.Font fontBoldHeadText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
        iTextSharp.text.Font fontCellHeader = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
        string fontpath = HttpContext.Current.Server.MapPath(".");
        BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
        Font fontBoldTextOP = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);
        float[] wthAssessed = new float[] { 1f, 8f };
        PdfPCell spaceCell1 = new PdfPCell(new Phrase(""));
        spaceCell1.Colspan = 2;
        spaceCell1.FixedHeight = 8;
        spaceCell1.Border = 0;

        if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "1PU") != "" ||
                        getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "2PR") != "" ||
                        getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "15PC") != "" ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pheumovax"].ToString()) ||
                       getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "3FU") != "" ||
                      getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "4FR") != "" ||
                      getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "16FC") != "" ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_flu_vaccine"].ToString()) ||
                        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pheumovax"].ToString()) ||
                            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "5MU") != "" ||
                      getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "6MR") != "" ||
                         getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "17MC") != "" ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mantoux"].ToString()) ||
                            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "7CU") != "" ||
                      getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "8CR") != "" ||
                       getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "18CC") != "" ||
                      !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_chest_Xray"].ToString()) ||
                            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU") != "" ||
                      getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "10TR") != "" ||
                        getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "19TC") != "" ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_tetanus"].ToString())
                       )
        {
            PdfPTable tblimmunizationPne = new PdfPTable(2);
            tblimmunizationPne.WidthPercentage = 100f;
            tblimmunizationPne.SetWidths(wthAssessed);

            tblimmunizationPne.AddCell(spaceCell1);

            PdfPCell ImmPneumovax = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Immunization, fontHDBoldText));
            ImmPneumovax.Colspan = 2;
            ImmPneumovax.BackgroundColor = BaseColor.LIGHT_GRAY;
            tblimmunizationPne.AddCell(ImmPneumovax);
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "1PU") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "2PR") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "15PC") != ""
            )
            {
                PdfPCell ImmPneumovax1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pneumovax, fontBoldText));
                ImmPneumovax1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                ImmPneumovax1.HorizontalAlignment = Element.ALIGN_CENTER;
                ImmPneumovax1.Colspan = 2;
                tblimmunizationPne.AddCell(ImmPneumovax1);


                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "1PU") != "")
                {
                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "1PU"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(UnknowOP);
                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                    tblimmunizationPne.AddCell(Unknow);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "2PR") != "")
                {
                    PdfPCell RefusedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "2PR"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(RefusedOP);
                    PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Refused, tableFont));
                    tblimmunizationPne.AddCell(Refused);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "15PC") != "")
                {
                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "15PC"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(UnknowOP);
                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateComplete, tableFont));
                    tblimmunizationPne.AddCell(Unknow);

                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pheumovax"].ToString()))
                {

                    PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_pheumovax"].ToString(), tableFont));
                    txtPneumovaxDateMod.Colspan = 2;

                    tblimmunizationPne.AddCell(txtPneumovaxDateMod);

                }
                tblimmunizationPne.AddCell(spaceCell1);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "3FU") != "" ||
          getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "4FR") != "" ||
          getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "16FC") != "" ||
           !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_flu_vaccine"].ToString())
            )
            {

                PdfPCell ImmFlu = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FluVaccine, fontBoldText));
                ImmFlu.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                ImmFlu.HorizontalAlignment = Element.ALIGN_CENTER;
                ImmFlu.Colspan = 2;
                tblimmunizationPne.AddCell(ImmFlu);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "3FU") != "")
                {
                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "3FU"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(UnknowOP);
                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                    tblimmunizationPne.AddCell(Unknow);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "4FR") != "")
                {
                    PdfPCell RefusedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "4FR"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(RefusedOP);
                    PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Refused, tableFont));
                    tblimmunizationPne.AddCell(Refused);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "16FC") != "")
                {
                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "16FC"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(UnknowOP);
                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateComplete, tableFont));
                    tblimmunizationPne.AddCell(Unknow);

                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_flu_vaccine"].ToString()))
                {

                    PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_flu_vaccine"].ToString(), tableFont));
                    txtPneumovaxDateMod.Colspan = 2;
                    tblimmunizationPne.AddCell(txtPneumovaxDateMod);
                }
                tblimmunizationPne.AddCell(spaceCell1);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "5MU") != "" ||
          getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "6MR") != "" ||
             getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "17MC") != "" ||
           !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mantoux"].ToString())
            )
            {
                PdfPTable tblimmunizationMan = new PdfPTable(2);
                tblimmunizationMan.WidthPercentage = 100f;
                tblimmunizationMan.SetWidths(wthAssessed);

                PdfPCell ImmMan1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MantouxResultsmustbeonfile, fontBoldText));
                ImmMan1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                ImmMan1.HorizontalAlignment = Element.ALIGN_CENTER;
                ImmMan1.Colspan = 2;
                tblimmunizationPne.AddCell(ImmMan1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "5MU") != "")
                {
                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "5MU"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(UnknowOP);
                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                    tblimmunizationPne.AddCell(Unknow);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "6MR") != "")
                {
                    PdfPCell RefusedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "6MR"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(RefusedOP);
                    PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Refused, tableFont));
                    tblimmunizationPne.AddCell(Refused);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "17MC") != "")
                {
                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "17MC"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(UnknowOP);
                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateComplete, tableFont));
                    tblimmunizationPne.AddCell(Unknow);

                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mantoux"].ToString()))
                {

                    PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_mantoux"].ToString(), tableFont));
                    txtPneumovaxDateMod.Colspan = 2;
                    tblimmunizationPne.AddCell(txtPneumovaxDateMod);
                }
                tblimmunizationPne.AddCell(spaceCell1);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "7CU") != "" ||
          getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "8CR") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "18CC") != "" ||
          !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_chest_Xray"].ToString())
           )
            {
                PdfPTable tblimmunizationChestX = new PdfPTable(2);
                tblimmunizationChestX.WidthPercentage = 100f;
                tblimmunizationChestX.SetWidths(wthAssessed);


                PdfPCell ImmChestX1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ChestXRay, fontBoldText));
                ImmChestX1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                ImmChestX1.HorizontalAlignment = Element.ALIGN_CENTER;
                ImmChestX1.Colspan = 2;
                tblimmunizationPne.AddCell(ImmChestX1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "7CU") != "")
                {
                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "7CU"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(UnknowOP);
                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                    tblimmunizationPne.AddCell(Unknow);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "8CR") != "")
                {
                    PdfPCell RefusedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "8CR"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(RefusedOP);
                    PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Refused, tableFont));
                    tblimmunizationPne.AddCell(Refused);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "18CC") != "")
                {
                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "18CC"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(UnknowOP);
                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateComplete, tableFont));
                    tblimmunizationPne.AddCell(Unknow);

                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_chest_Xray"].ToString()))
                {

                    PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_chest_Xray"].ToString(), tableFont));
                    txtPneumovaxDateMod.Colspan = 2;
                    tblimmunizationPne.AddCell(txtPneumovaxDateMod);
                }
                tblimmunizationPne.AddCell(spaceCell1);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU") != "" ||
          getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "10TR") != "" ||
            getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "19TC") != "" ||
           !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_tetanus"].ToString()))
            {
                PdfPTable tblimmunizationTet = new PdfPTable(2);
                tblimmunizationTet.WidthPercentage = 100f;
                tblimmunizationTet.SetWidths(wthAssessed);


                PdfPCell ImmTet1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tetanus, fontBoldText));
                ImmTet1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                ImmTet1.HorizontalAlignment = Element.ALIGN_CENTER;
                ImmTet1.Colspan = 2;
                tblimmunizationPne.AddCell(ImmTet1);
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU") != "")
                {
                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(UnknowOP);
                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                    tblimmunizationPne.AddCell(Unknow);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "10TR") != "")
                {
                    PdfPCell RefusedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "10TR"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(RefusedOP);
                    PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Refused, tableFont));
                    tblimmunizationPne.AddCell(Refused);
                }
                if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "19TC") != "")
                {
                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "19TC"), fontBoldTextOP));
                    tblimmunizationPne.AddCell(UnknowOP);
                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateComplete, tableFont));
                    tblimmunizationPne.AddCell(Unknow);

                }
                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_tetanus"].ToString()))
                {

                    PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_tetanus"].ToString(), tableFont));
                    txtPneumovaxDateMod.Colspan = 2;
                    tblimmunizationPne.AddCell(txtPneumovaxDateMod);
                }
            }
            tblimmunizationPne.AddCell(spaceCell1);
            multiColumn.AddElement(tblimmunizationPne);
        }

        if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "11MU") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "12MP") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "13MN") != "" ||
           getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "14MS") != "" ||
           !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_diagnosed"].ToString()) ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_resolved"].ToString())
            )
        {
            PdfPTable tblmrsa = new PdfPTable(2);
            tblmrsa.WidthPercentage = 100f;
            tblmrsa.SetWidths(wthAssessed);

            tblmrsa.AddCell(spaceCell1);

            PdfPCell mrsavre = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MRSAVRE, fontHDBoldText));
            mrsavre.Colspan = 2;
            mrsavre.BackgroundColor = BaseColor.LIGHT_GRAY;
            tblmrsa.AddCell(mrsavre);

            PdfPCell mrsavre1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MRSA, fontBoldText));
            mrsavre1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
            mrsavre1.HorizontalAlignment = Element.ALIGN_CENTER;
            mrsavre1.Colspan = 2;
            tblmrsa.AddCell(mrsavre1);
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_diagnosed"].ToString()))
            {

                PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DiagnosedDate + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_diagnosed"].ToString(), tableFont));
                txtPneumovaxDateMod.Colspan = 2;
                tblmrsa.AddCell(txtPneumovaxDateMod);
            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_resolved"].ToString()))
            {

                PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResolvedDate + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_resolved"].ToString(), tableFont));
                txtPneumovaxDateMod.Colspan = 2;
                tblmrsa.AddCell(txtPneumovaxDateMod);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "11MU") != "")
            {
                PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "11MU"), fontBoldTextOP));
                tblmrsa.AddCell(UnknowOP);
                PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                tblmrsa.AddCell(Unknow);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "12MP") != "")
            {
                PdfPCell RefusedOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "12MP"), fontBoldTextOP));
                tblmrsa.AddCell(RefusedOP);
                PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Positive, tableFont));
                tblmrsa.AddCell(Refused);
            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "13MN") != "")
            {
                PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "13MN"), fontBoldTextOP));
                tblmrsa.AddCell(UnknowOP);
                PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Nagative, tableFont));
                tblmrsa.AddCell(Unknow);

            }
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "14MS") != "")
            {
                PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "14MS"), fontBoldTextOP));
                tblmrsa.AddCell(UnknowOP);
                PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SeeSpecificCarePlan, tableFont));
                tblmrsa.AddCell(Unknow);

            }

            multiColumn.AddElement(tblmrsa);
        }
        if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_VRE_diagnosed"].ToString()) ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_VRE_resolved"].ToString())
            )
        {
            PdfPTable tblvre = new PdfPTable(2);
            tblvre.WidthPercentage = 100f;
            tblvre.SetWidths(wthAssessed);

            tblvre.AddCell(spaceCell1);

            PdfPCell vre1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.VRE, fontBoldText));
            vre1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
            vre1.HorizontalAlignment = Element.ALIGN_CENTER;
            vre1.Colspan = 2;
            tblvre.AddCell(vre1);
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_VRE_diagnosed"].ToString()))
            {

                PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DiagnosedDate + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_VRE_diagnosed"].ToString(), tableFont));
                txtPneumovaxDateMod.Colspan = 2;
                tblvre.AddCell(txtPneumovaxDateMod);
            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_VRE_resolved"].ToString()))
            {

                PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResolvedDate + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_VRE_resolved"].ToString(), tableFont));
                txtPneumovaxDateMod.Colspan = 2;
                tblvre.AddCell(txtPneumovaxDateMod);
            }
            multiColumn.AddElement(tblvre);
        }
        if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "15CN") != "" ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist1"].ToString()) ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist2"].ToString()) ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist3"].ToString()) ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist1_Date"].ToString()) ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist2_Date"].ToString()) ||
            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist3_Date"].ToString())
            )
        {
            PdfPTable tblConsults = new PdfPTable(2);
            tblConsults.WidthPercentage = 100f;
            tblConsults.SetWidths(wthAssessed);

            tblConsults.AddCell(spaceCell1);

            PdfPCell ConsultsImm = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Consults, fontHDBoldText));
            ConsultsImm.Colspan = 2;
            ConsultsImm.BackgroundColor = BaseColor.LIGHT_GRAY;
            tblConsults.AddCell(ConsultsImm);

            PdfPCell ConsultsImm1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Consults, fontBoldText));
            ConsultsImm1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
            ConsultsImm1.HorizontalAlignment = Element.ALIGN_CENTER;
            ConsultsImm1.Colspan = 2;
            tblConsults.AddCell(ConsultsImm1);
            if (getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "15CN") != "")
            {
                PdfPCell UnknowOP = new PdfPCell(new Phrase(getValueString(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "15CN"), fontBoldTextOP));
                tblConsults.AddCell(UnknowOP);
                PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                tblConsults.AddCell(Unknow);

            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist1"].ToString()))
            {

                PdfPCell txtSpecialist1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Specialist_1 + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist1"].ToString(), tableFont));
                txtSpecialist1.Colspan = 2;
                tblConsults.AddCell(txtSpecialist1);
            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist1_Date"].ToString()))
            {

                PdfPCell txtSpecialist1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist1_Date"].ToString(), tableFont));
                txtSpecialist1.Colspan = 2;
                tblConsults.AddCell(txtSpecialist1);
            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist2"].ToString()))
            {

                PdfPCell txtSpecialist1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Specialist_2 + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist2"].ToString(), tableFont));
                txtSpecialist1.Colspan = 2;
                tblConsults.AddCell(txtSpecialist1);
            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist2_Date"].ToString()))
            {

                PdfPCell txtSpecialist1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist2_Date"].ToString(), tableFont));
                txtSpecialist1.Colspan = 2;
                tblConsults.AddCell(txtSpecialist1);
            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist3"].ToString()))
            {

                PdfPCell txtSpecialist1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Specialist_3 + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist2"].ToString(), tableFont));
                txtSpecialist1.Colspan = 2;
                tblConsults.AddCell(txtSpecialist1);
            }
            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist3_Date"].ToString()))
            {

                PdfPCell txtSpecialist1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_consults_specialist3_Date"].ToString(), tableFont));
                txtSpecialist1.Colspan = 2;
                tblConsults.AddCell(txtSpecialist1);
            }
            multiColumn.AddElement(tblConsults);
        }
        return multiColumn;
    }
    public PdfPTable PrintOtherInfectionResidentCareAssessment()
    {
        PdfPTable tblImmunization = null;
        DataSet dsAssessmentDetails = dsRCA;
        if (Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_id"].ToString()) > 0)
        {
            tblImmunization = new PdfPTable(2);
            tblImmunization.WidthPercentage = 100f;
            float[] wthAssessed = new float[] { 1f, 8f };
            tblImmunization.SetWidths(wthAssessed);

            Font tableFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.NORMAL, BaseColor.BLACK);
            Font fontHDBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
            Font fontBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
            Font fontLargeBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);

            PdfPCell OtherinfectiousDiseases = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OtherinfectiousDiseases, tableFont));
            OtherinfectiousDiseases.Colspan = 4;
            OtherinfectiousDiseases.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
            tblImmunization.AddCell(OtherinfectiousDiseases);
            PdfPCell OtherinfectiousDiseasesOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_others"].ToString(), tableFont));
            OtherinfectiousDiseasesOP.Colspan = 4;
            OtherinfectiousDiseasesOP.FixedHeight = 120;
            tblImmunization.AddCell(OtherinfectiousDiseasesOP);
            PdfPCell spaceCell1 = new PdfPCell(new Phrase(""));
            spaceCell1.Colspan = 2;
            spaceCell1.FixedHeight = 8;
            spaceCell1.Border = 0;

            tblImmunization.AddCell(spaceCell1);
            tblImmunization.AddCell(spaceCell1);
            tblImmunization.AddCell(spaceCell1);
            tblImmunization.AddCell(spaceCell1);

            PdfPCell OtherConsultants = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OtherConsultants, tableFont));
            OtherConsultants.Colspan = 4;
            OtherConsultants.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
            tblImmunization.AddCell(OtherConsultants);
            PdfPCell OtherConsultantsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_consultants"].ToString(), tableFont));
            OtherConsultantsOP.Colspan = 4;
            OtherConsultantsOP.FixedHeight = 120;
            tblImmunization.AddCell(OtherConsultantsOP);
        }
        return tblImmunization;

    }
    public PdfPTable SignTable()
    {
        DataSet dsAssessmentDetails = dsRCA;
        Font tableFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.NORMAL, BaseColor.BLACK);

        PdfPTable tblSign = new PdfPTable(3);
        tblSign.WidthPercentage = 100f;
        float[] wthtblSign = new float[] { 3f, 1f, 3f };
        tblSign.SetWidths(wthtblSign);

        PdfPCell Signc1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Authorizedby, tableFont));
        Signc1.Colspan = 3;
        Signc1.Border = 0;
        tblSign.AddCell(Signc1);
        PdfPCell Signc2 = new PdfPCell(new Phrase("", tableFont));
        Signc2.Border = 0;
        Signc2.VerticalAlignment = Element.ALIGN_BOTTOM;
        Signc2.FixedHeight = 30;
        Signc2.HorizontalAlignment = Element.ALIGN_CENTER;
        Signc2.Border = Rectangle.BOTTOM_BORDER;
        tblSign.AddCell(Signc2);
        PdfPCell Signc3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.or, tableFont));
        Signc3.Border = 0;
        Signc3.Rowspan = 2;
        Signc3.HorizontalAlignment = Element.ALIGN_CENTER;
        Signc3.VerticalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(Signc3);
        PdfPCell Signc4 = new PdfPCell(new Phrase("", tableFont));
        Signc4.Border = 0;
        Signc4.HorizontalAlignment = Element.ALIGN_CENTER;
        Signc4.VerticalAlignment = Element.ALIGN_BOTTOM;
        Signc4.Border = 0;
        Signc4.Border = Rectangle.BOTTOM_BORDER;
        tblSign.AddCell(Signc4);
        PdfPCell Signc12 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Resident1, tableFont));
        Signc12.Border = 0;
        Signc12.HorizontalAlignment = Element.ALIGN_CENTER;
        Signc12.VerticalAlignment = Element.ALIGN_TOP;
        tblSign.AddCell(Signc12);
        PdfPCell Signc14 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.pod, tableFont));
        Signc14.Border = 0;
        Signc14.HorizontalAlignment = Element.ALIGN_CENTER;
        Signc14.VerticalAlignment = Element.ALIGN_TOP;
        tblSign.AddCell(Signc14);

        PdfPCell Signc11 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Planof, tableFont));
        Signc11.Colspan = 3;
        Signc11.Border = 0;
        tblSign.AddCell(Signc11);
        string completedBy = dsAssessmentDetails.Tables[0].Rows[0]["As_fd_first_name"].ToString() + " " + dsAssessmentDetails.Tables[0].Rows[0]["As_fd_last_name"].ToString();
        PdfPCell Signc21 = new PdfPCell(new Phrase(completedBy, tableFont));
        Signc21.Border = 0;
        Signc21.FixedHeight = 30;
        Signc21.HorizontalAlignment = Element.ALIGN_CENTER;
        Signc21.VerticalAlignment = Element.ALIGN_BOTTOM;
        Signc21.Border = Rectangle.BOTTOM_BORDER;
        tblSign.AddCell(Signc21);
        PdfPCell Signc31 = new PdfPCell(new Phrase("", tableFont));
        Signc31.Border = 0;
        Signc31.VerticalAlignment = Element.ALIGN_MIDDLE;
        Signc31.Rowspan = 2;
        Signc31.HorizontalAlignment = Element.ALIGN_CENTER;
        tblSign.AddCell(Signc31);
        PdfPCell Signc41 = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["As_modified_on"].ToString(), tableFont));
        Signc41.Border = Rectangle.BOTTOM_BORDER;
        Signc41.HorizontalAlignment = Element.ALIGN_CENTER;

        Signc41.VerticalAlignment = Element.ALIGN_BOTTOM;
        tblSign.AddCell(Signc41);

        PdfPCell Signca = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Nurse, tableFont));
        Signca.Border = 0;
        Signca.HorizontalAlignment = Element.ALIGN_CENTER;
        Signca.VerticalAlignment = Element.ALIGN_TOP;
        tblSign.AddCell(Signca);
        PdfPCell Signcb = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date1, tableFont));
        Signcb.Border = 0;
        Signcb.HorizontalAlignment = Element.ALIGN_CENTER;
        Signcb.VerticalAlignment = Element.ALIGN_TOP;
        tblSign.AddCell(Signcb);

        string residentName = "";
        if (dsAssessmentDetails.Tables[0].Rows[0]["fd_user_lname"].ToString() != "")
        {
            residentName = dsAssessmentDetails.Tables[0].Rows[0]["fd_user_lname"].ToString();
        }
        if (dsAssessmentDetails.Tables[0].Rows[0]["fd_user_fname"].ToString() != "")
        {
            residentName += ", " + dsAssessmentDetails.Tables[0].Rows[0]["fd_user_fname"].ToString();
        }
        string userType = dsAssessmentDetails.Tables[0].Rows[0]["fd_user_type"].ToString();
        DateTime modifiedOn = Convert.ToDateTime(dsAssessmentDetails.Tables[0].Rows[0]["fd_modified_on"].ToString());
        string modifiedOnValue = modifiedOn.ToString("MMMM dd, yyyy");
        PdfPCell footerText = new PdfPCell(new Phrase(residentName + ", " + userType + ", " + modifiedOnValue, tableFont));
        footerText.Colspan = 3;
        footerText.Border = 0;
        footerText.VerticalAlignment = Element.ALIGN_BOTTOM;
        tblSign.AddCell(footerText);

        return tblSign;
    }
    private string getValueString(string value, string code)
    {
        string[] strArray = null;
        int intCount, n;
        string result = "";
        string status = "P";
        strArray = value.Split(',');
        if ((strArray.Length > 0))
        {
            if (strArray.Length == 1)
                n = strArray.Length;
            else
                n = strArray.Length - 1;
            for (intCount = 0; intCount < n; intCount++)
            {
                if (strArray[intCount].ToString() == code)
                {
                    result = status;
                    break;
                }
            }
        }
        return result;
    }

    public PdfPTable CarePlanFallRiskAssessment()
    {
        Collection<Common.FallRiskAssessment> fallRiskAssessmt = new Collection<Common.FallRiskAssessment>();

        PdfPTable tabHeader = new PdfPTable(new float[] { 1F, 1F });
        tabHeader.TotalWidth = 565F;
        string fontpath = HttpContext.Current.Server.MapPath(".");
        BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
        Font fontBoldTextOP = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);
        Font fontLargeBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
        fallRiskAssessmt = DAL.FallRiskAssessment.GetFallRiskAssessmentHistoryByResidentId(_iResidentId);


        PdfPTable tblHeader = new PdfPTable(4);
        tblHeader.WidthPercentage = 100f;
        float[] wthHead = new float[] { 1f, 1f, 1f, 1f };
        tblHeader.SetWidths(wthHead);
        PdfPTable tblFRAssess = new PdfPTable(5);
        tblFRAssess.WidthPercentage = 100f;
        float[] wthFRAssess = new float[] { 2f, 1f, 1f, 1f, 1f };
        tblFRAssess.SetWidths(wthFRAssess);

        PdfPCell noteCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FallRiskAssessment_Notes, ProgressiveReport.paragraphFont));
        noteCell.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        noteCell.Border = 0;
        noteCell.Colspan = 5;
        tblFRAssess.AddCell(noteCell);

        PdfPCell sofcell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FallRiskAssessment_Score, ProgressiveReport.fontBoldText));
        sofcell.Colspan = 5;
        sofcell.Border = 0;
        sofcell.HorizontalAlignment = Element.ALIGN_CENTER;
        sofcell.PaddingBottom = 3;
        tblFRAssess.AddCell(sofcell);
        PdfPCell FRhdCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Description, ProgressiveReport.fontBoldText));
        FRhdCell1.BackgroundColor = BaseColor.LIGHT_GRAY;
        FRhdCell1.VerticalAlignment = Element.ALIGN_MIDDLE;
        FRhdCell1.FixedHeight = 20;
        FRhdCell1.PaddingLeft = 3;
        FRhdCell1.Rowspan = 2;
        tblFRAssess.AddCell(FRhdCell1);

        PdfPCell FHCell21 = new PdfPCell(new Phrase(""));
        FHCell21.PaddingBottom = 3;

        for (int cellIndex = 0; cellIndex < 4; cellIndex++)
        {
            PdfPCell FRhdCell2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ReviewDate, ProgressiveReport.fontBoldText));
            FRhdCell2.BackgroundColor = BaseColor.LIGHT_GRAY;
            FRhdCell2.HorizontalAlignment = Element.ALIGN_CENTER;
            tblFRAssess.AddCell(FRhdCell2);
        }
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string assesDate = fallRiskAssessmt[index].modifiedOn.ToString("MM/dd/yy");
                        if (assesDate == "01/01/00")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        else if (assesDate != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(assesDate, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.BackgroundColor = BaseColor.LIGHT_GRAY;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            PdfPCell FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
            FRhdCelldate.MinimumHeight = 15F;
            tblFRAssess.AddCell(FRhdCelldate);
            tblFRAssess.AddCell(FRhdCelldate);
            tblFRAssess.AddCell(FRhdCelldate);
            tblFRAssess.AddCell(FRhdCelldate);
        }
        String fallHistoryText = Resources.Qola.UIverbiage.includefalls;
        PdfPCell FHCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_FallHistory + fallHistoryText, ProgressiveReport.fontBoldText));
        FHCell1.PaddingBottom = 3;
        tblFRAssess.AddCell(FHCell1);

        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);

        PdfPCell FHCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_MoreInPastMonth, ProgressiveReport.tableFont));
        FHCell3.PaddingBottom = 3;
        tblFRAssess.AddCell(FHCell3);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string assesDate = fallRiskAssessmt[index].fallHistoryM2.ToString();
                        if (assesDate != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(assesDate, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }
        PdfPCell FHCell5 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_InPastMonth, ProgressiveReport.tableFont));
        FHCell5.PaddingBottom = 3;
        tblFRAssess.AddCell(FHCell5);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].fallHistoryLE2.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }
        PdfPCell borderCell1 = new PdfPCell(new Phrase(""));
        borderCell1.Colspan = 5;
        borderCell1.FixedHeight = 1;
        borderCell1.BackgroundColor = BaseColor.BLACK;
        tblFRAssess.AddCell(borderCell1);
        PdfPCell msCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_MentalStatus, ProgressiveReport.fontBoldText));
        msCell1.PaddingBottom = 3;
        tblFRAssess.AddCell(msCell1);

        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);

        PdfPCell msCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_ConfusedDementia, ProgressiveReport.tableFont));
        msCell3.PaddingBottom = 3;
        tblFRAssess.AddCell(msCell3);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].mentalConfuselDementia.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }
        PdfPCell msCell5 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Residentnoncompliance, ProgressiveReport.tableFont));
        msCell5.PaddingBottom = 3;

        tblFRAssess.AddCell(msCell5);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].mentalResidentNoneCompliance.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }
        PdfPCell borderCell2 = new PdfPCell(new Phrase(""));
        borderCell2.Colspan = 5;
        borderCell2.FixedHeight = 1;
        borderCell2.BackgroundColor = BaseColor.BLACK;
        tblFRAssess.AddCell(borderCell2);
        PdfPCell ndCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_NeurologicalNeuromuscularDisease, ProgressiveReport.fontBoldText));
        ndCell1.PaddingBottom = 3;
        tblFRAssess.AddCell(ndCell1);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);


        PdfPCell ndCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_CVA, ProgressiveReport.tableFont));
        ndCell3.PaddingBottom = 3;
        tblFRAssess.AddCell(ndCell3);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].NND_CVA.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell ndCell5 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Parkinsons, ProgressiveReport.tableFont));
        ndCell5.PaddingBottom = 3;
        tblFRAssess.AddCell(ndCell5);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].NND_Parkinsons.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell ndCell7 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Alzheimers, ProgressiveReport.tableFont));
        ndCell7.PaddingBottom = 3;
        tblFRAssess.AddCell(ndCell7);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].NND_Alzheiners.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell ndCell9 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_SeizureDisorder, ProgressiveReport.tableFont));
        FHCell1.PaddingBottom = 3;
        tblFRAssess.AddCell(ndCell9);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].NND_SeizureDisorder.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }

        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell ndCell11 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Other, ProgressiveReport.tableFont));
        ndCell11.PaddingBottom = 3;
        tblFRAssess.AddCell(ndCell11);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].NND_SeizureDisorder.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell borderCell3 = new PdfPCell(new Phrase(""));
        borderCell3.Colspan = 5;
        borderCell3.FixedHeight = 1;
        borderCell3.BackgroundColor = BaseColor.BLACK;
        tblFRAssess.AddCell(borderCell3);


        PdfPCell odCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_OrthopedicDiseaseConcerns, ProgressiveReport.fontBoldText));
        odCell1.PaddingBottom = 3;
        tblFRAssess.AddCell(odCell1);

        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);


        PdfPCell odCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_RecentFracture, ProgressiveReport.tableFont));
        odCell3.PaddingBottom = 3;
        tblFRAssess.AddCell(odCell3);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].ODC_RecentFracture.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }

        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell odCell5 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_CastSplintSlings, ProgressiveReport.tableFont));
        odCell5.PaddingBottom = 3;
        tblFRAssess.AddCell(odCell5);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].ODC_CastSplintSlings.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell odCell7 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_AmputationProsthesis, ProgressiveReport.tableFont));
        odCell7.PaddingBottom = 3;
        tblFRAssess.AddCell(odCell7);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].ODC_AmputationProsthesis.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell odCell9 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_SevereArthritis, ProgressiveReport.tableFont));
        odCell9.PaddingBottom = 3;
        tblFRAssess.AddCell(odCell9);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].ODC_SevereArthritis.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell borderCell4 = new PdfPCell(new Phrase(""));
        borderCell4.Colspan = 5;
        borderCell4.FixedHeight = 1;
        borderCell4.BackgroundColor = BaseColor.BLACK;
        tblFRAssess.AddCell(borderCell4);


        PdfPCell odpCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_OtherDiseaseProcesses, ProgressiveReport.fontBoldText));
        odpCell1.PaddingBottom = 3;
        tblFRAssess.AddCell(odpCell1);

        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);


        PdfPCell odpCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Diabetes, ProgressiveReport.tableFont));
        odpCell3.PaddingBottom = 3;
        tblFRAssess.AddCell(odpCell3);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].ODP_Diabetes.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell odpCell5 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Osteoporosis, ProgressiveReport.tableFont));
        odpCell5.PaddingBottom = 3;
        tblFRAssess.AddCell(odpCell5);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].ODP_Osleoporosis.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell odpCell7 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_PosturalHypotension, ProgressiveReport.tableFont));
        odpCell7.PaddingBottom = 3;
        tblFRAssess.AddCell(odpCell7);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].ODP_PosturalHypotension.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell odpCell11 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_SyncopeDizziness, ProgressiveReport.tableFont));
        odpCell11.PaddingBottom = 3;
        tblFRAssess.AddCell(odpCell11);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].ODP_SyncopeDizziness.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        borderCell1.Colspan = 5;
        borderCell1.FixedHeight = 1;
        borderCell1.BackgroundColor = BaseColor.BLACK;
        tblFRAssess.AddCell(borderCell1);

        PdfPCell sdCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_SensoryDeficits, ProgressiveReport.fontBoldText));
        sdCell1.PaddingBottom = 3;
        tblFRAssess.AddCell(sdCell1);

        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);


        PdfPCell sdCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_DecreasedVision, ProgressiveReport.tableFont));
        sdCell3.PaddingBottom = 3;
        tblFRAssess.AddCell(sdCell3);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].SD_DecreaseDivision.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }

        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell sdCell5 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_DecreasedHearing, ProgressiveReport.tableFont));
        sdCell5.PaddingBottom = 3;
        tblFRAssess.AddCell(sdCell5);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].SD_DecreaseHearing.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell sdCell11 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Aphasia, ProgressiveReport.tableFont));
        sdCell11.PaddingBottom = 3;
        tblFRAssess.AddCell(sdCell11);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].SD_Aphasia.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell borderCell6 = new PdfPCell(new Phrase(""));
        borderCell6.Colspan = 5;
        borderCell6.FixedHeight = 1;
        borderCell6.BackgroundColor = BaseColor.BLACK;
        tblFRAssess.AddCell(borderCell6);



        PdfPCell iCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Incontinence, ProgressiveReport.fontBoldText));
        iCell1.PaddingBottom = 3;
        tblFRAssess.AddCell(iCell1);


        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);


        PdfPCell iCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Bowel, ProgressiveReport.tableFont));
        iCell3.PaddingBottom = 3;
        tblFRAssess.AddCell(iCell3);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;

            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].incontinenceBowel.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell iCell11 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Bladder, ProgressiveReport.tableFont));
        iCell11.PaddingBottom = 3;
        tblFRAssess.AddCell(iCell11);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].incontinenceBladder.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell borderCell7 = new PdfPCell(new Phrase(""));
        borderCell7.Colspan = 5;
        borderCell7.FixedHeight = 1;
        borderCell7.BackgroundColor = BaseColor.BLACK;
        tblFRAssess.AddCell(borderCell7);



        PdfPCell asCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_AssistiveDevicesuseof, ProgressiveReport.fontBoldText));
        asCell1.PaddingBottom = 3;
        tblFRAssess.AddCell(asCell1);


        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);


        PdfPCell asCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Wheelchair, ProgressiveReport.tableFont));
        asCell3.PaddingBottom = 3;
        tblFRAssess.AddCell(asCell3);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].AD_WheelChair.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell asCell5 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Walker, ProgressiveReport.tableFont));
        asCell5.PaddingBottom = 3;
        tblFRAssess.AddCell(asCell5);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].AD_Walker.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell asCell11 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Cane, ProgressiveReport.tableFont));
        asCell11.PaddingBottom = 3;
        tblFRAssess.AddCell(asCell11);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].AD_Cane.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }


        PdfPCell tdCell5 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Transferdifficulties, ProgressiveReport.tableFont));
        tdCell5.PaddingBottom = 3;
        tblFRAssess.AddCell(tdCell5);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].trangherDifficulties.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }

        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell tdCell11 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Unsteadygait, ProgressiveReport.tableFont));
        tdCell11.PaddingBottom = 3;
        tblFRAssess.AddCell(tdCell11);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].unsteadyGaint.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }

        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell borderCell8 = new PdfPCell(new Phrase(""));
        borderCell8.Colspan = 5;
        borderCell8.FixedHeight = 1;
        borderCell8.BackgroundColor = BaseColor.BLACK;
        tblFRAssess.AddCell(borderCell8);

        PdfPCell medCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Medications, ProgressiveReport.fontBoldText));
        medCell1.PaddingBottom = 3;
        tblFRAssess.AddCell(medCell1);


        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);
        tblFRAssess.AddCell(FHCell21);


        PdfPCell medCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Cardiac, ProgressiveReport.tableFont));
        medCell3.PaddingBottom = 3;
        tblFRAssess.AddCell(medCell3);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].medicationCardiac.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell medCell5 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Diuretics, ProgressiveReport.tableFont));
        medCell5.PaddingBottom = 3;
        tblFRAssess.AddCell(medCell5);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].medicationDiuretics.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell medCell7 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Narcotics, ProgressiveReport.tableFont));
        medCell7.PaddingBottom = 3;
        tblFRAssess.AddCell(medCell7);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].medicationNarcotics.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell medCell9 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Analgesics, ProgressiveReport.tableFont));
        medCell9.PaddingBottom = 3;
        tblFRAssess.AddCell(medCell9);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].medicationAnalgesics.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell medCell11 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Antipsychotics, ProgressiveReport.tableFont));
        medCell11.PaddingBottom = 3;
        tblFRAssess.AddCell(medCell11);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].medicationAntiPsySedatives.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }


        PdfPCell medCell13 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_AntiAnxiety, ProgressiveReport.tableFont));
        medCell13.PaddingBottom = 3;
        tblFRAssess.AddCell(medCell13);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].medicationAntiAnxAntiDepressants.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell medCell15 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Laxatives, ProgressiveReport.tableFont));
        medCell15.PaddingBottom = 3;
        tblFRAssess.AddCell(medCell15);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].laxatives.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }

            }

        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell borderCell9 = new PdfPCell(new Phrase(""));
        borderCell9.Colspan = 5;
        borderCell9.FixedHeight = 1;
        borderCell9.BackgroundColor = BaseColor.BLACK;
        tblFRAssess.AddCell(borderCell9);

        PdfPCell tsCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TotalScore, ProgressiveReport.fontBoldText));
        tsCell1.PaddingBottom = 3;
        tsCell1.HorizontalAlignment = Element.ALIGN_RIGHT;
        tblFRAssess.AddCell(tsCell1);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {
                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].totalScore.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }
                if (count < 4)
                {
                    for (int emptyIndex = 0; emptyIndex < 4 - count; emptyIndex++)
                    {
                        FHCell21.MinimumHeight = 5F;
                        tblFRAssess.AddCell(FHCell21);
                    }
                }


            }

        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell rlCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RiskLevel, ProgressiveReport.fontBoldText));
        rlCell1.BorderWidthBottom = 0;
        rlCell1.BorderWidthRight = 0;
        rlCell1.PaddingBottom = 3;
        tblFRAssess.AddCell(rlCell1);
        if (fallRiskAssessmt.Count > 0)
        {
            int count = fallRiskAssessmt.Count;
            for (int cellIndex = 0; cellIndex < 4; cellIndex++)
            {

                for (int index = 0; index < fallRiskAssessmt.Count; index++)
                {
                    count = +1;
                    if (cellIndex == index)
                    {
                        PdfPCell FRhdCelldate;
                        string fallHistoryLE2 = fallRiskAssessmt[index].riskLevel.ToString();
                        if (fallHistoryLE2 != "0")
                        {
                            FRhdCelldate = new PdfPCell(new Phrase(fallHistoryLE2, ProgressiveReport.fontBoldText));
                        }
                        else
                        {
                            FRhdCelldate = new PdfPCell(new Phrase("", ProgressiveReport.fontBoldText));
                            FRhdCelldate.MinimumHeight = 5F;
                        }
                        FRhdCelldate.PaddingBottom = 3;
                        FRhdCelldate.Rowspan = 2;
                        FRhdCelldate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblFRAssess.AddCell(FRhdCelldate);
                        break;
                    }
                }

            }
        }
        else
        {
            FHCell21.MinimumHeight = 5F;
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
            tblFRAssess.AddCell(FHCell21);
        }

        PdfPCell rlCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.LowMediumHigh, ProgressiveReport.tableFont));
        rlCell3.BorderWidthTop = 0;
        rlCell3.BorderWidthRight = 0;
        rlCell3.PaddingBottom = 3;
        tblFRAssess.AddCell(rlCell3);



        PdfPCell sCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Signature, ProgressiveReport.fontBoldText));
        sCell1.HorizontalAlignment = Element.ALIGN_RIGHT;
        sCell1.PaddingBottom = 3;
        sCell1.BackgroundColor = BaseColor.LIGHT_GRAY;
        tblFRAssess.AddCell(sCell1);

        PdfPCell sCell2 = new PdfPCell(new Phrase(""));
        sCell2.PaddingBottom = 3;
        sCell2.Colspan = 4;
        sCell2.BackgroundColor = BaseColor.LIGHT_GRAY;
        tblFRAssess.AddCell(sCell2);

        string userName = "";
        string userType = "";
        if (fallRiskAssessmt.Count > 0)
        {
            if (fallRiskAssessmt[0].ModifiedBy.LastName != "")
            {
                userName = fallRiskAssessmt[0].ModifiedBy.LastName;
            }
            if (fallRiskAssessmt[0].ModifiedBy.FirstName != "")
            {
                userName += ", " + fallRiskAssessmt[0].ModifiedBy.FirstName;
            }
            userType = fallRiskAssessmt[0].ModifiedBy.UserTypeName;
            DateTime modifiedOn = fallRiskAssessmt[0].modifiedOn;
            string mValue = "";
            if (modifiedOn.ToString() != "1/1/1900 12:00:00 AM")
            {
                mValue = modifiedOn.ToString("MMMM dd, yyyy");
            }

            if (userName != "" || userType != "" || mValue != "")
            {
                PdfPCell modifiedOnCell = new PdfPCell(new Phrase(userName + ", " + userType + ", " + mValue, ProgressiveReport.tableFont));
                modifiedOnCell.Border = Rectangle.NO_BORDER;
                modifiedOnCell.Colspan = 5;
                tblFRAssess.AddCell(modifiedOnCell);
            }
        }
        return tblFRAssess;
    }
    public PdfPTable CarePlanNeedsAndGoalsHeader()
    {

        PdfPTable tblGoalSheetHeader = new PdfPTable(4);
        tblGoalSheetHeader.WidthPercentage = 90f;
        float[] wthtblGoalSheetHeader = new float[] { 1f, 2f, 1f, 2f };
        tblGoalSheetHeader.SetWidths(wthtblGoalSheetHeader);
        tblGoalSheetHeader.SpacingBefore = 5f;
        tblGoalSheetHeader.SpacingAfter = 5f;

        PdfPCell tblGoalSheetHeaderTitle = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentNeedGoals, ProgressiveReport.font10B));
        tblGoalSheetHeaderTitle.HorizontalAlignment = Element.ALIGN_CENTER;
        tblGoalSheetHeaderTitle.Colspan = 4;
        tblGoalSheetHeaderTitle.Border = 0;
        tblGoalSheetHeaderTitle.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderTitle);

        PdfPCell tblGoalSheetHeaderTitle2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PhysicalCare, ProgressiveReport.font10));
        tblGoalSheetHeaderTitle2.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderTitle2.Colspan = 4;
        tblGoalSheetHeaderTitle2.Border = 0;
        tblGoalSheetHeaderTitle2.PaddingBottom = 10f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderTitle2);


        PdfPCell tblGoalSheetHeaderContent1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Developer + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderContent1.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderContent1.Border = 0;
        tblGoalSheetHeaderContent1.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderContent1);

        PdfPCell tblGoalSheetHeaderLine = new PdfPCell(new Phrase("", ProgressiveReport.font10));
        tblGoalSheetHeaderLine.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderLine.Border = 0;

        tblGoalSheetHeaderLine.BorderWidthBottom = 0.5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);

        PdfPCell tblGoalSheetHeaderApprove = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ApprovedBy + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderApprove.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderApprove.Border = 0;
        tblGoalSheetHeaderApprove.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderApprove);

        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);

        PdfPCell tblGoalSheetHeaderContent2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Signatureof + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderContent2.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderContent2.Border = 0;
        tblGoalSheetHeaderContent2.Colspan = 2;
        tblGoalSheetHeaderContent2.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderContent2);

        tblGoalSheetHeaderLine.Colspan = 2;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);


        PdfPCell tblGoalSheetHeaderDate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderDate.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderDate.Border = 0;
        tblGoalSheetHeaderDate.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderDate);
        tblGoalSheetHeaderLine.Colspan = 1;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);

        PdfPCell tblGoalSheetHeaderCopyGiven = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CopyGiven + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderCopyGiven.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderCopyGiven.Border = 0;
        tblGoalSheetHeaderCopyGiven.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderCopyGiven);
        tblGoalSheetHeaderLine.Colspan = 1;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);
        PdfPCell tblGoalSheetHeaderCopyReceive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CopyReceived + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderCopyReceive.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderCopyReceive.Border = 0;
        tblGoalSheetHeaderCopyReceive.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderCopyReceive);
        tblGoalSheetHeaderLine.Colspan = 1;
        tblGoalSheetHeaderLine.VerticalAlignment = Element.ALIGN_BOTTOM;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);

        PdfPCell tblGoalSheetHeaderReceiveInitals = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Initials + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderReceiveInitals.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderReceiveInitals.Border = 0;
        tblGoalSheetHeaderReceiveInitals.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderReceiveInitals);
        tblGoalSheetHeaderLine.Colspan = 1;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);
        PdfPCell tblGoalSheetHeaderContent4 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CopyRefused + ": ", ProgressiveReport.font10));

        tblGoalSheetHeaderContent4.Border = 0;
        tblGoalSheetHeaderContent4.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderContent4);
        tblGoalSheetHeaderContent2.Colspan = 1;
        tblGoalSheetHeaderLine.VerticalAlignment = Element.ALIGN_CENTER;
        tblGoalSheetHeaderLine.PaddingBottom = -35f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);

        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderReceiveInitals);
        tblGoalSheetHeaderContent2.Colspan = 1;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);
        return tblGoalSheetHeader;
    }

    public PdfPTable CarePlanResidentNeedsAndGoalContent()
    {
        PdfPTable tblGoalSheet = new PdfPTable(6);
        tblGoalSheet.WidthPercentage = 100f;
        float[] wthtblGoalSheet = new float[] { 0.75f, 0.8f, 1.4f, 0.8f, 1f, 0.75f };
        tblGoalSheet.SetWidths(wthtblGoalSheet);
        tblGoalSheet.SpacingBefore = 5f;
        tblGoalSheet.SpacingAfter = 5f;

        PdfPCell CellGoalSheet;
        PdfPCell emptyGoalSheet;
        emptyGoalSheet = new PdfPCell(new Phrase("", ProgressiveReport.font10));


        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);
        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.residentNeeds + "/" + Resources.Qola.UIverbiage.Services, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);
        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FollowUpActionIntervention, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);
        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OutcomesEffectiveness, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);
        var PhrasePersonResponsible = new Phrase();
        PhrasePersonResponsible.Add(new Chunk(Resources.Qola.UIverbiage.PersonResponsible + "\n", ProgressiveReport.font8B));
        PhrasePersonResponsible.Add(new Chunk(Resources.Qola.UIverbiage.InitialsDesignation, ProgressiveReport.font8));
        CellGoalSheet = new PdfPCell(new Phrase(PhrasePersonResponsible));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);
        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateResolved, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);

        Collection<Common.GoalSheet> goalSheets;
        goalSheets = new Collection<Common.GoalSheet>();
        goalSheets = DAL.GoalSheet.GetResidentGoalDetails(_iResidentId, 0);


        int iGoalNo = 1;
        foreach (Common.GoalSheet GlShtReceive in goalSheets)
        {
            CellGoalSheet = new PdfPCell(new Phrase(iGoalNo.ToString(), ProgressiveReport.tableFont));
            CellGoalSheet.HorizontalAlignment = Element.ALIGN_RIGHT;
            if (GlShtReceive.ResolvedDate.Day != 1 && GlShtReceive.ResolvedDate.Month != 1 && GlShtReceive.ResolvedDate.Year != 1)
            {
                CellGoalSheet.Rowspan = GlShtReceive.GoalSheetDetails != null ? GlShtReceive.GoalSheetDetails.Count + 2 : 1;
            }
            else
            {
                CellGoalSheet.Rowspan = GlShtReceive.GoalSheetDetails != null ? GlShtReceive.GoalSheetDetails.Count + 1 : 1;
            }
            CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.Date.ToString("MM-dd-yyyy"), ProgressiveReport.tableFont));
            CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
            tblGoalSheet.AddCell(CellGoalSheet);
            CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.ResidentNeeds, ProgressiveReport.tableFont));
            tblGoalSheet.AddCell(CellGoalSheet);
            tblGoalSheet.AddCell(emptyGoalSheet);
            tblGoalSheet.AddCell(emptyGoalSheet);
            CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.CreatedBy.FirstName + " " + GlShtReceive.CreatedBy.LastName + Resources.Qola.UIverbiage.Developer1, ProgressiveReport.tableFont));
            tblGoalSheet.AddCell(CellGoalSheet);

            tblGoalSheet.AddCell(emptyGoalSheet);

            if (GlShtReceive.GoalSheetDetails != null && GlShtReceive.GoalSheetDetails.Count > 0)
            {
                foreach (Common.GoalSheetDetails objGoalSheetDetail in GlShtReceive.GoalSheetDetails)
                {
                    CellGoalSheet = new PdfPCell(new Phrase(objGoalSheetDetail.CreatedOn.ToString("MM-dd-yyyy"), ProgressiveReport.tableFont));
                    CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblGoalSheet.AddCell(CellGoalSheet);
                    tblGoalSheet.AddCell(emptyGoalSheet);
                    CellGoalSheet = new PdfPCell(new Phrase(objGoalSheetDetail.Intervation, ProgressiveReport.tableFont));
                    tblGoalSheet.AddCell(CellGoalSheet);
                    tblGoalSheet.AddCell(emptyGoalSheet);
                    CellGoalSheet = new PdfPCell(new Phrase(objGoalSheetDetail.CreatedBy.FirstName + " " + objGoalSheetDetail.CreatedBy.LastName, ProgressiveReport.tableFont));
                    tblGoalSheet.AddCell(CellGoalSheet);

                    tblGoalSheet.AddCell(emptyGoalSheet);

                }

            }
            if (GlShtReceive.ResolvedDate.Day != 1 && GlShtReceive.ResolvedDate.Month != 1 && GlShtReceive.ResolvedDate.Year != 1)
            {
                CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.ResolvedDate.ToString("MM-dd-yyyy"), ProgressiveReport.tableFont));
                CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
                tblGoalSheet.AddCell(CellGoalSheet);
                tblGoalSheet.AddCell(emptyGoalSheet);
                tblGoalSheet.AddCell(emptyGoalSheet);
                CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.Effectiveness, ProgressiveReport.tableFont));
                tblGoalSheet.AddCell(CellGoalSheet);
                CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.ModifiedBy.FirstName + " " + GlShtReceive.ModifiedBy.LastName, ProgressiveReport.tableFont));
                tblGoalSheet.AddCell(CellGoalSheet);

                tblGoalSheet.AddCell(emptyGoalSheet);
            }
            iGoalNo++;
        }
        if (goalSheets.Count == 0)
        {
            for (int index = 0; index < 15; index++)
            {
                for (int colIndex = 0; colIndex < 6; colIndex++)
                {
                    PdfPCell emptyCell = new PdfPCell();
                    emptyCell.FixedHeight = 20f;
                    tblGoalSheet.AddCell(emptyCell);
                }
            }
        }
        var PhraseGoalSheetNote = new Phrase();
        PhraseGoalSheetNote.Add(new Chunk(Resources.Qola.UIverbiage.Note + ": ", ProgressiveReport.font8B));
        PhraseGoalSheetNote.Add(new Chunk(Resources.Qola.UIverbiage.Ifthereisasignificantchangeinaresident, ProgressiveReport.font8));

        PdfPCell tblGoalSheetNote = new PdfPCell(new Phrase(PhraseGoalSheetNote));
        tblGoalSheetNote.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetNote.VerticalAlignment = Element.ALIGN_MIDDLE;
        tblGoalSheetNote.PaddingTop = 5f;
        tblGoalSheetNote.PaddingBottom = 5f;
        tblGoalSheetNote.Colspan = 6;
        tblGoalSheet.AddCell(tblGoalSheetNote);

        if (goalSheets.Count > 0)
        {
            string userName = "";
            if (goalSheets[0].CreatedBy.LastName != "")
            {
                userName = goalSheets[0].CreatedBy.LastName;
            }
            if (goalSheets[0].CreatedBy.FirstName != "")
            {
                userName += ", " + goalSheets[0].CreatedBy.FirstName;
            }
            string userTypeName = goalSheets[0].CreatedBy.UserTypeName;
            DateTime mValue = Convert.ToDateTime(goalSheets[0].ModifiedOn);
            string modified = mValue.ToString("MMMM dd, yyyy");
            PdfPCell modifiedOn = new PdfPCell(new Phrase(userName + ", " + userTypeName + ", " + modified, ProgressiveReport.font8));
            modifiedOn.HorizontalAlignment = Element.ALIGN_LEFT;
            modifiedOn.VerticalAlignment = Element.ALIGN_MIDDLE;
            modifiedOn.Border = Rectangle.NO_BORDER;
            modifiedOn.PaddingTop = 5f;
            modifiedOn.PaddingBottom = 5f;
            modifiedOn.Colspan = 6;
            tblGoalSheet.AddCell(modifiedOn);
        }

        return tblGoalSheet;
    }
    public PdfPTable PrintResidentProfileP3()
    {
        PdfPTable profileTable = new PdfPTable(3);
        profileTable.WidthPercentage = 100f;
        float[] profileWidth = new float[] { 33.3f, 33.3f, 33.3f };
        profileTable.SetWidths(profileWidth);
        profileTable.DefaultCell.Border = 0;
        if (dsRCA.Tables.Count > 0 && dsRCA.Tables[0].Rows.Count > 0)
        {
            PdfPTable leftTable = new PdfPTable(1);
            leftTable.WidthPercentage = 100f;
            float[] leftWidth = new float[] { 100f };
            leftTable.SetWidths(leftWidth);
            leftTable.DefaultCell.Border = 1;
            PdfPTable midTable = new PdfPTable(1);
            midTable.WidthPercentage = 100f;
            float[] midWidth = new float[] { 100f };
            midTable.SetWidths(midWidth);
            midTable.DefaultCell.Border = 1;
            PdfPTable rightTable = new PdfPTable(2);
            rightTable.WidthPercentage = 100f;
            float[] rightWidth = new float[] { 10f, 80f };
            rightTable.SetWidths(rightWidth);
            rightTable.DefaultCell.Border = 1;
            string fontpath = HttpContext.Current.Server.MapPath(".");
            BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
            Font fontBoldTextOP = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);
            string LevelIndependent = string.Empty;
            string LevelPartialAssist = string.Empty;
            string LevelTotalCare = string.Empty;
            string LevelMemoryCare = string.Empty;
            string LevelOther = string.Empty;
            string MedicalSecuredUnit = string.Empty;
            string MedicalWanderer = string.Empty;
            string MedicalUnsafeSmoker = string.Empty;
            string MedicalSubstanceAbuse = string.Empty;
            string MedicalSeizures = string.Empty;
            string MedicalDiabetic = string.Empty;
            string MedicalPacemaker = string.Empty;
            string MedicalChokingRisk = string.Empty;
            string MedicalOther = string.Empty;
            string smedicalComment = string.Empty;
            string sTransferIndependent = string.Empty;
            string sTransferPerson1 = string.Empty;
            string sTransferPerson2 = string.Empty;
            string sTransferMachanicalLift = string.Empty;
            string sTransferOther = string.Empty;
            string specialist1 = string.Empty;
            string specialist2 = string.Empty;
            string specialist3 = string.Empty;
            string sInfectionDeseases = string.Empty;

            char cStatus;
            string sGender = string.Empty, sMaritalStatus = string.Empty;
            try
            {
                if (HttpContext.Current.Session["ResidentStatus"] != null && (char.TryParse(HttpContext.Current.Session["ResidentStatus"].ToString(), out cStatus) == true))
                {
                    if (dsRCA.Tables.Count > 0 && dsRCA.Tables[0].Rows.Count > 0)
                    {
                        DataTable table = dsRCA.Tables[0];
                        for (int index = 0; index < table.Columns.Count; index++)
                        {

                            string columnName = table.Columns[index].ToString();
                            if (columnName == "fd_level_of_care")
                            {
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "3LI"))
                                {
                                    LevelIndependent = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "2LP"))
                                {
                                    LevelPartialAssist = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "1LT"))
                                {
                                    LevelTotalCare = "P";
                                }
                            }
                            else if (columnName == "fd_special_alerts")
                            {
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "1SSU"))
                                {
                                    MedicalSecuredUnit = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "2SW"))
                                {
                                    MedicalWanderer = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "3SUS"))
                                {
                                    MedicalUnsafeSmoker = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "4SA"))
                                {
                                    MedicalSubstanceAbuse = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "5SS"))
                                {
                                    MedicalSeizures = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "6SD"))
                                {
                                    MedicalDiabetic = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "7SP"))
                                {
                                    MedicalPacemaker = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "9SCR"))
                                {
                                    MedicalChokingRisk = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "11SO"))
                                {
                                    MedicalOther = "P";
                                }
                            }
                            else if (columnName == "fd_special_alert_comment")
                            {
                                smedicalComment = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                            else if (columnName == "fd_mobility")
                            {
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "13TI"))
                                {
                                    sTransferIndependent = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "16T1"))
                                {
                                    sTransferPerson1 = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "17T2"))
                                {
                                    sTransferPerson2 = "P";
                                }
                                if (ProgressiveReport.getValue(table.Rows[0][columnName].ToString(), "21TE"))
                                {
                                    sTransferMachanicalLift = "P";
                                }
                            }
                            else if (columnName == "fd_transfers_comment")
                            {
                                sTransferOther = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                            else if (columnName == "fd_consults_specialist1")
                            {
                                specialist1 = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                            else if (columnName == "fd_consults_specialist2")
                            {
                                specialist2 = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                            else if (columnName == "fd_consults_specialist3")
                            {
                                specialist3 = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                            else if (columnName == "fd_others")
                            {
                                sInfectionDeseases = table.Rows[0][columnName].ToString() != "" ? table.Rows[0][columnName].ToString() : "";
                            }
                        }
                    }
                    if (objResident != null && objResident.ID > 0)
                    {


                        PdfPCell personalDetails = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PersonalDetails, ProgressiveReport.font9B));
                        personalDetails.HorizontalAlignment = Element.ALIGN_CENTER;
                        personalDetails.VerticalAlignment = Element.ALIGN_CENTER;
                        personalDetails.Colspan = 2;
                        personalDetails.Border = Rectangle.NO_BORDER;
                        personalDetails.BorderWidthLeft = .5f;
                        personalDetails.BorderWidthRight = .5f;
                        personalDetails.BorderWidthBottom = .5f;
                        personalDetails.BorderWidthTop = .5f;
                        leftTable.AddCell(personalDetails);


                        string moveinDate = dateToUSDateStringFormat(objResident.MoveInDate, "MM/dd/yyyy");
                        PdfPCell admissionDate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AdmissionDate + ": " + moveinDate, ProgressiveReport.font9));
                        admissionDate.Border = Rectangle.NO_BORDER;
                        admissionDate.BorderWidthLeft = .5f;
                        admissionDate.BorderWidthRight = .5f;
                        leftTable.AddCell(admissionDate);

                        string admitted = dateToUSDateStringFormat(objResident.AdmittedFrom, "MM/dd/yyyy");
                        if (admitted != "01/01/0001")
                        {
                            PdfPCell admissiondFrom = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Admissionfrom + ": " + admitted, ProgressiveReport.font9));
                            admissiondFrom.Border = Rectangle.NO_BORDER;
                            admissiondFrom.BorderWidthLeft = .5f;
                            admissiondFrom.BorderWidthRight = .5f;
                            leftTable.AddCell(admissiondFrom);
                        }


                        string dob = dateToUSDateStringFormat(objResident.BirthDate, "MM/dd/yyyy");
                        PdfPCell dobName = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateOfBirth + ": " + dob, ProgressiveReport.font9));
                        dobName.Border = Rectangle.NO_BORDER;
                        dobName.BorderWidthLeft = .5f;
                        dobName.BorderWidthRight = .5f;
                        leftTable.AddCell(dobName);

                        switch (objResident.MaritalStatus)
                        {
                            case 1:
                                sMaritalStatus = Resources.Qola.UIverbiage.Married;
                                break;
                            case 2:
                                sMaritalStatus = Resources.Qola.UIverbiage.Widowed;
                                break;
                            case 3:
                                sMaritalStatus = Resources.Qola.UIverbiage.Single;
                                break;
                            case 4:
                                sMaritalStatus = Resources.Qola.UIverbiage.Divorced;
                                break;
                            default:
                                sMaritalStatus = "";
                                break;
                        }
                        PdfPCell maritalStatus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MaritalStatus + ": " + sMaritalStatus, ProgressiveReport.font9));
                        maritalStatus.Border = Rectangle.NO_BORDER;
                        maritalStatus.BorderWidthLeft = .5f;
                        maritalStatus.BorderWidthRight = .5f;
                        leftTable.AddCell(maritalStatus);

                        if (objResident.Gendar == Convert.ToChar("M"))
                        {
                            sGender = Resources.Qola.UIverbiage.Male;
                        }
                        else
                        {
                            sGender = Resources.Qola.UIverbiage.Female;
                        }
                        PdfPCell marriedSex = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Gender + ": " + sGender, ProgressiveReport.font9));
                        marriedSex.Border = Rectangle.NO_BORDER;
                        marriedSex.BorderWidthLeft = .5f;
                        marriedSex.BorderWidthRight = .5f;
                        leftTable.AddCell(marriedSex);

                        PdfPCell healthCard = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.HC + "#: " + objResident.MBhealthNumber, ProgressiveReport.font9));
                        healthCard.Border = Rectangle.NO_BORDER;
                        healthCard.BorderWidthLeft = .5f;
                        healthCard.BorderWidthRight = .5f;
                        healthCard.BorderWidthBottom = .5f;
                        leftTable.AddCell(healthCard);

                        PdfPCell diagnosis = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Diagnosis, ProgressiveReport.font9B));
                        diagnosis.HorizontalAlignment = Element.ALIGN_CENTER;
                        diagnosis.VerticalAlignment = Element.ALIGN_CENTER;
                        diagnosis.Colspan = 2;
                        diagnosis.Border = Rectangle.NO_BORDER;
                        diagnosis.BorderWidthLeft = .5f;
                        diagnosis.BorderWidthRight = .5f;
                        diagnosis.BorderWidthBottom = .5f;
                        leftTable.AddCell(diagnosis);

                        PdfPCell diagnosisValue = new PdfPCell(new Phrase(objResident.HealthHistory, ProgressiveReport.font9));
                        diagnosisValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        diagnosisValue.Colspan = 2;
                        diagnosisValue.Rowspan = 12;
                        diagnosisValue.FixedHeight = 150f;
                        diagnosisValue.Border = Rectangle.NO_BORDER;
                        diagnosisValue.BorderWidthLeft = .5f;
                        diagnosisValue.BorderWidthRight = .5f;

                        leftTable.AddCell(diagnosisValue);

                        PdfPCell allergies = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Allergies, ProgressiveReport.font9B));
                        allergies.Colspan = 2;
                        allergies.HorizontalAlignment = Element.ALIGN_CENTER;
                        allergies.VerticalAlignment = Element.ALIGN_CENTER;
                        allergies.Border = Rectangle.BOX;
                        allergies.BorderWidthLeft = .5f;
                        allergies.BorderWidthRight = .5f;
                        leftTable.AddCell(allergies);

                        PdfPCell allergieValue = new PdfPCell(new Phrase(CreateAllergy(_iResidentId), ProgressiveReport.font9));
                        allergieValue.Colspan = 2;
                        allergieValue.Border = Rectangle.NO_BORDER;
                        allergieValue.Rowspan = 7;
                        allergieValue.FixedHeight = 90f;
                        allergieValue.BorderWidthLeft = .5f;
                        allergieValue.BorderWidthRight = .5f;
                        leftTable.AddCell(allergieValue);

                        PdfPCell physician = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Physician, ProgressiveReport.font9B));
                        physician.Border = Rectangle.BOX;
                        physician.Colspan = 2;
                        physician.BorderWidthLeft = .5f;
                        physician.BorderWidthRight = .5f;
                        physician.HorizontalAlignment = Element.ALIGN_CENTER;
                        physician.VerticalAlignment = Element.ALIGN_CENTER;
                        leftTable.AddCell(physician);

                        PdfPCell FamilyPhysician = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilyPhysician + ": " + objResident.Physician, ProgressiveReport.font9));
                        FamilyPhysician.Border = Rectangle.NO_BORDER;
                        FamilyPhysician.BorderWidthLeft = .5f;
                        FamilyPhysician.BorderWidthRight = .5f;
                        leftTable.AddCell(FamilyPhysician);

                        PdfPCell physicianTele = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.tel + " #: " + objResident.PhysicianPhone + "  " + Resources.Qola.UIverbiage.Fax + " #: " + objResident.PhysicianFaxNo, ProgressiveReport.font9));
                        physicianTele.Border = Rectangle.NO_BORDER;
                        physicianTele.BorderWidthLeft = .5f;
                        physicianTele.BorderWidthRight = .5f;
                        leftTable.AddCell(physicianTele);

                        PdfPCell physicianConsults = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Consults + "/" + Resources.Qola.UIverbiage.Specialist, ProgressiveReport.font8B));
                        physicianConsults.HorizontalAlignment = Element.ALIGN_CENTER;
                        physicianConsults.Border = Rectangle.NO_BORDER;
                        physicianConsults.BorderWidthLeft = .5f;
                        physicianConsults.BorderWidthRight = .5f;
                        physicianConsults.BorderWidthTop = .5f;
                        leftTable.AddCell(physicianConsults);

                        PdfPCell speciallist1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Specialist_1 + ": " + specialist1, ProgressiveReport.font9));
                        speciallist1.Border = Rectangle.NO_BORDER;
                        speciallist1.BorderWidthLeft = .5f;
                        speciallist1.BorderWidthRight = .5f;
                        leftTable.AddCell(speciallist1);

                        PdfPCell speciallist2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Specialist_2 + ": " + specialist2, ProgressiveReport.font9));
                        speciallist2.Border = Rectangle.NO_BORDER;
                        speciallist2.BorderWidthLeft = .5f;
                        speciallist2.BorderWidthRight = .5f;
                        leftTable.AddCell(speciallist2);

                        PdfPCell speciallist3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Specialist_3 + ": " + specialist3, ProgressiveReport.font9));
                        speciallist3.Border = Rectangle.NO_BORDER;
                        speciallist3.BorderWidthLeft = .5f;
                        speciallist3.BorderWidthRight = .5f;
                        speciallist3.BorderWidthBottom = .5f;
                        leftTable.AddCell(speciallist3);

                        PdfPCell pharmacy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pharmacy, ProgressiveReport.font9B));
                        pharmacy.Border = Rectangle.NO_BORDER;
                        pharmacy.BorderWidthLeft = .5f;
                        pharmacy.BorderWidthRight = .5f;
                        pharmacy.HorizontalAlignment = Element.ALIGN_CENTER;
                        pharmacy.VerticalAlignment = Element.ALIGN_CENTER;
                        pharmacy.Colspan = 2;
                        leftTable.AddCell(pharmacy);

                        string selfNurse = "";
                        string check = "";
                        if (objResident.PharmaceSelf != "")
                        {
                            selfNurse = objResident.PharmaceSelf;
                            check = "S";
                        }
                        else if (objResident.PharmaceNursing != "")
                        {
                            selfNurse = objResident.PharmaceNursing;
                            check = "N";
                        }
                        PdfPCell pharmacyName = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Name + ": " + selfNurse, ProgressiveReport.font9));
                        pharmacyName.Border = Rectangle.NO_BORDER;
                        pharmacyName.BorderWidthLeft = .5f;
                        pharmacyName.BorderWidthRight = .5f;
                        leftTable.AddCell(pharmacyName);


                        PdfPCell pharmacyFax = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Fax + " #: " + objResident.PharmaceFaxNumber, ProgressiveReport.font9));
                        pharmacyFax.Border = Rectangle.NO_BORDER;
                        pharmacyFax.BorderWidthLeft = .5f;
                        pharmacyFax.BorderWidthRight = .5f;
                        leftTable.AddCell(pharmacyFax);

                        PdfPCell pharmacyTel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.tel + " #: " + objResident.PharmacePhoneNo, ProgressiveReport.font9));
                        pharmacyTel.Border = Rectangle.NO_BORDER;
                        pharmacyTel.BorderWidthLeft = .5f;
                        pharmacyTel.BorderWidthRight = .5f;
                        leftTable.AddCell(pharmacyTel);


                        Phrase admin = new Phrase();
                        switch (check)
                        {
                            case "N":
                                Chunk nurse = new Chunk(Resources.Qola.UIverbiage.Nurse, ProgressiveReport.font8);
                                admin.Add(nurse);

                                break;
                            case "S":
                                Chunk self = new Chunk(Resources.Qola.UIverbiage.SelfAdmin, ProgressiveReport.font8);
                                admin.Add(self);

                                break;
                        }

                        PdfPCell pharmacyAdmin = new PdfPCell(admin);
                        pharmacyAdmin.Border = Rectangle.NO_BORDER;
                        pharmacyAdmin.BorderWidthLeft = .5f;
                        pharmacyAdmin.BorderWidthRight = .5f;
                        pharmacyAdmin.BorderWidthBottom = .5f;
                        leftTable.AddCell(pharmacyAdmin);


                        PdfPCell EmergencyContact = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EmergencyContacts, ProgressiveReport.font9B));
                        EmergencyContact.Border = Rectangle.BOX;
                        EmergencyContact.Colspan = 2;
                        EmergencyContact.HorizontalAlignment = Element.ALIGN_CENTER;
                        EmergencyContact.VerticalAlignment = Element.ALIGN_CENTER;
                        midTable.AddCell(EmergencyContact);


                        PdfPCell contactName1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Name1 + ": " + objResident.Contract1, ProgressiveReport.font8));
                        contactName1.Border = Rectangle.NO_BORDER;
                        contactName1.BorderWidthLeft = .5f;
                        contactName1.BorderWidthRight = .5f;
                        midTable.AddCell(contactName1);



                        string poaCare = objResident.POACare != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell POAcare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POACareYesOrNO + ": " + poaCare, ProgressiveReport.font8));
                        POAcare.Border = Rectangle.NO_BORDER;
                        POAcare.BorderWidthLeft = .5f;
                        POAcare.BorderWidthRight = .5f;
                        midTable.AddCell(POAcare);

                        string poaFinance = objResident.POAFinance != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell POAFinance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POAfinanceYesOrNo + ": " + poaFinance, ProgressiveReport.font8));
                        POAFinance.Border = Rectangle.NO_BORDER;
                        POAFinance.BorderWidthLeft = .5f;
                        POAFinance.BorderWidthRight = .5f;
                        midTable.AddCell(POAFinance);

                        PdfPCell contactRealation1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Relationship + ": " + objResident.Relationship1, ProgressiveReport.font8));
                        contactRealation1.Border = Rectangle.NO_BORDER;
                        contactRealation1.BorderWidthLeft = .5f;
                        contactRealation1.BorderWidthRight = .5f;

                        midTable.AddCell(contactRealation1);


                        PdfPCell Realation1Value = new PdfPCell(new Phrase("", ProgressiveReport.font9));

                        Realation1Value.Border = Rectangle.NO_BORDER;
                        Realation1Value.BorderWidthLeft = .5f;
                        Realation1Value.BorderWidthRight = .5f;
                        Realation1Value.FixedHeight = 15f;
                        Realation1Value.BorderWidthBottom = .5f;
                        midTable.AddCell(Realation1Value);


                        PdfPCell telephone = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TelephoneNumber, ProgressiveReport.font9));
                        telephone.Border = Rectangle.NO_BORDER;
                        telephone.HorizontalAlignment = Element.ALIGN_CENTER;
                        telephone.VerticalAlignment = Element.ALIGN_CENTER;
                        telephone.BorderWidthLeft = .5f;
                        telephone.BorderWidthRight = .5f;
                        telephone.BorderWidthBottom = .5f;

                        midTable.AddCell(telephone);

                        PdfPCell telephoneH = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.H + ": " + objResident.HomePhone1, ProgressiveReport.font8));
                        telephoneH.Border = Rectangle.NO_BORDER;
                        telephoneH.BorderWidthLeft = .5f;
                        telephoneH.BorderWidthRight = .5f;
                        midTable.AddCell(telephoneH);

                        PdfPCell telephoneW = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.W + ": " + objResident.BusinessPhone1, ProgressiveReport.font8));
                        telephoneW.Border = Rectangle.NO_BORDER;
                        telephoneW.BorderWidthLeft = .5f;
                        telephoneW.BorderWidthRight = .5f;
                        midTable.AddCell(telephoneW);

                        PdfPCell telephoneC = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.C + ": " + objResident.CellPhone1, ProgressiveReport.font8));
                        telephoneC.Border = Rectangle.NO_BORDER;
                        telephoneC.BorderWidthLeft = .5f;
                        telephoneC.BorderWidthRight = .5f;
                        midTable.AddCell(telephoneC);

                        PdfPCell Address = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Address, ProgressiveReport.font9));
                        Address.Border = Rectangle.NO_BORDER;
                        Address.HorizontalAlignment = Element.ALIGN_CENTER;
                        Address.VerticalAlignment = Element.ALIGN_CENTER;
                        Address.BorderWidthTop = .5f;
                        Address.BorderWidthLeft = .5f;
                        Address.BorderWidthRight = .5f;

                        midTable.AddCell(Address);

                        PdfPCell AddressValue = new PdfPCell(new Phrase(objResident.Address1, ProgressiveReport.font8));
                        AddressValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        AddressValue.VerticalAlignment = Element.ALIGN_LEFT;
                        AddressValue.BorderWidthLeft = .5f;
                        AddressValue.BorderWidthRight = .5f;
                        AddressValue.Rowspan = 3;
                        AddressValue.FixedHeight = 30f;
                        midTable.AddCell(AddressValue);


                        PdfPCell Email = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Email + ": " + objResident.Email1, ProgressiveReport.font8));
                        Email.Border = Rectangle.NO_BORDER;
                        Email.BorderWidthLeft = .5f;
                        Email.BorderWidthRight = .5f;
                        Email.BorderWidthBottom = .5f;
                        midTable.AddCell(Email);

                        PdfPCell contactName2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Two + Resources.Qola.UIverbiage.Name + ": " + objResident.Contract2, ProgressiveReport.font8));
                        contactName2.Border = Rectangle.NO_BORDER;
                        contactName2.BorderWidthLeft = .5f;
                        contactName2.BorderWidthRight = .5f;
                        midTable.AddCell(contactName2);

                        string POAcare2 = objResident.POACare != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell POAcarem2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POACareYesOrNO + ": " + POAcare2, ProgressiveReport.font8));
                        POAcarem2.Border = Rectangle.NO_BORDER;
                        POAcarem2.BorderWidthLeft = .5f;
                        POAcarem2.BorderWidthRight = .5f;
                        midTable.AddCell(POAcarem2);

                        string poaFinance2 = objResident.POACare != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell POAFinance2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POAfinanceYesOrNo + ": " + poaFinance2, ProgressiveReport.font8));
                        POAFinance2.Border = Rectangle.NO_BORDER;
                        POAFinance2.BorderWidthLeft = .5f;
                        POAFinance2.BorderWidthRight = .5f;
                        midTable.AddCell(POAFinance2);

                        PdfPCell contactRealation2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Relationship + ": " + objResident.Relationship2, ProgressiveReport.font8));
                        contactRealation2.Border = Rectangle.NO_BORDER;

                        contactRealation2.BorderWidthLeft = .5f;
                        contactRealation2.BorderWidthRight = .5f;
                        midTable.AddCell(contactRealation2);


                        PdfPCell contactRealation2Value = new PdfPCell(new Phrase("", ProgressiveReport.font8));
                        contactRealation2Value.Border = Rectangle.NO_BORDER;
                        contactRealation2Value.BorderWidthLeft = .5f;
                        contactRealation2Value.BorderWidthRight = .5f;
                        contactRealation2Value.BorderWidthBottom = .5f;
                        contactRealation2Value.FixedHeight = 15f;
                        midTable.AddCell(contactRealation2Value);

                        PdfPCell contactTelePhone2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TelephoneNumber + ":", ProgressiveReport.font9));
                        contactTelePhone2.Border = Rectangle.NO_BORDER;
                        contactTelePhone2.HorizontalAlignment = Element.ALIGN_CENTER;
                        contactTelePhone2.VerticalAlignment = Element.ALIGN_CENTER;
                        contactTelePhone2.BorderWidthLeft = .5f;
                        contactTelePhone2.BorderWidthRight = .5f;
                        contactTelePhone2.BorderWidthBottom = .5f;
                        midTable.AddCell(contactTelePhone2);

                        PdfPCell telephone2H = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.H + ": " + objResident.HomePhone2, ProgressiveReport.font8));
                        telephone2H.Border = Rectangle.NO_BORDER;
                        telephone2H.BorderWidthLeft = .5f;
                        telephone2H.BorderWidthRight = .5f;
                        midTable.AddCell(telephone2H);

                        PdfPCell telephone2W = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.W + ": " + objResident.BusinessPhone2, ProgressiveReport.font8));
                        telephone2W.Border = Rectangle.NO_BORDER;
                        telephone2W.BorderWidthLeft = .5f;
                        telephone2W.BorderWidthRight = .5f;
                        midTable.AddCell(telephone2W);


                        PdfPCell telephone2C = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.C + ": " + objResident.CellPhone2, ProgressiveReport.font8));
                        telephone2C.Border = Rectangle.NO_BORDER;
                        telephone2C.BorderWidthLeft = .5f;
                        telephone2C.BorderWidthRight = .5f;
                        midTable.AddCell(telephone2C);

                        PdfPCell Address2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Address, ProgressiveReport.font9));
                        Address2.Border = Rectangle.NO_BORDER;
                        Address2.HorizontalAlignment = Element.ALIGN_CENTER;
                        Address2.VerticalAlignment = Element.ALIGN_CENTER;
                        Address2.BorderWidthTop = .5f;
                        Address2.BorderWidthLeft = .5f;
                        Address2.BorderWidthRight = .5f;

                        midTable.AddCell(Address2);

                        PdfPCell Address2Value = new PdfPCell(new Phrase(objResident.Address2, ProgressiveReport.font8));
                        Address2Value.Border = Rectangle.BOX;
                        Address2Value.HorizontalAlignment = Element.ALIGN_LEFT;
                        Address2Value.HorizontalAlignment = Element.ALIGN_LEFT;
                        Address2Value.VerticalAlignment = Element.ALIGN_LEFT;
                        Address2Value.BorderWidthLeft = .5f;
                        Address2Value.BorderWidthRight = .5f;
                        Address2Value.Rowspan = 3;
                        Address2Value.FixedHeight = 30f;
                        midTable.AddCell(Address2Value);

                        PdfPCell Email2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Email + ": " + objResident.Email2, ProgressiveReport.font8));
                        Email2.Border = Rectangle.NO_BORDER;
                        Email2.BorderWidthLeft = .5f;
                        Email2.BorderWidthRight = .5f;
                        Email2.BorderWidthBottom = .5f;
                        midTable.AddCell(Email2);

                        PdfPCell Name3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Three + Resources.Qola.UIverbiage.Name + ": " + objResident.Contract3, ProgressiveReport.font8));
                        Name3.Border = Rectangle.NO_BORDER;
                        Name3.BorderWidthLeft = .5f;
                        Name3.BorderWidthRight = .5f;
                        midTable.AddCell(Name3);

                        string poa3careValue = objResident.POACare != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell poa3care = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POACareYesOrNO + ": " + poa3careValue, ProgressiveReport.font8));
                        poa3care.Border = Rectangle.NO_BORDER;
                        poa3care.BorderWidthLeft = .5f;
                        poa3care.BorderWidthRight = .5f;
                        midTable.AddCell(poa3care);


                        string sPoa3Finance = objResident.POACare != "" ? Resources.Qola.UIverbiage.Yes : Resources.Qola.UIverbiage.No;
                        PdfPCell poa3Finance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POAfinanceYesOrNo + ": " + sPoa3Finance, ProgressiveReport.font8));
                        poa3Finance.Border = Rectangle.NO_BORDER;
                        poa3Finance.BorderWidthLeft = .5f;
                        poa3Finance.BorderWidthRight = .5f;
                        midTable.AddCell(poa3Finance);


                        PdfPCell relation3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Relationship + ": " + objResident.Relationship3, ProgressiveReport.font8));

                        relation3.Border = Rectangle.NO_BORDER;
                        relation3.BorderWidthLeft = .5f;
                        relation3.BorderWidthRight = .5f;
                        relation3.FixedHeight = 15f;
                        midTable.AddCell(relation3);
                        PdfPCell relationValue = new PdfPCell(new Phrase("", ProgressiveReport.font8));

                        relationValue.Border = Rectangle.NO_BORDER;
                        relationValue.BorderWidthLeft = .5f;
                        relationValue.BorderWidthRight = .5f;
                        relationValue.FixedHeight = 15f;
                        relationValue.BorderWidthBottom = .5f;
                        midTable.AddCell(relationValue);

                        PdfPCell Contact3telephone = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TelephoneNumber, ProgressiveReport.font8B));
                        Contact3telephone.Border = Rectangle.NO_BORDER;
                        Contact3telephone.HorizontalAlignment = Element.ALIGN_CENTER;
                        Contact3telephone.VerticalAlignment = Element.ALIGN_CENTER;
                        Contact3telephone.BorderWidthLeft = .5f;
                        Contact3telephone.BorderWidthRight = .5f;
                        Contact3telephone.BorderWidthBottom = .5f;
                        midTable.AddCell(Contact3telephone);

                        PdfPCell contact3H = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.H + ": " + objResident.HomePhone3, ProgressiveReport.font8));
                        contact3H.Border = Rectangle.NO_BORDER;
                        contact3H.BorderWidthLeft = .5f;
                        contact3H.BorderWidthRight = .5f;
                        midTable.AddCell(contact3H);

                        PdfPCell contact3W = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.W + ": " + objResident.BusinessPhone3, ProgressiveReport.font8));
                        contact3W.Border = Rectangle.NO_BORDER;
                        contact3W.BorderWidthLeft = .5f;
                        contact3W.BorderWidthRight = .5f;
                        midTable.AddCell(contact3W);


                        PdfPCell contact3C = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.C + ": " + objResident.CellPhone3, ProgressiveReport.font8));
                        contact3C.Border = Rectangle.NO_BORDER;
                        contact3C.BorderWidthLeft = .5f;
                        contact3C.BorderWidthRight = .5f;
                        midTable.AddCell(contact3C);

                        PdfPCell contact3Address = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Address, ProgressiveReport.font9B));
                        contact3Address.Border = Rectangle.NO_BORDER;
                        contact3Address.BorderWidthTop = .5f;
                        contact3Address.BorderWidthLeft = .5f;
                        contact3Address.BorderWidthRight = .5f;
                        contact3Address.HorizontalAlignment = Element.ALIGN_CENTER;
                        contact3Address.VerticalAlignment = Element.ALIGN_CENTER;
                        midTable.AddCell(contact3Address);

                        PdfPCell contact3AddressValue = new PdfPCell(new Phrase(objResident.Address3, ProgressiveReport.font8));
                        telephoneC.Border = Rectangle.BOX;
                        contact3AddressValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        contact3AddressValue.HorizontalAlignment = Element.ALIGN_LEFT;
                        contact3AddressValue.VerticalAlignment = Element.ALIGN_LEFT;
                        contact3AddressValue.BorderWidthLeft = .5f;
                        contact3AddressValue.BorderWidthRight = .5f;
                        contact3AddressValue.BorderWidthBottom = .5f;
                        contact3AddressValue.Rowspan = 3;
                        contact3AddressValue.FixedHeight = 30f;
                        midTable.AddCell(contact3AddressValue);

                        PdfPCell contact3Email = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Email + " #:" + objResident.Email3, ProgressiveReport.font8));
                        contact3Email.Border = Rectangle.NO_BORDER;
                        contact3Email.BorderWidthLeft = .5f;
                        contact3Email.BorderWidthRight = .5f;
                        contact3Email.BorderWidthBottom = .5f;
                        midTable.AddCell(contact3Email);

                        PdfPCell LevelOfCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.LevelOfCare, ProgressiveReport.font9B));
                        LevelOfCare.Border = Rectangle.BOX;
                        LevelOfCare.Colspan = 2;
                        LevelOfCare.HorizontalAlignment = Element.ALIGN_CENTER;
                        LevelOfCare.VerticalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(LevelOfCare);
                        PdfPCell cellLevelIndependentValue = new PdfPCell(new Phrase(LevelIndependent, fontBoldTextOP));
                        rightTable.AddCell(cellLevelIndependentValue);

                        PdfPCell cellLevelIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, ProgressiveReport.font8));
                        rightTable.AddCell(cellLevelIndependent);

                        PdfPCell cellPartialAssisttValue = new PdfPCell(new Phrase(LevelPartialAssist, fontBoldTextOP));
                        rightTable.AddCell(cellPartialAssisttValue);

                        PdfPCell cellLevelPartialAssist = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PartialAssist, ProgressiveReport.font8));
                        rightTable.AddCell(cellLevelPartialAssist);


                        PdfPCell cellTotalcareValue = new PdfPCell(new Phrase(LevelTotalCare, fontBoldTextOP));
                        rightTable.AddCell(cellTotalcareValue);

                        PdfPCell cellTotalcare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TotalCare, ProgressiveReport.font8));
                        rightTable.AddCell(cellTotalcare);

                        PdfPCell cellmemoryCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MemoryCare + ": ", ProgressiveReport.font8));
                        cellmemoryCare.Colspan = 2;
                        rightTable.AddCell(cellmemoryCare);

                        PdfPCell Levelother = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other + ": ", ProgressiveReport.font8));
                        Levelother.Colspan = 2;

                        rightTable.AddCell(Levelother);

                        PdfPCell cellOtherValue = new PdfPCell(new Phrase("", ProgressiveReport.font8));
                        cellOtherValue.Colspan = 2;
                        cellOtherValue.FixedHeight = 10f;
                        rightTable.AddCell(cellOtherValue);


                        PdfPCell religion = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Religion, ProgressiveReport.font9B));
                        religion.Colspan = 2;
                        religion.HorizontalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(religion);

                        PdfPCell religionValue = new PdfPCell(new Phrase(objResident.ReligiousAffiliation, ProgressiveReport.font9GreyB));
                        religionValue.Colspan = 2;
                        religionValue.FixedHeight = 12f;
                        religionValue.HorizontalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(religionValue);

                        PdfPCell religionValue1 = new PdfPCell(new Phrase("", ProgressiveReport.font9GreyB));
                        religionValue1.Colspan = 2;
                        religionValue1.FixedHeight = 12f;
                        religionValue1.HorizontalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(religionValue1);

                        PdfPCell CodeStatus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CodeStatus, ProgressiveReport.font9B));
                        CodeStatus.Border = Rectangle.BOX;
                        CodeStatus.Colspan = 2;
                        CodeStatus.HorizontalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(CodeStatus);


                        PdfPCell Dnr = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DNR + ": " + objResident.DNR, ProgressiveReport.font8));
                        Dnr.Border = Rectangle.NO_BORDER;
                        Dnr.BorderWidthLeft = .5f;
                        Dnr.BorderWidthRight = .5f;
                        Dnr.Colspan = 2;
                        rightTable.AddCell(Dnr);


                        PdfPCell FullCode = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FullCode + ": " + objResident.FullCode, ProgressiveReport.font8));
                        FullCode.Border = Rectangle.NO_BORDER;
                        FullCode.BorderWidthLeft = .5f;
                        FullCode.BorderWidthRight = .5f;
                        FullCode.Colspan = 2;
                        rightTable.AddCell(FullCode);



                        PdfPCell transfercell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Transfers, ProgressiveReport.font9B));
                        transfercell.Colspan = 2;
                        transfercell.Rowspan = 2;
                        transfercell.HorizontalAlignment = Element.ALIGN_CENTER;
                        transfercell.VerticalAlignment = Element.ALIGN_CENTER;
                        rightTable.AddCell(transfercell);

                        PdfPCell transferIndependentValue = new PdfPCell(new Phrase(sTransferIndependent, fontBoldTextOP));
                        rightTable.AddCell(transferIndependentValue);

                        PdfPCell transferIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, ProgressiveReport.font8));
                        rightTable.AddCell(transferIndependent);

                        PdfPCell transferPerson1Value = new PdfPCell(new Phrase(sTransferPerson1, fontBoldTextOP));
                        rightTable.AddCell(transferPerson1Value);

                        PdfPCell transferPerson1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.One + Resources.Qola.UIverbiage.Person, ProgressiveReport.font8));
                        rightTable.AddCell(transferPerson1);
                        PdfPCell transferPerson2Value = new PdfPCell(new Phrase(sTransferPerson2, fontBoldTextOP));
                        rightTable.AddCell(transferPerson2Value);
                        PdfPCell transferPerson2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Two1 + Resources.Qola.UIverbiage.Person, ProgressiveReport.font8));
                        rightTable.AddCell(transferPerson2);
                        PdfPCell transferMechValue = new PdfPCell(new Phrase(sTransferMachanicalLift, fontBoldTextOP));
                        rightTable.AddCell(transferMechValue);
                        PdfPCell transferMech = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MechanicalLift, ProgressiveReport.font8));
                        rightTable.AddCell(transferMech);
                        PdfPCell otherTransfer = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, ProgressiveReport.font8));
                        otherTransfer.Colspan = 2;
                        rightTable.AddCell(otherTransfer);
                        PdfPCell otherTransferValue = new PdfPCell(new Phrase(sTransferOther, ProgressiveReport.font8));
                        otherTransferValue.Colspan = 2;
                        otherTransferValue.FixedHeight = 60f;
                        rightTable.AddCell(otherTransferValue);
                        PdfPCell infectionDeseases = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InfectionDeseases, ProgressiveReport.font9B));
                        infectionDeseases.HorizontalAlignment = Element.ALIGN_CENTER;
                        infectionDeseases.VerticalAlignment = Element.ALIGN_CENTER;
                        infectionDeseases.Colspan = 2;
                        rightTable.AddCell(infectionDeseases);

                        PdfPCell infectionValue = new PdfPCell(new Phrase(sInfectionDeseases, ProgressiveReport.font8));
                        infectionValue.Colspan = 2;
                        infectionValue.Rowspan = 7;
                        infectionValue.MinimumHeight = 80f;
                        rightTable.AddCell(infectionValue);

                        profileTable.AddCell(leftTable);
                        profileTable.AddCell(midTable);
                        profileTable.AddCell(rightTable);

                    }
                }
            }
            catch (Exception ex)
            {
                Log.Write("Resident Profile Print - CreatePersonalDetails | " + ex.Message.ToString());
            }
        }
        return profileTable;
    }
    public MultiColumnText PrintResidentCareAssessmentP3(Document doc)
    {
        return PrintResidentCareAssessmentPhase3(dsRCA, doc);
    }
    public PdfPTable PrintResidentCareAssessmentV3(Document doc)
    {
        return PrintResidentCareAssessmentV3(dsRCA, doc);
    }
    public PdfPTable PrintResidentCareAssessmentP3Common(Document doc, int iCarePlanId = 0)
    {
        return PrintResidentCareAssessmentP3Common(dsRCA, doc, iCarePlanId);
    }
    public MultiColumnText PrintResidentCareAssessmentPhase3(DataSet dsAssessmentDetails, Document doc)
    {
        MultiColumnText multiColumn = new MultiColumnText();

        string exception = string.Empty;
        string assessmentDate = string.Empty;
        int assessmentValue = 0;
        string userName = string.Empty;
        string userType = string.Empty;
        string completedOn = string.Empty;

        Common.Residents resident;

        try
        {
            resident = new Common.Residents();
            if (Session["ResidentStatus"] != null && Session["ResidentStatus"].ToString() == "I")
            {
                resident = DAL.Residents.GetInActiveResidentById(Convert.ToInt32(Session["ResidentId"]));
            }
            else
            {
                resident = DAL.Residents.GetResidentById(Convert.ToInt32(Session["ResidentId"]));
            }
            string residentnamefooter = resident.LastName + " " + resident.FirstName;
            string suitenofooter = resident.SuiteNo;
            string reportname = "Resident Care Assessment";


            if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
            {
                dsAssessmentDetails = DAL.PlanOfCare.GetPlanOfCare(Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_id"]));
                if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
                {
                    userName = dsAssessmentDetails.Tables[0].Rows[0]["As_fd_last_name"].ToString() + ", " + dsAssessmentDetails.Tables[0].Rows[0]["As_fd_first_name"].ToString();
                    userType = dsAssessmentDetails.Tables[0].Rows[0]["As_fd_user_type"].ToString();
                    DateTime de = Convert.ToDateTime(dsAssessmentDetails.Tables[0].Rows[0]["fd_modified_on"]);
                    completedOn = de.ToString("MMMM dd, yyyy");
                }
                string modify = userName + ", " + userType + ", " + completedOn;

                doc = new Document(PageSize.A4, 20, 20, 25, 15);
                System.IO.MemoryStream mstream = new System.IO.MemoryStream();
                PdfWriter writer = PdfWriter.GetInstance(doc, mstream);

                writer.PageEvent = new pdfHeaderFooterAssessment(residentnamefooter, suitenofooter, reportname, modify);
                doc.Open();

                multiColumn.AddSimpleColumn(20f, doc.PageSize.Width - 395f);
                multiColumn.AddSimpleColumn(215f, doc.PageSize.Width - 210f);
                multiColumn.AddSimpleColumn(400f, doc.PageSize.Width - 15f);
                Font tableFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.NORMAL, BaseColor.BLACK);
                Font fontHDBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                Font fontBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                Font fontLargeBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                string fontpath = Server.MapPath(".");
                BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
                Font fontBoldTextOP = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);

                iTextSharp.text.Font fontFooter = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.ITALIC, BaseColor.DARK_GRAY);
                iTextSharp.text.Font fontGeneralText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
                iTextSharp.text.Font fontBoldHeadText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                iTextSharp.text.Font fontCellHeader = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);

                Paragraph pgHeader = new Paragraph();
                Phrase phHeader = new Phrase(Resources.Qola.UIverbiage.ResidentCareAssessment, fontLargeBoldText);
                pgHeader.Add(phHeader);
                pgHeader.Alignment = Element.ALIGN_CENTER;
                doc.Add(pgHeader);


                PdfPTable tblHeader = new PdfPTable(4);
                tblHeader.WidthPercentage = 100f;
                float[] wthHead = new float[] { 1f, 1f, 1f, 0.32f };
                tblHeader.SetWidths(wthHead);
                tblHeader.SpacingBefore = 5f;



                PdfPCell hdCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentName + " : ", fontBoldText));
                hdCell1.Border = 0;
                tblHeader.AddCell(hdCell1);

                PdfPCell hdCell2 = new PdfPCell(new Phrase(resident.LastName + ", " + resident.FirstName, fontBoldText));
                hdCell2.Border = 0;
                hdCell2.PaddingLeft = -100;
                hdCell2.HorizontalAlignment = Element.ALIGN_LEFT;
                tblHeader.AddCell(hdCell2);

                PdfPCell hdCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suite + " # : " + resident.SuiteNo, fontBoldText));
                hdCell3.Border = 0;
                hdCell3.Colspan = 2;
                hdCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(hdCell3);

                assessmentValue = Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_id"]);
                PdfPCell cellAssDate;
                if (assessmentValue != 0)
                {
                    assessmentDate = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_date"]);
                }

                cellAssDate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + " : ", fontBoldText));
                cellAssDate.Border = 0;
                cellAssDate.Colspan = 3;
                cellAssDate.PaddingRight = -12;
                cellAssDate.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(cellAssDate);

                cellAssDate = new PdfPCell(new Phrase(assessmentDate, fontBoldText));
                cellAssDate.Border = 0;
                cellAssDate.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(cellAssDate);

                if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
                {
                    doc.Add(tblHeader);
                    float[] wthAssessed = new float[] { 1f, 8f };


                    PdfPCell spaceCell1 = new PdfPCell(new Phrase(""));
                    spaceCell1.Colspan = 2;
                    spaceCell1.FixedHeight = 8;
                    spaceCell1.Border = 0;

                    PdfPCell BlaContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Continent, tableFont));
                    PdfPCell BlaOCCInContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OCCInContinent, tableFont));
                    PdfPCell BlaInContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InContinent, tableFont));
                    PdfPCell Independent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    PdfPCell Supervised = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervised, tableFont));
                    PdfPCell HomeAMCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Home, tableFont));
                    PdfPCell AgencyAMCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
                    PdfPCell Assisted = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assisted, tableFont));

                    PdfPCell OSats = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sats, tableFont));
                    PdfPCell ForeWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ForeWheel, tableFont));
                    PdfPCell NA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    PdfPCell TwoWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TwoWheel, tableFont));
                    PdfPCell NoWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NoWheel, tableFont));
                    PdfPCell Yes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                    PdfPCell No = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                    PdfPCell NutIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    PdfPCell Elimination = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Elimination, fontHDBoldText));
                    PdfPCell DependentCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                    PdfPCell AM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AM, tableFont));
                    PdfPCell PM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PM, tableFont));
                    PdfPCell AMPM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BothAmPm, tableFont));

                    PdfPCell dependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                    PdfPCell na = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    Elimination.Colspan = 2;
                    Elimination.BackgroundColor = BaseColor.LIGHT_GRAY;
                    PdfPCell txtBlaComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtBlaComments.Colspan = 2;


                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString()))
                    {
                        PdfPTable tblAssessed = new PdfPTable(2);
                        tblAssessed.WidthPercentage = 100f;
                        tblAssessed.SetWidths(wthAssessed);

                        PdfPCell Assessed = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assessed, fontHDBoldText));
                        Assessed.HorizontalAlignment = Element.ALIGN_LEFT;
                        Assessed.Colspan = 2;
                        Assessed.BackgroundColor = BaseColor.LIGHT_GRAY;
                        tblAssessed.AddCell(Assessed);

                        PdfPCell Whenassessed = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assessed, fontBoldText));
                        Whenassessed.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                        Whenassessed.HorizontalAlignment = Element.ALIGN_CENTER;
                        Whenassessed.Colspan = 2;
                        tblAssessed.AddCell(Whenassessed);
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "5AS") != "")
                        {
                            PdfPCell NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "5AS"), fontBoldTextOP));
                            tblAssessed.AddCell(NAOP);
                            PdfPCell NA1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));

                            tblAssessed.AddCell(NA1);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "2AU") != "")
                        {
                            PdfPCell CUpdateOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "2AU"), fontBoldTextOP));
                            tblAssessed.AddCell(CUpdateOP);
                            PdfPCell CUpdate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Update, tableFont));

                            tblAssessed.AddCell(CUpdate);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "6AN") != "")
                        {
                            PdfPCell SemiAnnualAssessmentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "6AN"), fontBoldTextOP));
                            tblAssessed.AddCell(SemiAnnualAssessmentOP);
                            PdfPCell SemiAnnualAssessment = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SemiAnnualAssessment, tableFont));

                            tblAssessed.AddCell(SemiAnnualAssessment);
                        }
                        tblAssessed.AddCell(spaceCell1);
                        multiColumn.AddElement(tblAssessed);
                    }
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_value"].ToString()) ||
                        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_date"].ToString()) ||
                        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString()) ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_date"].ToString()) ||
                        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString()) ||
                     !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_date"].ToString()) ||
                     !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString()) ||
                    !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_date"].ToString()))
                    {

                        if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_value"].ToString()) ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_date"].ToString())
                            )
                        {

                            PdfPTable tblBP = new PdfPTable(2);
                            tblBP.WidthPercentage = 100f;
                            tblBP.SetWidths(wthAssessed);


                            PdfPCell ModifyBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.VitalSign, fontHDBoldText));
                            ModifyBP.HorizontalAlignment = Element.ALIGN_LEFT;
                            ModifyBP.Colspan = 2;
                            ModifyBP.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblBP.AddCell(ModifyBP);

                            PdfPCell ModifyBP1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BP, fontBoldText));
                            ModifyBP1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            ModifyBP1.HorizontalAlignment = Element.ALIGN_CENTER;
                            ModifyBP1.Colspan = 2;
                            tblBP.AddCell(ModifyBP1);
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_value"].ToString()))
                            {
                                PdfPCell ValueBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_value"].ToString(), tableFont));
                                ValueBP.Colspan = 2;
                                tblBP.AddCell(ValueBP);
                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_date"].ToString()))
                            {
                                PdfPCell ValueBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_date"].ToString(), tableFont));
                                ValueBP.Colspan = 2;
                                tblBP.AddCell(ValueBP);

                            }
                            tblBP.AddCell(spaceCell1);
                            multiColumn.AddElement(tblBP);
                        }

                        if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString()) ||
                           !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_date"].ToString())
                           )
                        {

                            PdfPTable tblPulse = new PdfPTable(2);
                            tblPulse.WidthPercentage = 100f;
                            tblPulse.SetWidths(wthAssessed);

                            PdfPCell ModifyPulse1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pulse, fontBoldText));
                            ModifyPulse1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            ModifyPulse1.HorizontalAlignment = Element.ALIGN_CENTER;
                            ModifyPulse1.Colspan = 2;
                            tblPulse.AddCell(ModifyPulse1);
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString()))
                            {
                                PdfPCell ValueBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString(), tableFont));
                                ValueBP.Colspan = 2;
                                tblPulse.AddCell(ValueBP);
                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_date"].ToString()))
                            {
                                PdfPCell ValueBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_date"].ToString(), tableFont));
                                ValueBP.Colspan = 2;
                                tblPulse.AddCell(ValueBP);

                            }
                            tblPulse.AddCell(spaceCell1);
                            multiColumn.AddElement(tblPulse);

                        }

                        if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString()) ||
                         !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_date"].ToString())
                            )
                        {
                            PdfPTable tblWeight = new PdfPTable(2);
                            tblWeight.WidthPercentage = 100f;
                            tblWeight.SetWidths(wthAssessed);



                            PdfPCell ModifyBP1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Weight, fontBoldText));
                            ModifyBP1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            ModifyBP1.HorizontalAlignment = Element.ALIGN_CENTER;
                            ModifyBP1.Colspan = 2;
                            tblWeight.AddCell(ModifyBP1);
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString()) && Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_measurement"].ToString()) > 0)
                            {
                                PdfPCell ValueWeigh = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString(), tableFont));
                                ValueWeigh.Colspan = 2;
                                tblWeight.AddCell(ValueWeigh);
                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_date"].ToString()))
                            {
                                PdfPCell DateWeight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_date"].ToString(), tableFont));
                                DateWeight.Colspan = 2;
                                tblWeight.AddCell(DateWeight);
                            }
                            tblWeight.AddCell(spaceCell1);
                            multiColumn.AddElement(tblWeight);
                        }

                        if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString()) ||
                        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_date"].ToString()))
                        {

                            PdfPTable tblHeight = new PdfPTable(2);
                            tblHeight.WidthPercentage = 100f;
                            tblHeight.SetWidths(wthAssessed);


                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString()) ||
                                (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_measurement"].ToString()) && Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_measurement"].ToString()) > 0) ||
                                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_date"].ToString())
                                )
                            {
                                PdfPCell ModifyBP1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Height, fontBoldText));
                                ModifyBP1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                ModifyBP1.HorizontalAlignment = Element.ALIGN_CENTER;
                                ModifyBP1.Colspan = 2;
                                tblHeight.AddCell(ModifyBP1);
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString()))
                                {
                                    PdfPCell HeightValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Value + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString(), tableFont));
                                    HeightValue.Colspan = 2;
                                    tblHeight.AddCell(HeightValue);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_date"].ToString()))
                                {
                                    PdfPCell DateHeight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_height_date"].ToString(), tableFont));
                                    DateHeight.Colspan = 2;
                                    tblHeight.AddCell(DateHeight);
                                }
                            }
                            tblHeight.AddCell(spaceCell1);
                            multiColumn.AddElement(tblHeight);
                        }

                    }

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString()) ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7AD") != "" ||

                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "52PH") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "53PA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP") != "" ||
                        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_AM_agency_name"].ToString())
                        )
                    {
                        PdfPTable tblAMcare = new PdfPTable(2);
                        tblAMcare.WidthPercentage = 100f;
                        tblAMcare.SetWidths(wthAssessed);

                        PdfPCell PersonalHygineCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PersonalHygiene, fontBoldText));
                        PersonalHygineCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                        PersonalHygineCell.HorizontalAlignment = Element.ALIGN_CENTER;
                        PersonalHygineCell.Colspan = 2;
                        tblAMcare.AddCell(PersonalHygineCell);


                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7AD") != "" ||

                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP") != "" ||
                        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_AM_agency_name"].ToString()))
                        {


                            PdfPCell AMcare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AMcare, fontBoldText));
                            AMcare.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            AMcare.HorizontalAlignment = Element.ALIGN_CENTER;
                            AMcare.Colspan = 2;
                            tblAMcare.AddCell(AMcare);

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "")
                            {
                                PdfPCell IndependentAMcare = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI"), fontBoldTextOP));
                                tblAMcare.AddCell(IndependentAMcare);
                                tblAMcare.AddCell(Independent);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "")
                            {
                                PdfPCell SupervisedAMcare = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS"), fontBoldTextOP));
                                tblAMcare.AddCell(SupervisedAMcare);
                                tblAMcare.AddCell(Supervised);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA") != "")
                            {
                                PdfPCell AssistedAMcare = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA"), fontBoldTextOP));
                                tblAMcare.AddCell(AssistedAMcare);
                                tblAMcare.AddCell(Assisted);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7AD") != "")
                            {
                                PdfPCell DependentAMCareOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7AD"), fontBoldTextOP));
                                tblAMcare.AddCell(DependentAMCareOP);
                                tblAMcare.AddCell(DependentCell);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != ""
                                )
                            {

                                PdfPCell AssistedBy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assistedby, tableFont));
                                AssistedBy.Colspan = 2;
                                tblAMcare.AddCell(AssistedBy);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "")
                                {
                                    PdfPCell HomeAMCareOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI"), fontBoldTextOP));
                                    tblAMcare.AddCell(HomeAMCareOP);
                                    tblAMcare.AddCell(HomeAMCare);
                                }

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "")
                                {
                                    PdfPCell AgencyAMCareOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS"), fontBoldTextOP));
                                    tblAMcare.AddCell(AgencyAMCareOP);
                                    tblAMcare.AddCell(AgencyAMCare);
                                }
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP") != "")
                            {
                                PdfPCell PreferredTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredTime, tableFont));
                                PreferredTime.Colspan = 2;
                                tblAMcare.AddCell(PreferredTime);

                                PdfPCell AllMorningHoursAMCareOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP"), fontBoldTextOP));
                                tblAMcare.AddCell(AllMorningHoursAMCareOP);
                                tblAMcare.AddCell(new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AllMorningHours, tableFont)));

                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_AM_agency_name"].ToString()))
                            {
                                PdfPCell AgencyName = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agencyname, tableFont));
                                AgencyName.Colspan = 2;
                                tblAMcare.AddCell(AgencyName);
                                PdfPCell AgencyNameOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_AM_agency_name"].ToString(), tableFont));
                                AgencyNameOP.Colspan = 2;
                                AgencyNameOP.FixedHeight = 30;
                                tblAMcare.AddCell(AgencyNameOP);
                            }
                            multiColumn.AddElement(tblAMcare);
                        }


                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8PI") != "" ||
                   getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9PS") != "" ||
                   getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10PA") != "" ||
                   getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11PD") != "" ||
                   getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "28PH") != "" ||
                   getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "29PA") != "" ||
                   getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "33PP") != "" ||
                   !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString()) ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_AM_agency_name"].ToString())
                       )
                        {
                            PdfPTable tblPMcare = new PdfPTable(2);
                            tblPMcare.WidthPercentage = 100f;
                            tblPMcare.SetWidths(wthAssessed);

                            PdfPCell PMcare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PMCare, fontBoldText));
                            PMcare.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            PMcare.HorizontalAlignment = Element.ALIGN_CENTER;
                            PMcare.Colspan = 2;
                            tblPMcare.AddCell(PMcare);

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "")
                            {
                                PdfPCell IndependentPMcare = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI"), fontBoldTextOP));
                                tblPMcare.AddCell(IndependentPMcare);
                                tblPMcare.AddCell(Independent);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "")
                            {
                                PdfPCell SupervisedPMcare = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS"), fontBoldTextOP));
                                tblPMcare.AddCell(SupervisedPMcare);
                                tblPMcare.AddCell(Supervised);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA") != "")
                            {
                                PdfPCell AssistedPMcare = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA"), fontBoldTextOP));
                                tblPMcare.AddCell(AssistedPMcare);
                                tblPMcare.AddCell(Assisted);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7AD") != "")
                            {
                                PdfPCell DependentPMCareOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7AD"), fontBoldTextOP));
                                tblPMcare.AddCell(DependentPMCareOP);
                                tblPMcare.AddCell(DependentCell);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != ""
                            )
                            {
                                PdfPCell AssistedBy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assistedby, tableFont));
                                AssistedBy.Colspan = 2;
                                tblPMcare.AddCell(AssistedBy);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "")
                                {
                                    PdfPCell HomePMCareOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI"), fontBoldTextOP));
                                    tblPMcare.AddCell(HomePMCareOP);
                                    tblPMcare.AddCell(HomeAMCare);
                                }

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "")
                                {
                                    PdfPCell AgencyPMCareOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS"), fontBoldTextOP));
                                    tblPMcare.AddCell(AgencyPMCareOP);
                                    tblPMcare.AddCell(AgencyAMCare);
                                }
                            }



                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP") != "")
                            {
                                PdfPCell PreferredTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredTime, tableFont));
                                PreferredTime.Colspan = 2;
                                tblPMcare.AddCell(PreferredTime);

                                PdfPCell AllMorningHoursPMCareOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP"), fontBoldTextOP));
                                tblPMcare.AddCell(AllMorningHoursPMCareOP);
                                tblPMcare.AddCell(new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AllEveningHours, tableFont)));
                            }

                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString()))
                            {
                                PdfPCell AgencyName = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agencyname, tableFont));
                                AgencyName.Colspan = 2;
                                tblPMcare.AddCell(AgencyName);
                                PdfPCell AgencyNameOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_AM_agency_name"].ToString(), tableFont));
                                AgencyNameOP.Colspan = 2;
                                AgencyNameOP.FixedHeight = 30;
                                tblPMcare.AddCell(AgencyNameOP);
                            }
                            multiColumn.AddElement(tblPMcare);
                        }


                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "30BN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4BI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5BS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6BA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "31BD") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "56BA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH56BA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "34BB") != "" ||
                           !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString())
                        )
                        {
                            PdfPTable tblBathing = new PdfPTable(2);
                            tblBathing.WidthPercentage = 100f;
                            tblBathing.SetWidths(wthAssessed);


                            PdfPCell Bathing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bathing, fontBoldText));
                            Bathing.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Bathing.HorizontalAlignment = Element.ALIGN_CENTER;
                            Bathing.Colspan = 2;
                            tblBathing.AddCell(Bathing);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "30BN") != "")
                            {
                                PdfPCell PerNAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "30BN"), fontBoldTextOP));
                                tblBathing.AddCell(PerNAOP);
                                tblBathing.AddCell(NA);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4BI") != "")
                            {
                                PdfPCell IndependentBathing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4BI"), fontBoldTextOP));
                                tblBathing.AddCell(IndependentBathing);
                                tblBathing.AddCell(Independent);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5BS") != "")
                            {
                                PdfPCell SupervisedBathing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5BS"), fontBoldTextOP));
                                tblBathing.AddCell(SupervisedBathing);
                                tblBathing.AddCell(Supervised);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6BA") != "")
                            {
                                PdfPCell AssistedBathing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6BA"), fontBoldTextOP));
                                tblBathing.AddCell(AssistedBathing);
                                tblBathing.AddCell(Assisted);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "31BD") != "")
                            {
                                PdfPCell DependentBathing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "31BD"), fontBoldTextOP));
                                tblBathing.AddCell(DependentBathing);
                                tblBathing.AddCell(DependentCell);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "56BA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH56BA") != ""
                            )
                            {
                                PdfPCell AssistedBy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assistedby, tableFont));
                                AssistedBy.Colspan = 2;
                                tblBathing.AddCell(AssistedBy);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH") != "")
                                {
                                    PdfPCell HomeBathingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH"), fontBoldTextOP));
                                    tblBathing.AddCell(HomeBathingOP);
                                    tblBathing.AddCell(HomeAMCare);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "56BA") != "")
                                {
                                    PdfPCell AgencyBathingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "56BA"), fontBoldTextOP));
                                    tblBathing.AddCell(AgencyBathingOP);
                                    tblBathing.AddCell(AgencyAMCare);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH56BA") != "")
                                {
                                    PdfPCell BothBathingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH56BA"), fontBoldTextOP));
                                    tblBathing.AddCell(BothBathingOP);
                                    tblBathing.AddCell(AgencyAMCare);
                                }
                            }


                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "34BB") != "")
                            {
                                PdfPCell PreferredTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredTime, tableFont));
                                PreferredTime.Colspan = 2;
                                tblBathing.AddCell(PreferredTime);

                                PdfPCell AllMorningHoursBathingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "34BB"), fontBoldTextOP));
                                tblBathing.AddCell(AllMorningHoursBathingOP);
                                tblBathing.AddCell(new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AllMorningEveningHours, tableFont)));

                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString()))
                            {
                                PdfPCell AgencyName = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agencyname, tableFont));
                                AgencyName.Colspan = 2;
                                tblBathing.AddCell(AgencyName);
                                PdfPCell AgencyNameOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_bathing_agency_name"].ToString(), tableFont));
                                AgencyNameOP.Colspan = 2;
                                AgencyNameOP.FixedHeight = 30;
                                tblBathing.AddCell(AgencyNameOP);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "62PA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "63PE") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "44PS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "45PM") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "46PT") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "47PW") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "48PH") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "49PF") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "50PA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12PB") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24PS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "35PP") != ""
                                )
                            {
                                PdfPCell PreferredDay = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredDay, tableFont));
                                PreferredDay.Colspan = 2;
                                tblBathing.AddCell(PreferredDay);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "62PA") != "")
                                {
                                    PdfPCell NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "62PA"), fontBoldTextOP));
                                    tblBathing.AddCell(NAOP);
                                    PdfPCell PerNA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                                    tblBathing.AddCell(PerNA);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "63PE") != "")
                                {
                                    PdfPCell EveryOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "63PE"), fontBoldTextOP));
                                    tblBathing.AddCell(EveryOP);
                                    PdfPCell EveryDay = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EveryDay, tableFont));
                                    tblBathing.AddCell(EveryDay);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "44PS") != "")
                                {
                                    PdfPCell SundayOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "44PS"), fontBoldTextOP));
                                    tblBathing.AddCell(SundayOP);
                                    PdfPCell Sunday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sunday, tableFont));
                                    tblBathing.AddCell(Sunday);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "45PM") != "")
                                {
                                    PdfPCell MondayOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "45PM"), fontBoldTextOP));
                                    tblBathing.AddCell(MondayOP);
                                    PdfPCell Monday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Monday, tableFont));
                                    tblBathing.AddCell(Monday);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "46PT") != "")
                                {
                                    PdfPCell TuesdayOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "46PT"), fontBoldTextOP));
                                    tblBathing.AddCell(TuesdayOP);
                                    PdfPCell Tuesday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tuesday, tableFont));
                                    tblBathing.AddCell(Tuesday);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "47PW") != "")
                                {
                                    PdfPCell WednesdayOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "47PW"), fontBoldTextOP));
                                    tblBathing.AddCell(WednesdayOP);
                                    PdfPCell Wednesday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wednesday, tableFont));
                                    tblBathing.AddCell(Wednesday);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "48PH") != "")
                                {
                                    PdfPCell ThursdayOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "48PH"), fontBoldTextOP));
                                    tblBathing.AddCell(ThursdayOP);
                                    PdfPCell Thursday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Thursday, tableFont));
                                    tblBathing.AddCell(Thursday);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "49PF") != "")
                                {
                                    PdfPCell FridayOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "49PF"), fontBoldTextOP));
                                    tblBathing.AddCell(FridayOP);
                                    PdfPCell Friday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Friday, tableFont));
                                    tblBathing.AddCell(Friday);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "50PA") != "")
                                {
                                    PdfPCell SaturdayOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "50PA"), fontBoldTextOP));
                                    tblBathing.AddCell(SaturdayOP);
                                    PdfPCell Saturday = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Saturday, tableFont));
                                    tblBathing.AddCell(Saturday);
                                }
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12PB") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24PS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "35PP") != ""
                                )
                            {
                                PdfPCell PreferredType = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredType, tableFont));
                                PreferredType.Colspan = 2;
                                tblBathing.AddCell(PreferredType);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12PB") != "")
                                {
                                    PdfPCell BathOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12PB"), fontBoldTextOP));
                                    tblBathing.AddCell(BathOP);
                                    PdfPCell Bath = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bath, tableFont));
                                    tblBathing.AddCell(Bath);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24PS") != "")
                                {
                                    PdfPCell ShowerOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24PS"), fontBoldTextOP));
                                    tblBathing.AddCell(ShowerOP);
                                    PdfPCell Shower = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Shower, tableFont));
                                    tblBathing.AddCell(Shower);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "35PP") != "")
                                {
                                    PdfPCell SpongeOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "35PP"), fontBoldTextOP));
                                    tblBathing.AddCell(SpongeOP);
                                    PdfPCell Sponge = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sponge, tableFont));
                                    tblBathing.AddCell(Sponge);
                                }
                            }
                            multiColumn.AddElement(tblBathing);
                        }
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13DN") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7DI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8DS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9DA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14DD") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15DA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "16DP") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "17DB") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "21ON") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13OI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14OS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15OA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "22OD") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "18OA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "19OP") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "20OB") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "26SN") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10SI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11SS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12SA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "27SD") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "23SA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24SP") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "25SB") != "")
                    {

                        PdfPTable tblAssistance = new PdfPTable(2);
                        tblAssistance.WidthPercentage = 100f;
                        tblAssistance.SetWidths(wthAssessed);

                        tblAssistance.AddCell(spaceCell1);
                        PdfPCell Assistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assistance, fontHDBoldText));
                        Assistance.Colspan = 2;
                        Assistance.BackgroundColor = BaseColor.LIGHT_GRAY;
                        tblAssistance.AddCell(Assistance);
                        multiColumn.AddElement(tblAssistance);

                        PdfPTable tblDressing = new PdfPTable(2);
                        tblDressing.WidthPercentage = 100f;
                        tblDressing.SetWidths(wthAssessed);

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13DN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7DI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8DS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9DA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14DD") != "")
                        {
                            PdfPCell Dressing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DressingUndressing, fontBoldText));
                            Dressing.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Dressing.HorizontalAlignment = Element.ALIGN_CENTER;
                            Dressing.Colspan = 2;
                            tblDressing.AddCell(Dressing);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13DN") != "")
                            {
                                PdfPCell PerNAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13DN"), fontBoldTextOP));
                                tblDressing.AddCell(PerNAOP);
                                tblDressing.AddCell(NA);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7DI") != "")
                            {
                                PdfPCell IndependentDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7DI"), fontBoldTextOP));
                                tblDressing.AddCell(IndependentDressing);
                                tblDressing.AddCell(Independent);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8DS") != "")
                            {
                                PdfPCell SupervisedDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8DS"), fontBoldTextOP));
                                tblDressing.AddCell(SupervisedDressing);
                                tblDressing.AddCell(Supervised);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9DA") != "")
                            {
                                PdfPCell AssistedDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9DA"), fontBoldTextOP));
                                tblDressing.AddCell(AssistedDressing);
                                tblDressing.AddCell(Assisted);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14DD") != "")
                            {
                                PdfPCell DependentDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14DD"), fontBoldTextOP));
                                tblDressing.AddCell(DependentDressing);
                                tblDressing.AddCell(DependentCell);
                            }
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15DA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "16DP") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "17DB") != ""
                           )
                        {
                            PdfPCell PreferredTimeOfDay = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredTimeofDay, tableFont));
                            PreferredTimeOfDay.Colspan = 2;
                            tblDressing.AddCell(PreferredTimeOfDay);

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15DA") != "")
                            {
                                PdfPCell AMOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15DA"), fontBoldTextOP));
                                tblDressing.AddCell(AMOP);
                                tblDressing.AddCell(new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AM, tableFont)));
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "16DP") != "")
                            {
                                PdfPCell PMOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "16DP"), fontBoldTextOP));
                                tblDressing.AddCell(PMOP);
                                tblDressing.AddCell(new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PM, tableFont)));
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "17DB") != "")
                            {
                                PdfPCell BothAMPM = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "17DB"), fontBoldTextOP));
                                tblDressing.AddCell(BothAMPM);
                                tblDressing.AddCell(new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BothAmPm, tableFont)));
                            }
                        }
                        multiColumn.AddElement(tblDressing);
                    }

                    if (
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "21ON") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13OI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14OS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15OA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "22OD") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "18OA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "19OP") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "20OB") != "")
                    {
                        PdfPTable tblOralcare = new PdfPTable(2);
                        tblOralcare.WidthPercentage = 100f;
                        tblOralcare.SetWidths(wthAssessed);

                        PdfPCell Oralcare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OralHygiene, fontBoldText));
                        Oralcare.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                        Oralcare.HorizontalAlignment = Element.ALIGN_CENTER;
                        Oralcare.Colspan = 2;
                        tblOralcare.AddCell(Oralcare);

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "21ON") != "")
                        {
                            PdfPCell PerNAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "21ON"), fontBoldTextOP));
                            tblOralcare.AddCell(PerNAOP);
                            tblOralcare.AddCell(NA);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13OI") != "")
                        {
                            PdfPCell IndependentDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13OI"), fontBoldTextOP));
                            tblOralcare.AddCell(IndependentDressing);
                            tblOralcare.AddCell(Independent);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14OS") != "")
                        {
                            PdfPCell SupervisedDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14OS"), fontBoldTextOP));
                            tblOralcare.AddCell(SupervisedDressing);
                            tblOralcare.AddCell(Supervised);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15OA") != "")
                        {
                            PdfPCell AssistedDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15OA"), fontBoldTextOP));
                            tblOralcare.AddCell(AssistedDressing);
                            tblOralcare.AddCell(Assisted);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "22OD") != "")
                        {
                            PdfPCell DependentDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "22OD"), fontBoldTextOP));
                            tblOralcare.AddCell(DependentDressing);
                            tblOralcare.AddCell(DependentCell);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "18OA") != "" ||
                         getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "19OP") != "" ||
                         getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "20OB") != ""
                           )
                        {
                            PdfPCell PreferredTimeOfDay = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredTimeofDay, tableFont));
                            PreferredTimeOfDay.Colspan = 2;
                            tblOralcare.AddCell(PreferredTimeOfDay);

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "18OA") != "")
                            {
                                PdfPCell AMOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "18OA"), fontBoldTextOP));
                                tblOralcare.AddCell(AMOP);
                                tblOralcare.AddCell(AM);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "19OP") != "")
                            {
                                PdfPCell PMOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "19OP"), fontBoldTextOP));
                                tblOralcare.AddCell(PMOP);
                                tblOralcare.AddCell(PM);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "20OB") != "")
                            {
                                PdfPCell BothAMPM = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "20OB"), fontBoldTextOP));
                                tblOralcare.AddCell(BothAMPM);
                                tblOralcare.AddCell(new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BothAmPm, tableFont)));
                            }
                        }
                        multiColumn.AddElement(tblOralcare);
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "26SN") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10SI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11SS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12SA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "27SD") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "23SA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24SP") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "25SB") != "")
                    {
                        PdfPTable tblShaving = new PdfPTable(2);
                        tblShaving.WidthPercentage = 100f;
                        tblShaving.SetWidths(wthAssessed);

                        PdfPCell Shaving = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Shaving, fontBoldText));
                        Shaving.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                        Shaving.HorizontalAlignment = Element.ALIGN_CENTER;
                        Shaving.Colspan = 2;
                        tblShaving.AddCell(Shaving);

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "26SN") != "")
                        {
                            PdfPCell PerNAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "26SN"), fontBoldTextOP));
                            tblShaving.AddCell(PerNAOP);
                            tblShaving.AddCell(NA);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10SI") != "")
                        {
                            PdfPCell IndependentDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10SI"), fontBoldTextOP));
                            tblShaving.AddCell(IndependentDressing);
                            tblShaving.AddCell(Independent);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11SS") != "")
                        {
                            PdfPCell SupervisedDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11SS"), fontBoldTextOP));
                            tblShaving.AddCell(SupervisedDressing);
                            tblShaving.AddCell(Supervised);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12SA") != "")
                        {
                            PdfPCell AssistedDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12SA"), fontBoldTextOP));
                            tblShaving.AddCell(AssistedDressing);
                            tblShaving.AddCell(Assisted);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "27SD") != "")
                        {
                            PdfPCell DependentDressing = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "27SD"), fontBoldTextOP));
                            tblShaving.AddCell(DependentDressing);
                            tblShaving.AddCell(DependentCell);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "23SA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24SP") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "25SB") != ""
                          )
                        {
                            PdfPCell PreferredTimeOfDay = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredTimeofDay, tableFont));
                            PreferredTimeOfDay.Colspan = 2;
                            tblShaving.AddCell(PreferredTimeOfDay);

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "23SA") != "")
                            {
                                PdfPCell AMOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "23SA"), fontBoldTextOP));
                                tblShaving.AddCell(AMOP);
                                tblShaving.AddCell(AM);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24SP") != "")
                            {
                                PdfPCell PMOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24SP"), fontBoldTextOP));
                                tblShaving.AddCell(PMOP);
                                tblShaving.AddCell(PM);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "25SB") != "")
                            {
                                PdfPCell BothAMPM = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "25SB"), fontBoldTextOP));
                                tblShaving.AddCell(BothAMPM);
                                tblShaving.AddCell(new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BothAmPm, tableFont)));
                            }
                        }
                        multiColumn.AddElement(tblShaving);
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MA") != "" ||
                        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_comment"].ToString()) ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "1WI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "2WS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "3WA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22WF") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23WT") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "24WN") != "" ||
                        !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_wheelchair_type"].ToString()) ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "5HS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "6HA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22HM") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "25HT") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP") != "" ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString()) ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "8CS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "9CA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "10SI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "11SS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "12SA") != "" ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString()) ||
                       (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI") != "" ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "14TS") != "" ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_transfers_comment"].ToString()) ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "15TA") != "" ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "16T1") != "" ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "17T2") != "" ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "18TT") != "" ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "19TM") != "" ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "20TN") != "" ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "21TE") != "" ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_concerns"].ToString()) ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility_prothesis"].ToString()))
                       )
                    {
                        PdfPTable tblMobility1 = new PdfPTable(2);
                        tblMobility1.WidthPercentage = 100f;
                        tblMobility1.SetWidths(wthAssessed);

                        tblMobility1.AddCell(spaceCell1);
                        PdfPCell Mobility = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mobility, fontHDBoldText));
                        Mobility.Colspan = 2;
                        Mobility.BackgroundColor = BaseColor.LIGHT_GRAY;
                        tblMobility1.AddCell(Mobility);
                        multiColumn.AddElement(tblMobility1);

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "27MN") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MD") != "")
                        {
                            PdfPTable tblMobility = new PdfPTable(2);
                            tblMobility.WidthPercentage = 100f;
                            tblMobility.SetWidths(wthAssessed);

                            PdfPCell Mobility1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mobility, fontBoldText));
                            Mobility1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Mobility1.HorizontalAlignment = Element.ALIGN_CENTER;
                            Mobility1.Colspan = 2;
                            tblMobility.AddCell(Mobility1);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "27MN") != "")
                            {
                                PdfPCell NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "27MN"), fontBoldTextOP));
                                tblMobility.AddCell(NAOP);

                                tblMobility.AddCell(NA);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MI") != "")
                            {
                                PdfPCell IndependentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MI"), fontBoldTextOP));
                                tblMobility.AddCell(IndependentOP);

                                tblMobility.AddCell(Independent);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MS") != "")
                            {
                                PdfPCell SupervisionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MS"), fontBoldTextOP));
                                tblMobility.AddCell(SupervisionOP);
                                PdfPCell Supervision = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervision, tableFont));
                                tblMobility.AddCell(Supervision);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MA") != "")
                            {
                                PdfPCell AssistanceOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MA"), fontBoldTextOP));
                                tblMobility.AddCell(AssistanceOP);
                                PdfPCell Assistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assistance, tableFont));
                                tblMobility.AddCell(Assistance);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MD") != "")
                            {
                                PdfPCell DependentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MD"), fontBoldTextOP));
                                tblMobility.AddCell(DependentOP);
                                PdfPCell Dependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                                tblMobility.AddCell(Dependent);
                            }
                            multiColumn.AddElement(tblMobility);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "28MN") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "29TD") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "14TS") != "" ||

                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "15TA") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "16T1") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "17T2") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "29TD") != ""
                            )
                        {
                            PdfPTable tblTransfers = new PdfPTable(2);
                            tblTransfers.WidthPercentage = 100f;
                            tblTransfers.SetWidths(wthAssessed);


                            PdfPCell Transfers = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Transfers, fontBoldText));
                            Transfers.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Transfers.HorizontalAlignment = Element.ALIGN_CENTER;
                            Transfers.Colspan = 2;
                            tblTransfers.AddCell(Transfers);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "28MN") != "")
                            {
                                PdfPCell NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "28MN"), fontBoldTextOP));
                                tblTransfers.AddCell(NAOP);
                                tblTransfers.AddCell(NA);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI") != "")
                            {
                                PdfPCell IndependentTransfers = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI"), fontBoldTextOP));
                                tblTransfers.AddCell(IndependentTransfers);
                                tblTransfers.AddCell(Independent);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "29TD") != "")
                            {
                                PdfPCell DependentTransfers = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI"), fontBoldTextOP));
                                tblTransfers.AddCell(DependentTransfers);
                                tblTransfers.AddCell(DependentCell);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "14TS") != "")
                            {
                                PdfPCell SupervisedTransfers = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "14TS"), fontBoldTextOP));
                                tblTransfers.AddCell(SupervisedTransfers);
                                tblTransfers.AddCell(Supervised);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "15TA") != "")
                            {
                                PdfPCell AssistedTransfers = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "15TA"), fontBoldTextOP));
                                tblTransfers.AddCell(AssistedTransfers);
                                tblTransfers.AddCell(Assisted);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "16T1") != "")
                            {
                                PdfPCell PersonConstantOP1 = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "16T1"), fontBoldTextOP));
                                tblTransfers.AddCell(PersonConstantOP1);
                                PdfPCell PersonConstant1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PersonConstant_1, tableFont));
                                tblTransfers.AddCell(PersonConstant1);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "17T2") != "")
                            {
                                PdfPCell PersonConstantOP2 = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "17T2"), fontBoldTextOP));
                                tblTransfers.AddCell(PersonConstantOP2);
                                PdfPCell PersonConstant2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PersonConstant_2, tableFont));
                                tblTransfers.AddCell(PersonConstant2);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "30MN") != "")
                            {
                                PdfPCell MechanicalLift = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MechanicalLift, tableFont));
                                MechanicalLift.Colspan = 2;
                                tblTransfers.AddCell(MechanicalLift);

                                PdfPCell TileOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "30MN"), fontBoldTextOP));
                                tblTransfers.AddCell(TileOP);
                                PdfPCell Tile = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                                tblTransfers.AddCell(Tile);
                            }
                            multiColumn.AddElement(tblTransfers);
                        }

                        if (
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "31WN") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "1WI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "2WS") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "3WA") != "" ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString())
                            )
                        {
                            PdfPTable tblWalker = new PdfPTable(2);
                            tblWalker.WidthPercentage = 100f;
                            tblWalker.SetWidths(wthAssessed);


                            PdfPCell Walker = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Walker, fontBoldText));
                            Walker.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Walker.HorizontalAlignment = Element.ALIGN_CENTER;
                            Walker.Colspan = 2;
                            tblWalker.AddCell(Walker);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "31WN") != "")
                            {
                                PdfPCell NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "31WN"), fontBoldTextOP));
                                tblWalker.AddCell(NAOP);
                                tblWalker.AddCell(NA);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "1WI") != "")
                            {
                                PdfPCell IndependentWalker = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "1WI"), fontBoldTextOP));
                                tblWalker.AddCell(IndependentWalker);
                                tblWalker.AddCell(Independent);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "2WS") != "")
                            {
                                PdfPCell SupervisedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "2WS"), fontBoldTextOP));
                                tblWalker.AddCell(SupervisedOP);
                                tblWalker.AddCell(Supervised);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "3WA") != "")
                            {
                                PdfPCell AssistedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "3WA"), fontBoldTextOP));
                                tblWalker.AddCell(AssistedOP);
                                tblWalker.AddCell(Assisted);
                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString()))
                            {
                                PdfPCell Type = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Type, tableFont));
                                Type.Colspan = 2;
                                tblWalker.AddCell(Type);
                                PdfPCell TypeOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString(), tableFont));
                                TypeOP.Colspan = 2;
                                TypeOP.FixedHeight = 30;
                                tblWalker.AddCell(TypeOP);
                            }
                            multiColumn.AddElement(tblWalker);
                        }


                        if (
                             getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "32WCN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "5HS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "6HA") != "" ||

                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "25HT") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP") != ""
                            )
                        {
                            PdfPTable tblWheelchair = new PdfPTable(2);
                            tblWheelchair.WidthPercentage = 100f;
                            tblWheelchair.SetWidths(wthAssessed);

                            PdfPCell Wheelchair = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wheelchair, fontBoldText));
                            Wheelchair.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Wheelchair.HorizontalAlignment = Element.ALIGN_CENTER;
                            Wheelchair.Colspan = 2;
                            tblWheelchair.AddCell(Wheelchair);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "32WCN") != "")
                            {
                                PdfPCell NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI"), fontBoldTextOP));
                                tblWheelchair.AddCell(NAOP);
                                tblWheelchair.AddCell(NA);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI") != "")
                            {
                                PdfPCell IndependentWheelchair = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI"), fontBoldTextOP));
                                tblWheelchair.AddCell(IndependentWheelchair);
                                tblWheelchair.AddCell(Independent);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "5HS") != "")
                            {
                                PdfPCell SupervisedWheelchair = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "5HS"), fontBoldTextOP));
                                tblWheelchair.AddCell(SupervisedWheelchair);
                                tblWheelchair.AddCell(Supervised);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "6HA") != "")
                            {
                                PdfPCell AssistedWheelchair = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "6HA"), fontBoldTextOP));
                                tblWheelchair.AddCell(AssistedWheelchair);
                                tblWheelchair.AddCell(Assisted);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "25HT") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP") != ""
                                )
                            {
                                PdfPCell WheelchairType = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.WheelchairType, tableFont));
                                WheelchairType.Colspan = 2;
                                tblWheelchair.AddCell(WheelchairType);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "25HT") != "")
                                {
                                    PdfPCell TileOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "25HT"), fontBoldTextOP));
                                    tblWheelchair.AddCell(TileOP);
                                    PdfPCell Tile = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tile, tableFont));
                                    tblWheelchair.AddCell(Tile);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE") != "")
                                {
                                    PdfPCell ElectricOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE"), fontBoldTextOP));
                                    tblWheelchair.AddCell(ElectricOP);
                                    PdfPCell Electric = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Electric, tableFont));
                                    tblWheelchair.AddCell(Electric);
                                }

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP") != "")
                                {
                                    PdfPCell TransportOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP"), fontBoldTextOP));
                                    tblWheelchair.AddCell(TransportOP);
                                    PdfPCell Transport = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Transport, tableFont));
                                    tblWheelchair.AddCell(Transport);
                                }
                            }
                            multiColumn.AddElement(tblWheelchair);
                        }

                        if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString()) ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "33CN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "8CS") != ""
                            )
                        {
                            PdfPTable tblCane = new PdfPTable(2);
                            tblCane.WidthPercentage = 100f;
                            tblCane.SetWidths(wthAssessed);

                            PdfPCell Cane = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cane, fontBoldText));
                            Cane.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Cane.HorizontalAlignment = Element.ALIGN_CENTER;
                            Cane.Colspan = 2;
                            tblCane.AddCell(Cane);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "33CN") != "")
                            {
                                PdfPCell NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI"), fontBoldTextOP));
                                tblCane.AddCell(NAOP);
                                tblCane.AddCell(NA);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI") != "")
                            {
                                PdfPCell IndependentCane = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI"), fontBoldTextOP));
                                tblCane.AddCell(IndependentCane);
                                tblCane.AddCell(Independent);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "8CS") != "")
                            {
                                PdfPCell SupervisedCane = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "8CS"), fontBoldTextOP));
                                tblCane.AddCell(SupervisedCane);
                                tblCane.AddCell(Supervised);
                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString()))
                            {
                                PdfPCell CaneType = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Type, tableFont));
                                CaneType.Colspan = 2;
                                tblCane.AddCell(CaneType);
                                PdfPCell CaneTypeOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString(), tableFont));
                                CaneTypeOP.Colspan = 2;
                                CaneTypeOP.FixedHeight = 30;
                                tblCane.AddCell(CaneTypeOP);
                            }
                            multiColumn.AddElement(tblCane);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "34SN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "10SI") != "" ||

                          !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString()))
                        {
                            PdfPTable tblScooter = new PdfPTable(2);
                            tblScooter.WidthPercentage = 100f;
                            tblScooter.SetWidths(wthAssessed);

                            PdfPCell Scooter = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Scooter, fontBoldText));
                            Scooter.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Scooter.HorizontalAlignment = Element.ALIGN_CENTER;
                            Scooter.Colspan = 2;
                            tblScooter.AddCell(Scooter);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "34SN") != "")
                            {
                                PdfPCell NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "34SN"), fontBoldTextOP));
                                tblScooter.AddCell(NAOP);
                                tblScooter.AddCell(NA);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "10SI") != "")
                            {
                                PdfPCell IndependentScooter = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "10SI"), fontBoldTextOP));
                                tblScooter.AddCell(IndependentScooter);
                                tblScooter.AddCell(Independent);
                            }

                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString()))
                            {
                                PdfPCell ScooterType = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Type, tableFont));
                                ScooterType.Colspan = 2;
                                tblScooter.AddCell(ScooterType);
                                PdfPCell ScooterTypeOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString(), tableFont));
                                ScooterTypeOP.Colspan = 2;
                                ScooterTypeOP.FixedHeight = 15;
                                tblScooter.AddCell(ScooterTypeOP);
                            }
                            multiColumn.AddElement(tblScooter);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "10PY") != "" ||
                          getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "11PN") != "" ||
                          getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "12OY") != "" ||
                          getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "13ON") != "" ||
                         !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_PT_frequency"].ToString()) ||
                         !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_frequency"].ToString())
                        )
                        {
                            PdfPTable tblOTPT = new PdfPTable(2);
                            tblOTPT.WidthPercentage = 100f;
                            tblOTPT.SetWidths(wthAssessed);
                            tblOTPT.AddCell(spaceCell1);

                            PdfPCell OTPT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OTPT, fontHDBoldText));
                            OTPT.Colspan = 2;
                            OTPT.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblOTPT.AddCell(OTPT);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "10PY") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "11PN") != "" ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_PT_frequency"].ToString()))
                            {

                                PdfPCell OT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OT, fontBoldText));
                                OT.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                OT.HorizontalAlignment = Element.ALIGN_CENTER;
                                OT.Colspan = 2;
                                tblOTPT.AddCell(OT);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "10PY") != "")
                                {
                                    PdfPCell PhysioOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "10PY"), fontBoldTextOP));
                                    tblOTPT.AddCell(PhysioOP);
                                    PdfPCell Physio = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                    tblOTPT.AddCell(Physio);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "11PN") != "")
                                {
                                    PdfPCell ProgramstartedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "11PN"), fontBoldTextOP));
                                    tblOTPT.AddCell(ProgramstartedOP);
                                    PdfPCell Programstarted = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                                    tblOTPT.AddCell(Programstarted);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_PT_frequency"].ToString()))
                                {
                                    PdfPCell PrivateOT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Frequency, tableFont));
                                    PrivateOT.Colspan = 2;
                                    tblOTPT.AddCell(PrivateOT);

                                    PdfPCell PrivateOTPT = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_PT_frequency"].ToString(), tableFont));
                                    PrivateOTPT.Colspan = 2;
                                    tblOTPT.AddCell(PrivateOTPT);
                                }
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "12OY") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "13ON") != "" ||
                             !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_frequency"].ToString()))
                            {
                                PdfPCell PT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PT, fontBoldText));
                                PT.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                PT.HorizontalAlignment = Element.ALIGN_CENTER;
                                PT.Colspan = 2;
                                tblOTPT.AddCell(PT);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "12OY") != "")
                                {
                                    PdfPCell ProgramstartedOPOT = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "12OY"), fontBoldTextOP));
                                    tblOTPT.AddCell(ProgramstartedOPOT);
                                    PdfPCell ProgramstartedPT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                    tblOTPT.AddCell(ProgramstartedPT);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "13ON") != "")
                                {
                                    PdfPCell WeeklyOPOT = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "13ON"), fontBoldTextOP));
                                    tblOTPT.AddCell(WeeklyOPOT);
                                    PdfPCell WeeklyOPAPT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                                    tblOTPT.AddCell(WeeklyOPAPT);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_frequency"].ToString()))
                                {
                                    PdfPCell PrivateOT = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Frequency, tableFont));
                                    PrivateOT.Colspan = 2;
                                    tblOTPT.AddCell(PrivateOT);

                                    PdfPCell PrivateOTPT = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_frequency"].ToString(), tableFont));
                                    PrivateOTPT.Colspan = 2;
                                    tblOTPT.AddCell(PrivateOTPT);
                                }
                            }
                            multiColumn.AddElement(tblOTPT);
                        }


                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "1SS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "7SM") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "8ST") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "9SB") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "10SE") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "11SW") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "12SD") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "13SO") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "14SU") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "15SF") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "16SH") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "17SY") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "19BY") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "20BW") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "21LY") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "22LN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "23DY") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "24DN") != "")
                        {
                            PdfPTable tblSafetyPasd = new PdfPTable(2);
                            tblSafetyPasd.WidthPercentage = 100f;
                            tblSafetyPasd.SetWidths(wthAssessed);

                            tblSafetyPasd.AddCell(spaceCell1);

                            PdfPCell SafetyPasd = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SafetyRestraintsPasd, fontHDBoldText));
                            SafetyPasd.Colspan = 2;
                            SafetyPasd.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblSafetyPasd.AddCell(SafetyPasd);

                            PdfPCell SafetyPasd1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SafetyRestraintsPasd, fontBoldText));
                            SafetyPasd1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            SafetyPasd1.HorizontalAlignment = Element.ALIGN_CENTER;
                            SafetyPasd1.Colspan = 2;
                            tblSafetyPasd.AddCell(SafetyPasd1);

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "1SS") != "")
                            {
                                PdfPCell SafSeatLapbeltOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "1SS"), fontBoldTextOP));
                                tblSafetyPasd.AddCell(SafSeatLapbeltOP);
                                PdfPCell SafSeatLapbelt = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SeatLapbelt, tableFont));
                                tblSafetyPasd.AddCell(SafSeatLapbelt);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "7SM") != "")
                            {
                                PdfPCell SafMattressonfloorOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "7SM"), fontBoldTextOP));
                                tblSafetyPasd.AddCell(SafMattressonfloorOP);
                                PdfPCell SafMattressonfloor = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mattressonfloor, tableFont));
                                tblSafetyPasd.AddCell(SafMattressonfloor);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "8ST") != "")
                            {
                                PdfPCell SafTransferPoleOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "8ST"), fontBoldTextOP));
                                tblSafetyPasd.AddCell(SafTransferPoleOP);
                                PdfPCell SafTransferPole = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TransferPole, tableFont));
                                tblSafetyPasd.AddCell(SafTransferPole);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "9SB") != "")
                            {
                                PdfPCell SafTableTrayOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "9SB"), fontBoldTextOP));
                                tblSafetyPasd.AddCell(SafTableTrayOP);
                                PdfPCell SafTableTray = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TableTray, tableFont));
                                tblSafetyPasd.AddCell(SafTableTray);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "10SE") != "")
                            {
                                PdfPCell SafReclinerOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "10SE"), fontBoldTextOP));
                                tblSafetyPasd.AddCell(SafReclinerOP);
                                PdfPCell SafRecliner = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Recliner, tableFont));
                                tblSafetyPasd.AddCell(SafRecliner);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "11SW") != "")
                            {
                                PdfPCell SafTiltwcOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "11SW"), fontBoldTextOP));
                                tblSafetyPasd.AddCell(SafTiltwcOP);
                                PdfPCell SafTiltwc = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tiltwc, tableFont));
                                tblSafetyPasd.AddCell(SafTiltwc);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "18SN") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "3SA") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "4SI") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "5SL") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "6SN") != ""
                                    )
                            {
                                PdfPCell Rails = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Rails, tableFont));
                                Rails.Colspan = 2;
                                tblSafetyPasd.AddCell(Rails);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "18SN") != "")
                                {
                                    PdfPCell SafNAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "18SN"), fontBoldTextOP));
                                    tblSafetyPasd.AddCell(SafNAOP);
                                    PdfPCell SafNA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                                    tblSafetyPasd.AddCell(SafNA);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "3SA") != "")
                                {
                                    PdfPCell SafRailsRightOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "3SA"), fontBoldTextOP));
                                    tblSafetyPasd.AddCell(SafRailsRightOP);
                                    PdfPCell SafRailsRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RailsRight, tableFont));
                                    tblSafetyPasd.AddCell(SafRailsRight);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "4SI") != "")
                                {
                                    PdfPCell SafRailsLeftOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "4SI"), fontBoldTextOP));
                                    tblSafetyPasd.AddCell(SafRailsLeftOP);
                                    PdfPCell SafRailsLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RailsLeft, tableFont));
                                    tblSafetyPasd.AddCell(SafRailsLeft);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "5SL") != "")
                                {
                                    PdfPCell SafRailsFullOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "5SL"), fontBoldTextOP));
                                    tblSafetyPasd.AddCell(SafRailsFullOP);
                                    PdfPCell SafRailsFull = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RailsFull, tableFont));
                                    tblSafetyPasd.AddCell(SafRailsFull);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "6SN") != "")
                                {
                                    PdfPCell SafRailsNightOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "6SN"), fontBoldTextOP));
                                    tblSafetyPasd.AddCell(SafRailsNightOP);
                                    PdfPCell SafRailsNight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RailsNight, tableFont));
                                    tblSafetyPasd.AddCell(SafRailsNight);
                                }
                            }

                            multiColumn.AddElement(tblSafetyPasd);
                        }


                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "19BY") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "20BN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "21LY") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "22LN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "23DY") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "24DN") != "")
                        {
                            PdfPTable tblEscorting = new PdfPTable(2);
                            tblEscorting.WidthPercentage = 100f;
                            tblEscorting.SetWidths(wthAssessed);


                            PdfPCell Escorting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EscortingToAndFromMeals, fontBoldText));
                            Escorting.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Escorting.HorizontalAlignment = Element.ALIGN_CENTER;
                            Escorting.Colspan = 2;
                            tblEscorting.AddCell(Escorting);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "19BY") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "20BN") != "")
                            {
                                PdfPCell BreakFast = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Breakfast, tableFont));
                                BreakFast.Colspan = 2;
                                tblEscorting.AddCell(BreakFast);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "19BY") != "")
                                {
                                    PdfPCell YesOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "19BY"), fontBoldTextOP));
                                    tblEscorting.AddCell(YesOP);
                                    PdfPCell Yes1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                    tblEscorting.AddCell(Yes);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "20BN") != "")
                                {
                                    PdfPCell NoOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "20BN"), fontBoldTextOP));
                                    tblEscorting.AddCell(NoOP);
                                    PdfPCell No1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                                    tblEscorting.AddCell(No);
                                }
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "21LY") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "22LN") != "")
                            {
                                PdfPCell Lunch = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Lunch, tableFont));
                                Lunch.Colspan = 2;
                                tblEscorting.AddCell(Lunch);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "21LY") != "")
                                {
                                    PdfPCell YesOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "21LY"), fontBoldTextOP));
                                    tblEscorting.AddCell(YesOP);
                                    PdfPCell Yes1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                    tblEscorting.AddCell(Yes);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "22LN") != "")
                                {
                                    PdfPCell NoOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "22LN"), fontBoldTextOP));
                                    tblEscorting.AddCell(NoOP);
                                    PdfPCell No1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                                    tblEscorting.AddCell(No);
                                }
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "23DY") != "" ||
                             getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "24DN") != "")
                            {
                                PdfPCell Dinner = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dinner, tableFont));
                                Dinner.Colspan = 2;
                                tblEscorting.AddCell(Dinner);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "23DY") != "")
                                {
                                    PdfPCell YesOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "23DY"), fontBoldTextOP));
                                    tblEscorting.AddCell(YesOP);
                                    PdfPCell Yes1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                    tblEscorting.AddCell(Yes);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "24DN") != "")
                                {
                                    PdfPCell NoOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "24DN"), fontBoldTextOP));
                                    tblEscorting.AddCell(NoOP);
                                    PdfPCell No1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                                    tblEscorting.AddCell(No);
                                }
                            }
                            multiColumn.AddElement(tblEscorting);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "1BN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "2BC") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "4BA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "15BG") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "5BD") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "6BE") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "7BI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "8BH") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "9BN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "11BR") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "17BS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "18BT") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "19BP") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "20BO") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "21BB") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "23BW") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "24BK") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "25BU") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "26BX") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "28BA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "27BP") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP") != ""
                            )
                        {
                            PdfPTable tblBehaviour = new PdfPTable(2);
                            tblBehaviour.WidthPercentage = 100f;
                            tblBehaviour.SetWidths(wthAssessed);

                            tblBehaviour.AddCell(spaceCell1);

                            PdfPCell Behaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Behaviour, fontHDBoldText));
                            Behaviour.Colspan = 2;
                            Behaviour.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblBehaviour.AddCell(Behaviour);

                            PdfPCell Behaviour1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Behaviour, fontBoldText));
                            Behaviour1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Behaviour1.HorizontalAlignment = Element.ALIGN_CENTER;
                            Behaviour1.Colspan = 2;
                            tblBehaviour.AddCell(Behaviour1);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "1BN") != "")
                            {
                                PdfPCell BehConcernsOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "1BN"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehConcernsOP);
                                PdfPCell BehConcerns = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NOConcerns, tableFont));
                                tblBehaviour.AddCell(BehConcerns);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "2BC") != "")
                            {
                                PdfPCell BehCooperativeOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "2BC"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehCooperativeOP);
                                PdfPCell BehCooperative = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cooperative, tableFont));
                                tblBehaviour.AddCell(BehCooperative);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") != "")
                            {
                                PdfPCell BehWandersOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehWandersOP);
                                PdfPCell BehWanders = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wanders, tableFont));
                                tblBehaviour.AddCell(BehWanders);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "4BA") != "")
                            {
                                PdfPCell BehAgitatedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "4BA"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehAgitatedOP);
                                PdfPCell BehAgitated = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agitated, tableFont));
                                tblBehaviour.AddCell(BehAgitated);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "15BG") != "")
                            {
                                PdfPCell BehAggressiveOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "15BG"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehAggressiveOP);
                                PdfPCell BehAggressive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Aggressive, tableFont));
                                tblBehaviour.AddCell(BehAggressive);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "5BD") != "")
                            {
                                PdfPCell BehDepressionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "5BD"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehDepressionOP);
                                PdfPCell BehDepression = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Depression, tableFont));
                                tblBehaviour.AddCell(BehDepression);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "6BE") != "")
                            {
                                PdfPCell BehDemandingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "6BE"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehDemandingOP);
                                PdfPCell BehDemanding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Demanding, tableFont));
                                tblBehaviour.AddCell(BehDemanding);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "7BI") != "")
                            {
                                PdfPCell BehDisruptiveOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "7BI"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehDisruptiveOP);
                                PdfPCell BehDisruptive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Disruptive, tableFont));
                                tblBehaviour.AddCell(BehDisruptive);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "8BH") != "")
                            {
                                PdfPCell BehHoardingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "8BH"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehHoardingOP);
                                PdfPCell BehHoarding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Hoarding, tableFont));
                                tblBehaviour.AddCell(BehHoarding);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "9BN") != "")
                            {
                                PdfPCell BehIneffectiveCopingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "9BN"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehIneffectiveCopingOP);
                                PdfPCell BehIneffectiveCoping = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IneffectiveCoping, tableFont));
                                tblBehaviour.AddCell(BehIneffectiveCoping);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP") != "")
                            {
                                PdfPCell BehPotentialforinjurytoselforothersOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehPotentialforinjurytoselforothersOP);
                                PdfPCell BehPotentialforinjurytoselforothers = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PotentialforInjury, tableFont));
                                tblBehaviour.AddCell(BehPotentialforinjurytoselforothers);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "11BR") != "")
                            {
                                PdfPCell BehResistsTreatmentorRefusesCareOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "11BR"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehResistsTreatmentorRefusesCareOP);
                                PdfPCell BehResistsTreatmentorRefusesCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResistsTreatment, tableFont));
                                tblBehaviour.AddCell(BehResistsTreatmentorRefusesCare);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "17BS") != "")
                            {
                                PdfPCell BehSuspiciousOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "17BS"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehSuspiciousOP);
                                PdfPCell BehSuspicious = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suspicious, tableFont));
                                tblBehaviour.AddCell(BehSuspicious);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "18BT") != "")
                            {
                                PdfPCell BehIngestForeignItemsOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "18BT"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehIngestForeignItemsOP);
                                PdfPCell BehIngestForeignItems = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IngestsForeignItems, tableFont));
                                tblBehaviour.AddCell(BehIngestForeignItems);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "19BP") != "")
                            {
                                PdfPCell BehInappropriateSexualBehaviourOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "19BP"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehInappropriateSexualBehaviourOP);
                                PdfPCell BehInappropriateSexualBehaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InappropriateSexualBehaviour, tableFont));
                                tblBehaviour.AddCell(BehInappropriateSexualBehaviour);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "20BO") != "")
                            {
                                PdfPCell BehInappropriateSmokingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "20BO"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehInappropriateSmokingOP);
                                PdfPCell BehInappropriateSmoking = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InappropriateSmoking, tableFont));
                                tblBehaviour.AddCell(BehInappropriateSmoking);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "21BB") != "")
                            {
                                PdfPCell BehSubstanceAbuseOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "21BB"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehSubstanceAbuseOP);
                                PdfPCell BehSubstanceAbuse = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SubstanceAbuse, tableFont));
                                tblBehaviour.AddCell(BehSubstanceAbuse);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "23BW") != "")
                            {
                                PdfPCell BehSadDepressedWithdrawnOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "23BW"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehSadDepressedWithdrawnOP);
                                PdfPCell BehSadDepressedWithdrawn = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SadDepressedwithdrawn, tableFont));
                                tblBehaviour.AddCell(BehSadDepressedWithdrawn);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "24BK") != "")
                            {
                                PdfPCell BehSeeksAttentionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "24BK"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehSeeksAttentionOP);
                                PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SeeksAttention, tableFont));
                                tblBehaviour.AddCell(BehSeeksAttention);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "25BU") != "")
                            {
                                PdfPCell BehSuicidalOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "25BU"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehSuicidalOP);
                                PdfPCell BehSuicidal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suicidal, tableFont));
                                tblBehaviour.AddCell(BehSuicidal);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "26BX") != "")
                            {
                                PdfPCell BehAnxiousBehaviourOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "26BX"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehAnxiousBehaviourOP);
                                PdfPCell BehAnxiousBehaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AnxiousBehaviour, tableFont));
                                tblBehaviour.AddCell(BehAnxiousBehaviour);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "28BA") != "")
                            {
                                PdfPCell BehAlcoholAbuseOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "28BA"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehAlcoholAbuseOP);
                                PdfPCell BehAlcoholAbuse = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AlcoholAbuse, tableFont));
                                tblBehaviour.AddCell(BehAlcoholAbuse);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "27BP") != "")
                            {
                                PdfPCell BehPotentialforinjurytoothersOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "27BP"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehPotentialforinjurytoothersOP);
                                PdfPCell BehPotentialforinjurytoothers = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PotentialForInjuryToOthers, tableFont));
                                tblBehaviour.AddCell(BehPotentialforinjurytoothers);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP") != "")
                            {
                                PdfPCell BehWithdrawnOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP"), fontBoldTextOP));
                                tblBehaviour.AddCell(BehWithdrawnOP);
                                PdfPCell BehWithdrawn = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Withdrawn, tableFont));
                                tblBehaviour.AddCell(BehWithdrawn);
                            }
                            multiColumn.AddElement(tblBehaviour);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "1CU") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "2CF") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "3CJ") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "4CC") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "5CS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "6CI") != ""
                            )
                        {
                            PdfPTable tblCognitivefunction = new PdfPTable(2);
                            tblCognitivefunction.WidthPercentage = 100f;
                            tblCognitivefunction.SetWidths(wthAssessed);

                            tblCognitivefunction.AddCell(spaceCell1);

                            PdfPCell Cognitivefunction = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cognitivefunction, fontHDBoldText));
                            Cognitivefunction.Colspan = 2;
                            Cognitivefunction.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblCognitivefunction.AddCell(Cognitivefunction);

                            PdfPCell Cognitivefunction1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cognitivefunction, fontBoldText));
                            Cognitivefunction1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Cognitivefunction1.HorizontalAlignment = Element.ALIGN_CENTER;
                            Cognitivefunction1.Colspan = 2;
                            tblCognitivefunction.AddCell(Cognitivefunction1);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "1CU") != "")
                            {
                                PdfPCell CogUnimpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "1CU"), fontBoldTextOP));
                                tblCognitivefunction.AddCell(CogUnimpairedOP);
                                PdfPCell CogUnimpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unimpaired, tableFont));
                                tblCognitivefunction.AddCell(CogUnimpaired);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "2CF") != "")
                            {
                                PdfPCell CogForgetfulOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "2CF"), fontBoldTextOP));
                                tblCognitivefunction.AddCell(CogForgetfulOP);
                                PdfPCell CogForgetful = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Forgetful, tableFont));
                                tblCognitivefunction.AddCell(CogForgetful);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "3CJ") != "")
                            {
                                PdfPCell CogJudgementPoorOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "3CJ"), fontBoldTextOP));
                                tblCognitivefunction.AddCell(CogJudgementPoorOP);
                                PdfPCell CogJudgementPoor = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Judgementpoor, tableFont));
                                tblCognitivefunction.AddCell(CogJudgementPoor);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "4CC") != "")
                            {
                                PdfPCell CogConfusedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "4CC"), fontBoldTextOP));
                                tblCognitivefunction.AddCell(CogConfusedOP);
                                PdfPCell CogConfused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Confused, tableFont));
                                tblCognitivefunction.AddCell(CogConfused);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "5CS") != "")
                            {
                                PdfPCell CogShorttermlossOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "5CS"), fontBoldTextOP));
                                tblCognitivefunction.AddCell(CogShorttermlossOP);
                                PdfPCell CogShorttermloss = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Shorttermloss, tableFont));
                                tblCognitivefunction.AddCell(CogShorttermloss);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "6CI") != "")
                            {
                                PdfPCell CogSignificantImpairmentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "6CI"), fontBoldTextOP));
                                tblCognitivefunction.AddCell(CogSignificantImpairmentOP);
                                PdfPCell CogSignificantImpairment = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Significantimpairment, tableFont));
                                tblCognitivefunction.AddCell(CogSignificantImpairment);
                            }
                            multiColumn.AddElement(tblCognitivefunction);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT") != ""
                            )
                        {
                            PdfPTable tblMemoryandOrientation = new PdfPTable(2);
                            tblMemoryandOrientation.WidthPercentage = 100f;
                            tblMemoryandOrientation.SetWidths(wthAssessed);
                            tblMemoryandOrientation.AddCell(spaceCell1);

                            PdfPCell MemoryandOrientation = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Orientation, fontHDBoldText));
                            MemoryandOrientation.Colspan = 2;
                            MemoryandOrientation.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblMemoryandOrientation.AddCell(MemoryandOrientation);

                            PdfPCell Oriented = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Orientation, fontBoldText));
                            Oriented.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Oriented.HorizontalAlignment = Element.ALIGN_CENTER;
                            Oriented.Colspan = 2;
                            tblMemoryandOrientation.AddCell(Oriented);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP") != "")
                            {
                                PdfPCell OriPersonOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP"), fontBoldTextOP));
                                tblMemoryandOrientation.AddCell(OriPersonOP);
                                PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Person, tableFont));
                                tblMemoryandOrientation.AddCell(OriPerson);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL") != "")
                            {
                                PdfPCell OriPlaceOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL"), fontBoldTextOP));
                                tblMemoryandOrientation.AddCell(OriPlaceOP);
                                PdfPCell OriPlace = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Place, tableFont));
                                tblMemoryandOrientation.AddCell(OriPlace);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT") != "")
                            {
                                PdfPCell OriTimeOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT"), fontBoldTextOP));
                                tblMemoryandOrientation.AddCell(OriTimeOP);
                                PdfPCell OriTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Time, tableFont));
                                tblMemoryandOrientation.AddCell(OriTime);
                            }
                            multiColumn.AddElement(tblMemoryandOrientation);
                        }

                        if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString()) ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "10SI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "11SS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "12SA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "13SD") != "" ||

                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "6NW") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "4NH") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "2NC") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "14TN") != "" ||
                           !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_risk_assistive_device"].ToString()) ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet"].ToString()) ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet_note"].ToString()) ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_allergies"].ToString()) ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_allergy_note"].ToString())
                            )
                        {
                            PdfPTable tblMemoryandOrientation = new PdfPTable(2);
                            tblMemoryandOrientation.WidthPercentage = 100f;
                            tblMemoryandOrientation.SetWidths(wthAssessed);
                            tblMemoryandOrientation.AddCell(spaceCell1);

                            PdfPCell MemoryandOrientation = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Nutrition, fontHDBoldText));
                            MemoryandOrientation.Colspan = 2;
                            MemoryandOrientation.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblMemoryandOrientation.AddCell(MemoryandOrientation);

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "10SI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "11SS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "12SA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "13SD") != "")
                            {
                                PdfPCell Stautus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Status, fontHDBoldText));
                                Stautus.Colspan = 2;
                                Stautus.BackgroundColor = BaseColor.LIGHT_GRAY;
                                tblMemoryandOrientation.AddCell(Stautus);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "10SI") != "")
                                {

                                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "10SI"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(OriPersonOP);
                                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                                    tblMemoryandOrientation.AddCell(OriPerson);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "11SS") != "")
                                {

                                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "11SS"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(OriPersonOP);
                                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervised, tableFont));
                                    tblMemoryandOrientation.AddCell(OriPerson);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "12SA") != "")
                                {

                                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "12SA"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(OriPersonOP);
                                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assisted, tableFont));
                                    tblMemoryandOrientation.AddCell(OriPerson);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "13SD") != "")
                                {

                                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "13SD"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(OriPersonOP);
                                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                                    tblMemoryandOrientation.AddCell(OriPerson);
                                }
                            }

                            if (
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "6NW") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "4NH") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "2NC") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "14TN") != "" ||
                           !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_risk_assistive_device"].ToString()))
                            {
                                PdfPCell Risk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Risk, fontHDBoldText));
                                Risk.Colspan = 2;
                                Risk.BackgroundColor = BaseColor.LIGHT_GRAY;
                                tblMemoryandOrientation.AddCell(Risk);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "6NW") != "")
                                {
                                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "6NW"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(OriPersonOP);
                                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Swallowing, tableFont));
                                    tblMemoryandOrientation.AddCell(OriPerson);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "4NH") != "")
                                {
                                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "4NH"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(OriPersonOP);
                                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Chokingrisk, tableFont));
                                    tblMemoryandOrientation.AddCell(OriPerson);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "2NC") != "")
                                {
                                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "2NC"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(OriPersonOP);
                                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DifficultyChewing, tableFont));
                                    tblMemoryandOrientation.AddCell(OriPerson);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_risk_assistive_device"].ToString()))
                                {
                                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistiveDevices, tableFont));
                                    OriPerson.Colspan = 2;
                                    tblMemoryandOrientation.AddCell(OriPerson);


                                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_risk_assistive_device"].ToString(), tableFont));
                                    OriPersonOP.Colspan = 2;
                                    tblMemoryandOrientation.AddCell(OriPersonOP);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "14TN") != "")
                                {
                                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Texture, tableFont));
                                    OriPersonOP.Colspan = 2;
                                    tblMemoryandOrientation.AddCell(OriPersonOP);

                                    PdfPCell naValue = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "14TN"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(OriPersonOP);
                                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                                    tblMemoryandOrientation.AddCell(OriPerson);
                                }

                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet"].ToString()) ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet_note"].ToString()))
                            {
                                PdfPCell Risk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Diet, fontHDBoldText));
                                Risk.Colspan = 2;
                                Risk.BackgroundColor = BaseColor.LIGHT_GRAY;
                                tblMemoryandOrientation.AddCell(Risk);
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet"].ToString()))
                                {
                                    PrintDiet(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet"].ToString(), tblMemoryandOrientation, fontBoldTextOP, tableFont);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet_note"].ToString()))
                                {

                                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Notes, tableFont));
                                    OriPerson.Colspan = 2;
                                    tblMemoryandOrientation.AddCell(OriPerson);


                                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet_note"].ToString(), tableFont));
                                    OriPersonOP.Colspan = 2;
                                    tblMemoryandOrientation.AddCell(OriPersonOP);
                                }
                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_allergies"].ToString()) ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_allergy_note"].ToString()))
                            {
                                PdfPCell Risk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AllergiesSensitivities, fontHDBoldText));
                                Risk.Colspan = 2;
                                Risk.BackgroundColor = BaseColor.LIGHT_GRAY;
                                tblMemoryandOrientation.AddCell(Risk);
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_allergies"].ToString()))
                                {
                                    PrintAllergies(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_allergies"].ToString(), tblMemoryandOrientation, fontBoldTextOP, tableFont);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_allergy_note"].ToString()))
                                {

                                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Notes, tableFont));
                                    OriPerson.Colspan = 2;
                                    tblMemoryandOrientation.AddCell(OriPerson);


                                    PdfPCell OriPersonOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_allergy_note"].ToString(), tableFont));
                                    OriPersonOP.Colspan = 2;
                                    tblMemoryandOrientation.AddCell(OriPersonOP);
                                }
                            }

                            multiColumn.AddElement(tblMemoryandOrientation);
                        }

                        if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString()))
                        {

                            PdfPTable tblAppetite = new PdfPTable(2);
                            tblAppetite.WidthPercentage = 100f;
                            tblAppetite.SetWidths(wthAssessed);


                            PdfPCell Appetite1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Appetite, fontBoldText));
                            Appetite1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Appetite1.HorizontalAlignment = Element.ALIGN_CENTER;
                            Appetite1.Colspan = 2;
                            tblAppetite.AddCell(Appetite1);

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "1AG") != "")
                            {
                                PdfPCell AppGoodOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "1AG"), fontBoldTextOP));
                                tblAppetite.AddCell(AppGoodOP);
                                PdfPCell AppGood = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Good, tableFont));
                                tblAppetite.AddCell(AppGood);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "2AF") != "")
                            {
                                PdfPCell AppFairOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "2AF"), fontBoldTextOP));
                                tblAppetite.AddCell(AppFairOP);
                                PdfPCell AppFair = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Fair, tableFont));
                                tblAppetite.AddCell(AppFair);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "3AP") != "")
                            {
                                PdfPCell AppPoorOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "3AP"), fontBoldTextOP));
                                tblAppetite.AddCell(AppPoorOP);
                                PdfPCell AppPoor = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Poor, tableFont));
                                tblAppetite.AddCell(AppPoor);
                            }
                            tblAppetite.AddCell(spaceCell1);
                            multiColumn.AddElement(tblAppetite);
                        }

                        if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString()) ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "13BN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "14BM") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "15BO") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "16BT") != "" ||

                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "17LN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "18LM") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "19LO") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "20LT") != "" ||

                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "21DN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "22DM") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "23DO") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "24DT") != ""
                            )
                        {
                            PdfPTable tblMemoryandOrientation = new PdfPTable(2);
                            tblMemoryandOrientation.WidthPercentage = 100f;
                            tblMemoryandOrientation.SetWidths(wthAssessed);
                            tblMemoryandOrientation.AddCell(spaceCell1);

                            PdfPCell Risk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Meals, fontHDBoldText));
                            Risk.Colspan = 2;
                            Risk.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblMemoryandOrientation.AddCell(Risk);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "13BN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "14BM") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "15BO") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "16BT") != "")
                            {
                                PdfPCell OriPersonOP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Breakfast, tableFont));
                                OriPersonOP.Colspan = 2;
                                tblMemoryandOrientation.AddCell(OriPersonOP);


                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "13BN") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "13BN"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "14BM") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "14BM"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MainDiningRoom, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "15BO") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "15BO"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Onunit, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "16BT") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "13BN"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TrayService, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "17LN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "18LM") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "19LO") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "20LT") != "")
                            {
                                PdfPCell OriPersonOP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Lunch, tableFont));
                                OriPersonOP.Colspan = 2;
                                tblMemoryandOrientation.AddCell(OriPersonOP);


                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "17LN") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "17LN"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "18LM") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "18LM"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MainDiningRoom, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "19LO") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "19LO"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Onunit, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "20LT") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "20LT"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TrayService, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }

                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "21DN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "22DM") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "23DO") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "24DT") != "")
                            {
                                PdfPCell OriPersonOP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Lunch, tableFont));
                                OriPersonOP.Colspan = 2;
                                tblMemoryandOrientation.AddCell(OriPersonOP);


                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "21DN") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "21DN"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "22DM") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "22DM"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MainDiningRoom, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "23DO") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "23DO"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Onunit, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "24DT") != "")
                                {
                                    PdfPCell breakfast = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "24DT"), fontBoldTextOP));
                                    tblMemoryandOrientation.AddCell(breakfast);
                                    PdfPCell breakfastBValue = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TrayService, tableFont));
                                    tblMemoryandOrientation.AddCell(breakfastBValue);
                                }
                            }
                            multiColumn.AddElement(tblMemoryandOrientation);
                        }


                        if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString()) ||
                          !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_B_incontinence"].ToString()) ||
                          !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bladder_toileting"].ToString()) ||
                      !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bladder_comment"].ToString()) ||
                       !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString()) ||
                   !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_ostomy"].ToString()) ||
                   !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bowel_toileting"].ToString()) ||
                   !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bowel_comment"].ToString()) ||
                   !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_managed"].ToString()))
                        {
                            PdfPTable tblElimination = new PdfPTable(2);
                            tblElimination.WidthPercentage = 100f;
                            tblElimination.SetWidths(wthAssessed);
                            tblElimination.AddCell(Elimination);

                            multiColumn.AddElement(tblElimination);
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString()))
                            {
                                PdfPTable tblBladder = new PdfPTable(2);
                                tblBladder.WidthPercentage = 100f;
                                tblBladder.SetWidths(wthAssessed);


                                PdfPCell Bladder = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bladder, fontBoldText));
                                Bladder.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                Bladder.HorizontalAlignment = Element.ALIGN_CENTER;
                                Bladder.Colspan = 2;
                                tblBladder.AddCell(Bladder);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC") != "")
                                {
                                    PdfPCell BlaContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC"), fontBoldTextOP));
                                    tblBladder.AddCell(BlaContinentOP);
                                    tblBladder.AddCell(BlaContinent);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI") != "")
                                {
                                    PdfPCell BlaInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI"), fontBoldTextOP));
                                    tblBladder.AddCell(BlaInContinentOP);
                                    tblBladder.AddCell(BlaInContinent);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO") != "")
                                {
                                    PdfPCell BlaOCCInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO"), fontBoldTextOP));
                                    tblBladder.AddCell(BlaOCCInContinentOP);
                                    tblBladder.AddCell(BlaOCCInContinent);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA") != "")
                                {
                                    PdfPCell BlaCatheterOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA"), fontBoldTextOP));
                                    tblBladder.AddCell(BlaCatheterOP);
                                    PdfPCell BlaCatheter = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CatheterChange, tableFont));
                                    tblBladder.AddCell(BlaCatheter);
                                }

                                multiColumn.AddElement(tblBladder);
                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString()))
                            {
                                PdfPTable tblBowel = new PdfPTable(2);
                                tblBowel.WidthPercentage = 100f;
                                tblBowel.SetWidths(wthAssessed);
                                PdfPCell Bowel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bowel, fontBoldText));
                                Bowel.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                Bowel.HorizontalAlignment = Element.ALIGN_CENTER;
                                Bowel.Colspan = 2;
                                tblBowel.AddCell(Bowel);

                                if (!String.IsNullOrEmpty(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "1BC")))
                                {
                                    PdfPCell BowContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "1BC"), fontBoldTextOP));
                                    tblBowel.AddCell(BowContinentOP);
                                    tblBowel.AddCell(BlaContinent);
                                }
                                if (!String.IsNullOrEmpty(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "2BI")))
                                {
                                    PdfPCell BowInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "2BI"), fontBoldTextOP));
                                    tblBowel.AddCell(BowInContinentOP);
                                    tblBowel.AddCell(BlaInContinent);
                                }
                                if (!String.IsNullOrEmpty(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "4BN")))
                                {
                                    PdfPCell BowOCCInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "4BN"), fontBoldTextOP));
                                    tblBowel.AddCell(BowOCCInContinentOP);
                                    tblBowel.AddCell(BlaOCCInContinent);
                                }
                                if (!String.IsNullOrEmpty(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "3BO")))
                                {
                                    PdfPCell OstomyOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "3BO"), fontBoldTextOP));
                                    tblBowel.AddCell(OstomyOP);
                                    PdfPCell Ostomy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Ostomy, tableFont));
                                    tblBowel.AddCell(Ostomy);
                                }
                                multiColumn.AddElement(tblBowel);
                            }


                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "16BS") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "17BM") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "18BL") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "19BX") != "" ||
                                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_Name"].ToString()) ||
                                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_assistive_device"].ToString()) ||
                                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_supplier"].ToString()) ||
                                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_date"].ToString()) ||
                                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_completed_by"].ToString()))
                            {

                                PdfPTable tblContinenceProducts = new PdfPTable(2);
                                tblContinenceProducts.WidthPercentage = 100f;
                                tblContinenceProducts.SetWidths(wthAssessed);
                                tblContinenceProducts.AddCell(spaceCell1);

                                PdfPCell ContinenceProducts = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ContinenceProducts, fontBoldText));
                                ContinenceProducts.Colspan = 2;
                                ContinenceProducts.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                ContinenceProducts.HorizontalAlignment = Element.ALIGN_CENTER;
                                tblContinenceProducts.AddCell(ContinenceProducts);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "16BS") != "")
                                {
                                    PdfPCell ToiBrfSOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "16BS"), fontBoldTextOP));
                                    tblContinenceProducts.AddCell(ToiBrfSOP);
                                    PdfPCell ToiBrfS = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SSmall, tableFont));
                                    tblContinenceProducts.AddCell(ToiBrfS);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "17BM") != "")
                                {
                                    PdfPCell ToiBrfMOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "17BM"), fontBoldTextOP));
                                    tblContinenceProducts.AddCell(ToiBrfMOP);
                                    PdfPCell ToiBrfM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MMedium, tableFont));
                                    tblContinenceProducts.AddCell(ToiBrfM);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "18BL") != "")
                                {
                                    PdfPCell ToiBrfLOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "18BL"), fontBoldTextOP));
                                    tblContinenceProducts.AddCell(ToiBrfLOP);
                                    PdfPCell ToiBrfL = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.LLarge, tableFont));
                                    tblContinenceProducts.AddCell(ToiBrfL);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "19BX") != "")
                                {
                                    PdfPCell ToiBrfXOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "19BX"), fontBoldTextOP));
                                    tblContinenceProducts.AddCell(ToiBrfXOP);
                                    PdfPCell ToiBrfX = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.XLExtraLarge, tableFont));
                                    tblContinenceProducts.AddCell(ToiBrfX);
                                }

                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_Name"].ToString()))
                                {
                                    PdfPCell Code = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Code, tableFont));
                                    Code.Colspan = 2;
                                    tblContinenceProducts.AddCell(Code);
                                    PdfPCell CodeOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_Name"].ToString(), tableFont));
                                    CodeOP.Colspan = 2;
                                    CodeOP.FixedHeight = 30;
                                    tblContinenceProducts.AddCell(CodeOP);
                                }

                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_assistive_device"].ToString()))
                                {
                                    PdfPCell AssistiveDevices = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistiveDevices, tableFont));
                                    AssistiveDevices.Colspan = 2;
                                    tblContinenceProducts.AddCell(AssistiveDevices);
                                    PdfPCell AssistiveDevicesOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_assistive_device"].ToString(), tableFont));
                                    AssistiveDevicesOP.Colspan = 2;
                                    AssistiveDevicesOP.FixedHeight = 30;
                                    tblContinenceProducts.AddCell(AssistiveDevicesOP);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_supplier"].ToString()))
                                {
                                    PdfPCell Supplier = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supplier, tableFont));
                                    Supplier.Colspan = 2;
                                    tblContinenceProducts.AddCell(Supplier);
                                    PdfPCell SupplierOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_supplier"].ToString(), tableFont));
                                    SupplierOP.Colspan = 2;
                                    SupplierOP.FixedHeight = 30;
                                    tblContinenceProducts.AddCell(SupplierOP);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_date"].ToString()))
                                {
                                    PdfPCell Date = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date, tableFont));
                                    Date.Colspan = 2;
                                    tblContinenceProducts.AddCell(Date);
                                    PdfPCell DateOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_date"].ToString(), tableFont));
                                    DateOP.Colspan = 2;
                                    DateOP.FixedHeight = 30;
                                    tblContinenceProducts.AddCell(DateOP);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_completed_by"].ToString()))
                                {
                                    PdfPCell Completedby = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssessmentCompletedBy, tableFont));
                                    Completedby.Colspan = 2;
                                    tblContinenceProducts.AddCell(Completedby);
                                    PdfPCell ACompletedby = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_completed_by"].ToString(), tableFont));
                                    ACompletedby.Colspan = 2;
                                    ACompletedby.FixedHeight = 30;
                                    tblContinenceProducts.AddCell(ACompletedby);
                                }
                                multiColumn.AddElement(tblContinenceProducts);
                            }
                        }

                        float[] wthtblBathroom = new float[] { 1f, 2f, 1f, 2f, 1f, 2f };
                        PdfPCell BathroomD = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.D, tableFont));
                        PdfPCell BathroomE = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.E, tableFont));
                        PdfPCell BathroomN = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.N, tableFont));

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "1TI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "3TN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "2TA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "4T1") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "5T2") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "6TT") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "7BD") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "8BE") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "9BN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "10CD") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "11CE") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "12CN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "13UD") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "14UE") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "15UN") != ""
                            )
                        {
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "1TI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "3TN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "2TA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "4T1") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "5T2") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "6TT") != "")
                            {
                                PdfPTable tblmotToilet = new PdfPTable(2);
                                tblmotToilet.WidthPercentage = 100f;
                                tblmotToilet.SetWidths(wthAssessed);

                                tblmotToilet.AddCell(spaceCell1);

                                PdfPCell motToilet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ToiletingModeofToileting, fontHDBoldText));
                                motToilet.Colspan = 2;
                                motToilet.BackgroundColor = BaseColor.LIGHT_GRAY;
                                tblmotToilet.AddCell(motToilet);

                                PdfPCell Toileting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Toileting, fontBoldText));
                                Toileting.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                Toileting.HorizontalAlignment = Element.ALIGN_CENTER;
                                Toileting.Colspan = 2;
                                tblmotToilet.AddCell(Toileting);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "1TI") != "")
                                {
                                    PdfPCell ToiIndependent = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "1TI"), fontBoldTextOP));
                                    tblmotToilet.AddCell(ToiIndependent);
                                    tblmotToilet.AddCell(NutIndependent);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "3TN") != "")
                                {
                                    PdfPCell ToiIntermittentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "3TN"), fontBoldTextOP));
                                    tblmotToilet.AddCell(ToiIntermittentOP);
                                    PdfPCell ToiIntermittent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IntermittentSupervision, tableFont));
                                    tblmotToilet.AddCell(ToiIntermittent);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "2TA") != "")
                                {
                                    PdfPCell ToiAssistanceOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "2TA"), fontBoldTextOP));
                                    tblmotToilet.AddCell(ToiAssistanceOP);
                                    PdfPCell ToiAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assistance, tableFont));
                                    tblmotToilet.AddCell(ToiAssistance);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "4T1") != "")
                                {
                                    PdfPCell ToiPerson1OP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "4T1"), fontBoldTextOP));
                                    tblmotToilet.AddCell(ToiPerson1OP);
                                    PdfPCell ToiPerson1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OnePersonAssist, tableFont));
                                    tblmotToilet.AddCell(ToiPerson1);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "5T2") != "")
                                {
                                    PdfPCell ToiPerson2OP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "5T2"), fontBoldTextOP));
                                    tblmotToilet.AddCell(ToiPerson2OP);
                                    PdfPCell ToiPerson2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TwoPersonAssist, tableFont));
                                    tblmotToilet.AddCell(ToiPerson2);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "6TT") != "")
                                {
                                    PdfPCell ToiletRoutineOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "6TT"), fontBoldTextOP));
                                    tblmotToilet.AddCell(ToiletRoutineOP);
                                    PdfPCell ToiletRoutine = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ToiletRoutine, tableFont));
                                    tblmotToilet.AddCell(ToiletRoutine);
                                }

                                multiColumn.AddElement(tblmotToilet);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "7BD") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "8BE") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "9BN") != "")
                            {
                                PdfPTable tblBathroom = new PdfPTable(6);
                                tblBathroom.WidthPercentage = 100f;
                                tblBathroom.SetWidths(wthtblBathroom);

                                PdfPCell Bathroom = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bathroom, fontBoldText));
                                Bathroom.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                Bathroom.HorizontalAlignment = Element.ALIGN_CENTER;
                                Bathroom.Colspan = 6;
                                tblBathroom.AddCell(Bathroom);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "7BD") != "")
                                {
                                    PdfPCell ToiBatDOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "7BD"), fontBoldTextOP));
                                    tblBathroom.AddCell(ToiBatDOP);
                                    tblBathroom.AddCell(BathroomD);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "8BE") != "")
                                {
                                    PdfPCell ToiBatEOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "8BE"), fontBoldTextOP));
                                    tblBathroom.AddCell(ToiBatEOP);
                                    tblBathroom.AddCell(BathroomE);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "9BN") != "")
                                {
                                    PdfPCell ToiBatNOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "9BN"), fontBoldTextOP));
                                    tblBathroom.AddCell(ToiBatNOP);
                                    tblBathroom.AddCell(BathroomN);
                                }
                                multiColumn.AddElement(tblBathroom);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "10CD") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "11CE") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "12CN") != "")
                            {
                                PdfPTable tblCommode = new PdfPTable(6);
                                tblCommode.WidthPercentage = 100f;
                                tblCommode.SetWidths(wthtblBathroom);

                                PdfPCell Commode = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Commode, fontBoldText));
                                Commode.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                Commode.HorizontalAlignment = Element.ALIGN_CENTER;
                                Commode.Colspan = 6;
                                tblCommode.AddCell(Commode);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "10CD") != "")
                                {
                                    PdfPCell CommodeDOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "10CD"), fontBoldTextOP));
                                    tblCommode.AddCell(CommodeDOP);
                                    tblCommode.AddCell(BathroomD);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "11CE") != "")
                                {
                                    PdfPCell CommodeEOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "11CE"), fontBoldTextOP));
                                    tblCommode.AddCell(CommodeEOP);
                                    tblCommode.AddCell(BathroomE);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "12CN") != "")
                                {
                                    PdfPCell CommodeNOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "12CN"), fontBoldTextOP));
                                    tblCommode.AddCell(CommodeNOP);
                                    tblCommode.AddCell(BathroomN);
                                }
                                multiColumn.AddElement(tblCommode);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "13UD") != "" ||
                               getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "14UE") != "" ||
                               getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "15UN") != "")
                            {

                                PdfPTable tblBedpanUrinal = new PdfPTable(6);
                                tblBedpanUrinal.WidthPercentage = 100f;
                                tblBedpanUrinal.SetWidths(wthtblBathroom);

                                PdfPCell BedpanUrinal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BedpanUrinal, fontBoldText));
                                BedpanUrinal.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                BedpanUrinal.HorizontalAlignment = Element.ALIGN_CENTER;
                                BedpanUrinal.Colspan = 6;
                                tblBedpanUrinal.AddCell(BedpanUrinal);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "13UD") != "")
                                {
                                    PdfPCell BedpanUrinalDOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "13UD"), fontBoldTextOP));
                                    tblBedpanUrinal.AddCell(BedpanUrinalDOP);
                                    tblBedpanUrinal.AddCell(BathroomD);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "14UE") != "")
                                {
                                    PdfPCell BedpanUrinalEOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "14UE"), fontBoldTextOP));
                                    tblBedpanUrinal.AddCell(BedpanUrinalEOP);
                                    tblBedpanUrinal.AddCell(BathroomE);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "15UN") != "")
                                {
                                    PdfPCell BedpanUrinalNOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "15UN"), fontBoldTextOP));
                                    tblBedpanUrinal.AddCell(BedpanUrinalNOP);
                                    tblBedpanUrinal.AddCell(BathroomN);
                                }

                                multiColumn.AddElement(tblBedpanUrinal);
                            }
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "6MN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "1MS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "2ML") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "3MA") != "" ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_Pharmacy"].ToString()))
                        {
                            PdfPTable tblMedicationAdministration = new PdfPTable(2);
                            tblMedicationAdministration.WidthPercentage = 100f;
                            tblMedicationAdministration.SetWidths(wthAssessed);

                            tblMedicationAdministration.AddCell(spaceCell1);

                            PdfPCell MedicationAdministration = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MedicationAdministration, fontHDBoldText));
                            MedicationAdministration.Colspan = 2;
                            MedicationAdministration.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblMedicationAdministration.AddCell(MedicationAdministration);

                            PdfPCell MedicationAdministration1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MedicationAdministration, fontBoldText));
                            MedicationAdministration1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            MedicationAdministration1.HorizontalAlignment = Element.ALIGN_CENTER;
                            MedicationAdministration1.Colspan = 2;
                            tblMedicationAdministration.AddCell(MedicationAdministration1);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "6MN") != "")
                            {
                                PdfPCell NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "6MN"), fontBoldTextOP));
                                tblMedicationAdministration.AddCell(NAOP);
                                PdfPCell NA1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                                tblMedicationAdministration.AddCell(NA);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "1MS") != "")
                            {
                                PdfPCell MedSelfAdministrationOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "1MS"), fontBoldTextOP));
                                tblMedicationAdministration.AddCell(MedSelfAdministrationOP);
                                PdfPCell MedSelfAdministration = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Self, tableFont));
                                tblMedicationAdministration.AddCell(MedSelfAdministration);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "2ML") != "")
                            {
                                PdfPCell MedAdministeredbyHomeStaffOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "2ML"), fontBoldTextOP));
                                tblMedicationAdministration.AddCell(MedAdministeredbyHomeStaffOP);
                                PdfPCell MedAdministeredbyHomeStaff = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Home, tableFont));
                                tblMedicationAdministration.AddCell(MedAdministeredbyHomeStaff);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "3MA") != "")
                            {
                                PdfPCell MedAdministeredbyAgencyStaffOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "3MA"), fontBoldTextOP));
                                tblMedicationAdministration.AddCell(MedAdministeredbyAgencyStaffOP);
                                PdfPCell MedAdministeredbyAgencyStaff = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
                                tblMedicationAdministration.AddCell(MedAdministeredbyAgencyStaff);
                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_Pharmacy"].ToString()))
                            {
                                PdfPCell txtMedPharmacyprovider = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pharmacyprovider, tableFont));
                                txtMedPharmacyprovider.Colspan = 2;
                                tblMedicationAdministration.AddCell(txtMedPharmacyprovider);
                                PdfPCell txtMedPharmacyproviderOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_Pharmacy"].ToString(), tableFont));
                                txtMedPharmacyproviderOP.Colspan = 2;
                                txtMedPharmacyproviderOP.FixedHeight = 50;
                                tblMedicationAdministration.AddCell(txtMedPharmacyproviderOP);
                            }

                            multiColumn.AddElement(tblMedicationAdministration);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "12VU") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "2VI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "8VIL") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "9VIR") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "3VB") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "6VL") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "7VR") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "4VG") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "5VC") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "10VA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "14HU") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "2HI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "9HM") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "10HP") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "3HD") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "11HE") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "12HA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "4HL") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "5HR") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "15HH") != "")
                        {
                            PdfPTable tblSensoryAbilities = new PdfPTable(2);
                            tblSensoryAbilities.WidthPercentage = 100f;
                            tblSensoryAbilities.SetWidths(wthAssessed);

                            tblSensoryAbilities.AddCell(spaceCell1);

                            PdfPCell SensoryAbilities = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SensoryAbilities, fontHDBoldText));
                            SensoryAbilities.Colspan = 2;
                            SensoryAbilities.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblSensoryAbilities.AddCell(SensoryAbilities);


                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "12VU") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "2VI") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "8VIL") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "9VIR") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "3VB") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "6VL") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "7VR") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "4VG") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "5VC") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "10VA") != ""
                                )
                            {


                                PdfPCell Vision = new PdfPCell(new Phrase("Vision ", fontBoldText));
                                Vision.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                Vision.HorizontalAlignment = Element.ALIGN_CENTER;
                                Vision.Colspan = 2;
                                tblSensoryAbilities.AddCell(Vision);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "12VU") != "")
                                {
                                    PdfPCell ViNormalOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "12VU"), fontBoldTextOP));
                                    tblSensoryAbilities.AddCell(ViNormalOP);
                                    PdfPCell ViNormal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unimpaired, tableFont));
                                    tblSensoryAbilities.AddCell(ViNormal);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "2VI") != "")
                                {
                                    PdfPCell ViImpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "2VI"), fontBoldTextOP));
                                    tblSensoryAbilities.AddCell(ViImpairedOP);
                                    PdfPCell ViImpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Impaired, tableFont));
                                    tblSensoryAbilities.AddCell(ViImpaired);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "8VIL") != "")
                                {
                                    PdfPCell ViImpairedLeftOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "8VIL"), fontBoldTextOP));
                                    tblSensoryAbilities.AddCell(ViImpairedLeftOP);
                                    PdfPCell ViImpairedLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ImpairedLeft, tableFont));
                                    tblSensoryAbilities.AddCell(ViImpairedLeft);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "9VIR") != "")
                                {

                                    PdfPCell ViImpairedRightOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "9VIR"), fontBoldTextOP));
                                    tblSensoryAbilities.AddCell(ViImpairedRightOP);
                                    PdfPCell ViImpairedRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ImpairedRight, tableFont));
                                    tblSensoryAbilities.AddCell(ViImpairedRight);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "3VB") != "")
                                {
                                    PdfPCell ViBlindOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "3VB"), fontBoldTextOP));
                                    tblSensoryAbilities.AddCell(ViBlindOP);
                                    PdfPCell ViBlind = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Blind, tableFont));
                                    tblSensoryAbilities.AddCell(ViBlind);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "6VL") != "")
                                {
                                    PdfPCell ViBlindLeftOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "6VL"), fontBoldTextOP));
                                    tblSensoryAbilities.AddCell(ViBlindLeftOP);
                                    PdfPCell ViBlindLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BlindLeft, tableFont));
                                    tblSensoryAbilities.AddCell(ViBlindLeft);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "7VR") != "")
                                {
                                    PdfPCell ViBlindRightOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "7VR"), fontBoldTextOP));
                                    tblSensoryAbilities.AddCell(ViBlindRightOP);
                                    PdfPCell ViBlindRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BlindRight, tableFont));
                                    tblSensoryAbilities.AddCell(ViBlindRight);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "4VG") != "")
                                {
                                    PdfPCell ViGlassesOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "4VG"), fontBoldTextOP));
                                    tblSensoryAbilities.AddCell(ViGlassesOP);
                                    PdfPCell ViGlasses = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Glasses, tableFont));
                                    tblSensoryAbilities.AddCell(ViGlasses);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "5VC") != "")
                                {
                                    PdfPCell ViContactLensOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "5VC"), fontBoldTextOP));
                                    tblSensoryAbilities.AddCell(ViContactLensOP);
                                    PdfPCell ViContactLens = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ContactLens, tableFont));
                                    tblSensoryAbilities.AddCell(ViContactLens);
                                }
                                multiColumn.AddElement(tblSensoryAbilities);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "14HU") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "2HI") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "9HM") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "10HP") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "3HD") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "11HE") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "12HA") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "4HL") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "5HR") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "15HH") != ""
                                )
                            {
                                PdfPTable tblHearing = new PdfPTable(2);
                                tblHearing.WidthPercentage = 100f;
                                tblHearing.SetWidths(wthAssessed);

                                PdfPCell Hearing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Hearing, fontBoldText));
                                Hearing.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                Hearing.HorizontalAlignment = Element.ALIGN_CENTER;
                                Hearing.Colspan = 2;
                                tblHearing.AddCell(Hearing);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "14HU") != "")
                                {
                                    PdfPCell HeaNormalOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "14HU"), fontBoldTextOP));
                                    tblHearing.AddCell(HeaNormalOP);
                                    PdfPCell HeaNormal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unimpaired, tableFont));
                                    tblHearing.AddCell(HeaNormal);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "2HI") != "")
                                {
                                    PdfPCell HeaImpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "2HI"), fontBoldTextOP));
                                    tblHearing.AddCell(HeaImpairedOP);
                                    PdfPCell HeaImpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Impaired, tableFont));
                                    tblHearing.AddCell(HeaImpaired);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "9HM") != "")
                                {
                                    PdfPCell HeaImpairedLeftOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "9HM"), fontBoldTextOP));
                                    tblHearing.AddCell(HeaImpairedLeftOP);
                                    PdfPCell HeaImpairedLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ImpairedLeft, tableFont));
                                    tblHearing.AddCell(HeaImpairedLeft);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "10HP") != "")
                                {
                                    PdfPCell HeaImpairedRightOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "10HP"), fontBoldTextOP));
                                    tblHearing.AddCell(HeaImpairedRightOP);
                                    PdfPCell HeaImpairedRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ImpairedRight, tableFont));
                                    tblHearing.AddCell(HeaImpairedRight);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "3HD") != "")
                                {
                                    PdfPCell HeaDeafOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "3HD"), fontBoldTextOP));
                                    tblHearing.AddCell(HeaDeafOP);
                                    PdfPCell HeaDeaf = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Deaf, tableFont));
                                    tblHearing.AddCell(HeaDeaf);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "11HE") != "")
                                {
                                    PdfPCell HeaDeafLeftOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "11HE"), fontBoldTextOP));
                                    tblHearing.AddCell(HeaDeafLeftOP);
                                    PdfPCell HeaDeafLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DeafLeft, tableFont));
                                    tblHearing.AddCell(HeaDeafLeft);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "12HA") != "")
                                {
                                    PdfPCell HeaDeafRightOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "12HA"), fontBoldTextOP));
                                    tblHearing.AddCell(HeaDeafRightOP);
                                    PdfPCell HeaDeafRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DeafRight, tableFont));
                                    tblHearing.AddCell(HeaDeafRight);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "15HH") != "")
                                {
                                    PdfPCell HeaAideLeftOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "4HL"), fontBoldTextOP));
                                    tblHearing.AddCell(HeaAideLeftOP);
                                    PdfPCell HeaAideLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.HearingAid, tableFont));
                                    tblHearing.AddCell(HeaAideLeft);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "4HL") != "")
                                {
                                    PdfPCell HeaAideLeftOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "4HL"), fontBoldTextOP));
                                    tblHearing.AddCell(HeaAideLeftOP);
                                    PdfPCell HeaAideLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.HearingAidLeft, tableFont));
                                    tblHearing.AddCell(HeaAideLeft);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "5HR") != "")
                                {

                                    PdfPCell HeaAideRightOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "5HR"), fontBoldTextOP));
                                    tblHearing.AddCell(HeaAideRightOP);
                                    PdfPCell HeaAideRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.HearingAidRight, tableFont));
                                    tblHearing.AddCell(HeaAideRight);
                                }

                                multiColumn.AddElement(tblHearing);
                            }
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "1SN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "2SD") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "2SD") != "" ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString()) ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "8CM") != "" ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication_comments"].ToString())
                            )
                        {
                            PdfPTable tblCommunication = new PdfPTable(2);
                            tblCommunication.WidthPercentage = 100f;
                            tblCommunication.SetWidths(wthAssessed);
                            tblCommunication.AddCell(spaceCell1);

                            PdfPCell Communication = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Communication, fontHDBoldText));
                            Communication.Colspan = 2;
                            Communication.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblCommunication.AddCell(Communication);

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "1SN") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "2SD") != "")
                            {
                                PdfPCell Speech = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Speech, fontBoldText));
                                Speech.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                Speech.HorizontalAlignment = Element.ALIGN_CENTER;
                                Speech.Colspan = 2;
                                tblCommunication.AddCell(Speech);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "1SN") != "")
                                {
                                    PdfPCell SpeNormalOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "1SN"), fontBoldTextOP));
                                    tblCommunication.AddCell(SpeNormalOP);
                                    PdfPCell SpeNormal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Normal, tableFont));
                                    tblCommunication.AddCell(SpeNormal);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "2SD") != "")
                                {
                                    PdfPCell SpeDifficultyOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "2SD"), fontBoldTextOP));
                                    tblCommunication.AddCell(SpeDifficultyOP);
                                    PdfPCell SpeDifficulty = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficulty, tableFont));
                                    tblCommunication.AddCell(SpeDifficulty);
                                }
                            }

                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString()) ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI") != "" ||
                           getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "8CM") != "" ||
                           !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication_comments"].ToString()))
                            {
                                PdfPCell Communication1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Communicating, fontBoldText));
                                Communication1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                Communication1.HorizontalAlignment = Element.ALIGN_CENTER;
                                Communication1.Colspan = 2;
                                tblCommunication.AddCell(Communication1);
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString()))
                                {
                                    PdfPCell txtLanguageSpoken = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.LanguageSpoken, tableFont));
                                    txtLanguageSpoken.Colspan = 2;
                                    tblCommunication.AddCell(txtLanguageSpoken);
                                    PdfPCell txtLanguageSpokenOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString(), tableFont));
                                    txtLanguageSpokenOP.Colspan = 2;
                                    txtLanguageSpokenOP.FixedHeight = 15;
                                    tblCommunication.AddCell(txtLanguageSpokenOP);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL") != "")
                                {
                                    PdfPCell SpeLanguagebarrierOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL"), fontBoldTextOP));
                                    tblCommunication.AddCell(SpeLanguagebarrierOP);
                                    PdfPCell SpeLanguagebarrier = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Languagebarrier, tableFont));
                                    tblCommunication.AddCell(SpeLanguagebarrier);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU") != "")
                                {
                                    PdfPCell SpeUnderstandsInstructionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU"), fontBoldTextOP));
                                    tblCommunication.AddCell(SpeUnderstandsInstructionOP);
                                    PdfPCell SpeUnderstandsInstruction = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.UnderstandsInstruction, tableFont));
                                    tblCommunication.AddCell(SpeUnderstandsInstruction);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS") != "")
                                {
                                    PdfPCell SpeSpeechUnimpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS"), fontBoldTextOP));
                                    tblCommunication.AddCell(SpeSpeechUnimpairedOP);
                                    PdfPCell SpeSpeechUnimpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpeechUnimpaired, tableFont));
                                    tblCommunication.AddCell(SpeSpeechUnimpaired);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD") != "")
                                {
                                    PdfPCell SpeDifficultyinCommunicatingbutUnderstandsOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD"), fontBoldTextOP));
                                    tblCommunication.AddCell(SpeDifficultyinCommunicatingbutUnderstandsOP);
                                    PdfPCell SpeDifficultyinCommunicatingbutUnderstands = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficultyincommunicating, tableFont));
                                    tblCommunication.AddCell(SpeDifficultyinCommunicatingbutUnderstands);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI") != "")
                                {
                                    PdfPCell SpeDifficultyinUnderstandingbutCommunicatesOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI"), fontBoldTextOP));
                                    tblCommunication.AddCell(SpeDifficultyinUnderstandingbutCommunicatesOP);
                                    PdfPCell SpeDifficultyinUnderstandingbutCommunicates = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficultyinunderstanding, tableFont));
                                    tblCommunication.AddCell(SpeDifficultyinUnderstandingbutCommunicates);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "8CM") != "")
                                {
                                    PdfPCell SpeImpairedabilitytocommunicateorunderstandOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "8CM"), fontBoldTextOP));
                                    tblCommunication.AddCell(SpeImpairedabilitytocommunicateorunderstandOP);
                                    PdfPCell SpeImpairedabilitytocommunicateorunderstand = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Impairedabilitytocommunicate, tableFont));
                                    tblCommunication.AddCell(SpeImpairedabilitytocommunicateorunderstand);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication_comments"].ToString()))
                                {
                                    PdfPCell txtSpeComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                                    txtSpeComments.Colspan = 2;
                                    tblCommunication.AddCell(txtSpeComments);
                                    PdfPCell txtSpeCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication_comments"].ToString(), tableFont));
                                    txtSpeCommentsOP.Colspan = 2;
                                    txtSpeCommentsOP.FixedHeight = 50;
                                    tblCommunication.AddCell(txtSpeCommentsOP);
                                }
                                multiColumn.AddElement(tblCommunication);
                            }
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "Y") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "N") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "1WH") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "2WA") != "" ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_agency"].ToString()))
                        {
                            PdfPTable tblWoundcare = new PdfPTable(2);
                            tblWoundcare.WidthPercentage = 100f;
                            tblWoundcare.SetWidths(wthAssessed);

                            tblWoundcare.AddCell(spaceCell1);

                            PdfPCell Woundcare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Woundcare, fontHDBoldText));
                            Woundcare.Colspan = 2;
                            Woundcare.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblWoundcare.AddCell(Woundcare);

                            PdfPCell Woundcare1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Woundcare, fontBoldText));
                            Woundcare1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            Woundcare1.HorizontalAlignment = Element.ALIGN_CENTER;
                            Woundcare1.Colspan = 2;
                            tblWoundcare.AddCell(Woundcare1);

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "Y") != "")
                            {
                                PdfPCell WoYesOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "Y"), fontBoldTextOP));
                                tblWoundcare.AddCell(WoYesOP);
                                PdfPCell WoYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                tblWoundcare.AddCell(WoYes);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "N") != "")
                            {
                                PdfPCell WoNoOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "N"), fontBoldTextOP));
                                tblWoundcare.AddCell(WoNoOP);
                                PdfPCell WoNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                                tblWoundcare.AddCell(WoNo);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "1WH") != "")
                            {
                                PdfPCell WoYesOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "1WH"), fontBoldTextOP));
                                tblWoundcare.AddCell(WoYesOP);
                                PdfPCell WoYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                tblWoundcare.AddCell(WoYes);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "2WA") != "")
                            {
                                PdfPCell WoNoOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "2WA"), fontBoldTextOP));
                                tblWoundcare.AddCell(WoNoOP);
                                PdfPCell WoNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                                tblWoundcare.AddCell(WoNo);
                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_agency"].ToString()))
                            {

                                PdfPCell txtWCAgencyservicing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agencyname, tableFont));
                                txtWCAgencyservicing.Colspan = 2;
                                tblWoundcare.AddCell(txtWCAgencyservicing);
                                PdfPCell txtWCAgencyservicingOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_agency"].ToString(), tableFont));
                                txtWCAgencyservicingOP.Colspan = 2;
                                txtWCAgencyservicingOP.FixedHeight = 70;
                                tblWoundcare.AddCell(txtWCAgencyservicingOP);
                            }
                            multiColumn.AddElement(tblWoundcare);
                        }


                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "67SN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "68SY") != "" ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_skincare_treatment"].ToString()))
                        {

                            PdfPTable tblSkinCare = new PdfPTable(2);
                            tblSkinCare.WidthPercentage = 100f;
                            tblSkinCare.SetWidths(wthAssessed);

                            PdfPCell SkinCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SkinCare, fontBoldText));
                            SkinCare.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            SkinCare.HorizontalAlignment = Element.ALIGN_CENTER;
                            SkinCare.Colspan = 2;
                            tblSkinCare.AddCell(SkinCare);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "67SN") != "")
                            {
                                PdfPCell SCRiskofskinbreakdownOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "67SN"), fontBoldTextOP));
                                tblSkinCare.AddCell(SCRiskofskinbreakdownOP);
                                PdfPCell SCRiskofskinbreakdown = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                tblSkinCare.AddCell(SCRiskofskinbreakdown);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "68SY") != "")
                            {
                                PdfPCell SCBruisesEasilyOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "68SY"), fontBoldTextOP));
                                tblSkinCare.AddCell(SCBruisesEasilyOP);
                                PdfPCell SCBruisesEasily = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                                tblSkinCare.AddCell(SCBruisesEasily);
                            }

                            if (dsAssessmentDetails.Tables[0].Rows[0]["fd_skincare_treatment"].ToString() != "")
                            {
                                PdfPCell SkinCareComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialTreatements, tableFont));
                                SkinCareComments.Colspan = 2;
                                tblSkinCare.AddCell(SkinCareComments);
                                PdfPCell SkinCareCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_skincare_treatment"].ToString(), tableFont));
                                SkinCareCommentsOP.Colspan = 2;
                                SkinCareCommentsOP.FixedHeight = 50;
                                tblSkinCare.AddCell(SkinCareCommentsOP);
                            }
                            multiColumn.AddElement(tblSkinCare);
                        }


                        if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_supplier"].ToString()) ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_rate"].ToString()) ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7ON") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "1OI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "2OS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "3OA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9OD") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9CN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "4CI") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "5CS") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "6CA") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7CD") != "" ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_other"].ToString()) ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_comments"].ToString())
                            )
                        {
                            PdfPTable tblSpecialNeeds = new PdfPTable(2);
                            tblSpecialNeeds.WidthPercentage = 100f;
                            tblSpecialNeeds.SetWidths(wthAssessed);


                            tblSpecialNeeds.AddCell(spaceCell1);
                            PdfPCell SpecialNeeds = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialNeeds, fontHDBoldText));
                            SpecialNeeds.Colspan = 2;
                            SpecialNeeds.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblSpecialNeeds.AddCell(SpecialNeeds);


                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_supplier"].ToString()) ||
                                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_rate"].ToString()) ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7ON") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "1OI") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "2OS") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "3OA") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9OD") != ""
                                )
                            {


                                PdfPCell Oxygen = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.O2Oxygen, fontBoldText));
                                Oxygen.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                Oxygen.HorizontalAlignment = Element.ALIGN_CENTER;
                                Oxygen.Colspan = 2;
                                tblSpecialNeeds.AddCell(Oxygen);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7ON") != "")
                                {
                                    PdfPCell RateIndependent = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7ON"), fontBoldTextOP));
                                    tblSpecialNeeds.AddCell(RateIndependent);
                                    tblSpecialNeeds.AddCell(na);
                                }

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "1OI") != "")
                                {
                                    PdfPCell RateIndependent = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "1OI"), fontBoldTextOP));
                                    tblSpecialNeeds.AddCell(RateIndependent);
                                    tblSpecialNeeds.AddCell(Independent);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "2OS") != "")
                                {
                                    PdfPCell RateSupervised = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "2OS"), fontBoldTextOP));
                                    tblSpecialNeeds.AddCell(RateSupervised);
                                    tblSpecialNeeds.AddCell(Supervised);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "3OA") != "")
                                {
                                    PdfPCell RateAssisted = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "3OA"), fontBoldTextOP));
                                    tblSpecialNeeds.AddCell(RateAssisted);
                                    tblSpecialNeeds.AddCell(Assisted);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9OD") != "")
                                {
                                    PdfPCell RateAssisted = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9OD"), fontBoldTextOP));
                                    tblSpecialNeeds.AddCell(RateAssisted);
                                    tblSpecialNeeds.AddCell(dependent);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_supplier"].ToString()))
                                {
                                    PdfPCell txtSupNameOP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SupplierName, tableFont));
                                    txtSupNameOP.Colspan = 2;
                                    tblSpecialNeeds.AddCell(txtSupNameOP);
                                    PdfPCell txtSupName = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_supplier"].ToString(), tableFont));
                                    txtSupName.Colspan = 2;
                                    txtSupName.FixedHeight = 15;
                                    tblSpecialNeeds.AddCell(txtSupName);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_rate"].ToString()))
                                {
                                    PdfPCell Rate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Rate, tableFont));
                                    Rate.Colspan = 2;
                                    tblSpecialNeeds.AddCell(Rate);
                                    PdfPCell RateOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_rate"].ToString(), tableFont));
                                    RateOP.Colspan = 2;
                                    RateOP.FixedHeight = 15;
                                    tblSpecialNeeds.AddCell(RateOP);
                                }
                                multiColumn.AddElement(tblSpecialNeeds);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9CN") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "4CI") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "5CS") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "6CA") != "" ||
                                getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7CD") != "" ||
                                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_other"].ToString()) ||
                                !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_comments"].ToString()))
                            {
                                PdfPTable tblsnCPAP = new PdfPTable(2);
                                tblsnCPAP.WidthPercentage = 100f;
                                tblsnCPAP.SetWidths(wthAssessed);

                                PdfPCell snCPAP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CPAP, fontBoldText));
                                snCPAP.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                snCPAP.HorizontalAlignment = Element.ALIGN_CENTER;
                                snCPAP.Colspan = 2;
                                tblsnCPAP.AddCell(snCPAP);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9CN") != "")
                                {
                                    PdfPCell CPAPIndependent = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9CN"), fontBoldTextOP));
                                    tblsnCPAP.AddCell(CPAPIndependent);
                                    tblsnCPAP.AddCell(na);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "4CI") != "")
                                {
                                    PdfPCell CPAPIndependent = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "4CI"), fontBoldTextOP));
                                    tblsnCPAP.AddCell(CPAPIndependent);
                                    tblsnCPAP.AddCell(Independent);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "5CS") != "")
                                {
                                    PdfPCell CPAPSupervised = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "5CS"), fontBoldTextOP));
                                    tblsnCPAP.AddCell(CPAPSupervised);
                                    tblsnCPAP.AddCell(Supervised);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "6CA") != "")
                                {
                                    PdfPCell CPAPAssisted = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "6CA"), fontBoldTextOP));
                                    tblsnCPAP.AddCell(CPAPAssisted);
                                    tblsnCPAP.AddCell(Assisted);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7CD") != "")
                                {
                                    PdfPCell CPAPAssisted = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7CD"), fontBoldTextOP));
                                    tblsnCPAP.AddCell(CPAPAssisted);
                                    tblsnCPAP.AddCell(dependent);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_other"].ToString()))
                                {
                                    PdfPCell txtSPNeedOther = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supplier, tableFont));
                                    txtSPNeedOther.Colspan = 2;
                                    tblsnCPAP.AddCell(txtSPNeedOther);
                                    PdfPCell txtSPNeedOtherOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_other"].ToString(), tableFont));
                                    txtSPNeedOtherOP.Colspan = 2;
                                    txtSPNeedOtherOP.FixedHeight = 55;
                                    tblsnCPAP.AddCell(txtSPNeedOtherOP);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_comments"].ToString()))
                                {
                                    PdfPCell txtSPNeedComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Notes, tableFont));
                                    txtSPNeedComments.Colspan = 2;
                                    tblsnCPAP.AddCell(txtSPNeedComments);
                                    PdfPCell txtSPNeedCommentsOP = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_comments"].ToString(), tableFont));
                                    txtSPNeedCommentsOP.Colspan = 2;
                                    txtSPNeedCommentsOP.FixedHeight = 70;
                                    tblsnCPAP.AddCell(txtSPNeedCommentsOP);
                                }
                                multiColumn.AddElement(tblsnCPAP);
                            }
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "Y") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "N") != ""
                            )
                        {
                            PdfPTable tblResidentFamilymeetingtobearranged = new PdfPTable(2);
                            tblResidentFamilymeetingtobearranged.WidthPercentage = 100f;
                            tblResidentFamilymeetingtobearranged.SetWidths(wthAssessed);

                            tblResidentFamilymeetingtobearranged.AddCell(spaceCell1);

                            PdfPCell ResidentFamilymeetingtobearranged = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilySuport, fontHDBoldText));
                            ResidentFamilymeetingtobearranged.Colspan = 2;
                            ResidentFamilymeetingtobearranged.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblResidentFamilymeetingtobearranged.AddCell(ResidentFamilymeetingtobearranged);

                            PdfPCell ResidentFamilymeetingtobearranged1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentFamilymeetingtobearranged, fontBoldText));
                            ResidentFamilymeetingtobearranged1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            ResidentFamilymeetingtobearranged1.HorizontalAlignment = Element.ALIGN_CENTER;
                            ResidentFamilymeetingtobearranged1.Colspan = 2;
                            tblResidentFamilymeetingtobearranged.AddCell(ResidentFamilymeetingtobearranged1);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "Y") != "")
                            {
                                PdfPCell ResYesOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "Y"), fontBoldTextOP));
                                tblResidentFamilymeetingtobearranged.AddCell(ResYesOP);
                                PdfPCell ResYes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                tblResidentFamilymeetingtobearranged.AddCell(ResYes);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "N") != "")
                            {
                                PdfPCell ResNoOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "N"), fontBoldTextOP));
                                tblResidentFamilymeetingtobearranged.AddCell(ResNoOP);
                                PdfPCell ResNo = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                                tblResidentFamilymeetingtobearranged.AddCell(ResNo);
                            }
                            multiColumn.AddElement(tblResidentFamilymeetingtobearranged);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "4IN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "1ID") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "2IW") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "3IM") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "9FA") != ""
                            )
                        {
                            PdfPTable tblFamilyInvolvement = new PdfPTable(2);
                            tblFamilyInvolvement.WidthPercentage = 100f;
                            tblFamilyInvolvement.SetWidths(wthAssessed);

                            tblFamilyInvolvement.AddCell(spaceCell1);

                            PdfPCell FamilyInvolvement = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilyInvolement, fontHDBoldText));
                            FamilyInvolvement.Colspan = 2;
                            FamilyInvolvement.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblFamilyInvolvement.AddCell(FamilyInvolvement);

                            PdfPCell FamilyInvolvement1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilyInvolement, fontBoldText));
                            FamilyInvolvement1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            FamilyInvolvement1.HorizontalAlignment = Element.ALIGN_CENTER;
                            FamilyInvolvement1.Colspan = 2;
                            tblFamilyInvolvement.AddCell(FamilyInvolvement1);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "4IN") != "")
                            {
                                PdfPCell FamDailyOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "4IN"), fontBoldTextOP));
                                tblFamilyInvolvement.AddCell(FamDailyOP);
                                PdfPCell FamDaily = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Never, tableFont));
                                tblFamilyInvolvement.AddCell(FamDaily);
                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "1ID") != "")
                            {
                                PdfPCell FamDailyOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "1ID"), fontBoldTextOP));
                                tblFamilyInvolvement.AddCell(FamDailyOP);
                                PdfPCell FamDaily = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.daily, tableFont));
                                tblFamilyInvolvement.AddCell(FamDaily);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "2IW") != "")
                            {
                                PdfPCell FamWeeklyOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "2IW"), fontBoldTextOP));
                                tblFamilyInvolvement.AddCell(FamWeeklyOP);
                                PdfPCell FamWeekly = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Weekly, tableFont));
                                tblFamilyInvolvement.AddCell(FamWeekly);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "3IM") != "")
                            {
                                PdfPCell FamMonthlyOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "3IM"), fontBoldTextOP));
                                tblFamilyInvolvement.AddCell(FamMonthlyOP);
                                PdfPCell FamMonthly = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Monthly, tableFont));
                                tblFamilyInvolvement.AddCell(FamMonthly);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "9FA") != "")
                            {
                                PdfPCell FamNeverOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "9FA"), fontBoldTextOP));
                                tblFamilyInvolvement.AddCell(FamNeverOP);
                                PdfPCell FamNever = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Annually, tableFont));
                                tblFamilyInvolvement.AddCell(FamNever);
                            }
                            multiColumn.AddElement(tblFamilyInvolvement);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "5MU") != "" ||
                         getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "20MY") != "" ||
                          !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mantoux"].ToString()) ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "7CU") != "" ||
                         getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "21CY") != "" ||
                         !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_chest_Xray"].ToString()) ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "1PU") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22PY") != "" ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pheumovax"].ToString()) ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "3FU") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22FY") != "" ||
                         !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_flu_vaccine"].ToString())
                            )
                        {
                            PdfPTable tblimmunizationPne = new PdfPTable(2);
                            tblimmunizationPne.WidthPercentage = 100f;
                            tblimmunizationPne.SetWidths(wthAssessed);

                            tblimmunizationPne.AddCell(spaceCell1);

                            PdfPCell ImmPneumovax = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Immunization, fontHDBoldText));
                            ImmPneumovax.Colspan = 2;
                            ImmPneumovax.BackgroundColor = BaseColor.LIGHT_GRAY;
                            tblimmunizationPne.AddCell(ImmPneumovax);

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "5MU") != "" ||
                             getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "20MY") != "" ||
                              !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mantoux"].ToString())
                               )
                            {
                                PdfPTable tblimmunizationMan = new PdfPTable(2);
                                tblimmunizationMan.WidthPercentage = 100f;
                                tblimmunizationMan.SetWidths(wthAssessed);



                                PdfPCell ImmMan1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MantouxResultsmustbeonfile, fontBoldText));
                                ImmMan1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                ImmMan1.HorizontalAlignment = Element.ALIGN_CENTER;
                                ImmMan1.Colspan = 2;
                                tblimmunizationPne.AddCell(ImmMan1);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "5MU") != "")
                                {
                                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "5MU"), fontBoldTextOP));
                                    tblimmunizationPne.AddCell(UnknowOP);
                                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                                    tblimmunizationPne.AddCell(Unknow);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "20MY") != "")
                                {
                                    PdfPCell RefusedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "20MY"), fontBoldTextOP));
                                    tblimmunizationPne.AddCell(RefusedOP);
                                    PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                    tblimmunizationPne.AddCell(Refused);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_mantoux"].ToString()))
                                {

                                    PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_mantoux"].ToString(), tableFont));
                                    txtPneumovaxDateMod.Colspan = 2;
                                    tblimmunizationPne.AddCell(txtPneumovaxDateMod);
                                }
                                tblimmunizationPne.AddCell(spaceCell1);

                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "7CU") != "" ||
                         getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "21CY") != "" ||
                         !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_chest_Xray"].ToString())
                          )
                            {
                                PdfPTable tblimmunizationChestX = new PdfPTable(2);
                                tblimmunizationChestX.WidthPercentage = 100f;
                                tblimmunizationChestX.SetWidths(wthAssessed);



                                PdfPCell ImmChestX1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ChestXRay, fontBoldText));
                                ImmChestX1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                ImmChestX1.HorizontalAlignment = Element.ALIGN_CENTER;
                                ImmChestX1.Colspan = 2;
                                tblimmunizationPne.AddCell(ImmChestX1);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "7CU") != "")
                                {
                                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "7CU"), fontBoldTextOP));
                                    tblimmunizationPne.AddCell(UnknowOP);
                                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                                    tblimmunizationPne.AddCell(Unknow);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "21CY") != "")
                                {
                                    PdfPCell RefusedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "21CY"), fontBoldTextOP));
                                    tblimmunizationPne.AddCell(RefusedOP);
                                    PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                    tblimmunizationPne.AddCell(Refused);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_chest_Xray"].ToString()))
                                {

                                    PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_chest_Xray"].ToString(), tableFont));
                                    txtPneumovaxDateMod.Colspan = 2;
                                    tblimmunizationPne.AddCell(txtPneumovaxDateMod);
                                }
                                tblimmunizationPne.AddCell(spaceCell1);

                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "1PU") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22PY") != "" ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pheumovax"].ToString())
                                )
                            {
                                PdfPCell ImmPneumovax1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pneumovax, fontBoldText));
                                ImmPneumovax1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                ImmPneumovax1.HorizontalAlignment = Element.ALIGN_CENTER;
                                ImmPneumovax1.Colspan = 2;
                                tblimmunizationPne.AddCell(ImmPneumovax1);

                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "1PU") != "")
                                {
                                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "1PU"), fontBoldTextOP));
                                    tblimmunizationPne.AddCell(UnknowOP);
                                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                                    tblimmunizationPne.AddCell(Unknow);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22PY") != "")
                                {
                                    PdfPCell RefusedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22PY"), fontBoldTextOP));
                                    tblimmunizationPne.AddCell(RefusedOP);
                                    PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                    tblimmunizationPne.AddCell(Refused);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pheumovax"].ToString()))
                                {

                                    PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_pheumovax"].ToString(), tableFont));
                                    txtPneumovaxDateMod.Colspan = 2;
                                    tblimmunizationPne.AddCell(txtPneumovaxDateMod);
                                }
                                tblimmunizationPne.AddCell(spaceCell1);

                            }

                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "3FU") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22FY") != "" ||
                         !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_flu_vaccine"].ToString())
                          )
                            {

                                PdfPCell ImmFlu = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FluVaccine, fontBoldText));
                                ImmFlu.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                ImmFlu.HorizontalAlignment = Element.ALIGN_CENTER;
                                ImmFlu.Colspan = 2;
                                tblimmunizationPne.AddCell(ImmFlu);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "3FU") != "")
                                {
                                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "3FU"), fontBoldTextOP));
                                    tblimmunizationPne.AddCell(UnknowOP);
                                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                                    tblimmunizationPne.AddCell(Unknow);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22FY") != "")
                                {
                                    PdfPCell RefusedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22FY"), fontBoldTextOP));
                                    tblimmunizationPne.AddCell(RefusedOP);
                                    PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                    tblimmunizationPne.AddCell(Refused);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_flu_vaccine"].ToString()))
                                {

                                    PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_flu_vaccine"].ToString(), tableFont));
                                    txtPneumovaxDateMod.Colspan = 2;
                                    tblimmunizationPne.AddCell(txtPneumovaxDateMod);
                                }
                                tblimmunizationPne.AddCell(spaceCell1);

                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU") != "" ||
                          getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "23TY") != "" ||
                           !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_tetanus"].ToString()))
                            {
                                PdfPTable tblimmunizationTet = new PdfPTable(2);
                                tblimmunizationTet.WidthPercentage = 100f;
                                tblimmunizationTet.SetWidths(wthAssessed);


                                PdfPCell ImmTet1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tetanus, fontBoldText));
                                ImmTet1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                                ImmTet1.HorizontalAlignment = Element.ALIGN_CENTER;
                                ImmTet1.Colspan = 2;
                                tblimmunizationPne.AddCell(ImmTet1);
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU") != "")
                                {
                                    PdfPCell UnknowOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU"), fontBoldTextOP));
                                    tblimmunizationPne.AddCell(UnknowOP);
                                    PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                                    tblimmunizationPne.AddCell(Unknow);
                                }
                                if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "23TY") != "")
                                {
                                    PdfPCell RefusedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "23TY"), fontBoldTextOP));
                                    tblimmunizationPne.AddCell(RefusedOP);
                                    PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                                    tblimmunizationPne.AddCell(Refused);
                                }
                                if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_tetanus"].ToString()))
                                {

                                    PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_tetanus"].ToString(), tableFont));
                                    txtPneumovaxDateMod.Colspan = 2;
                                    tblimmunizationPne.AddCell(txtPneumovaxDateMod);
                                }


                            }
                            tblimmunizationPne.AddCell(spaceCell1);
                            multiColumn.AddElement(tblimmunizationPne);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "24IN") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "25IU") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "26IM") != "" ||
                            getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "27IV") != "" ||
                             !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_diagnosed"].ToString()) ||
                            !String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_resolved"].ToString())
                            )
                        {
                            PdfPTable tblimmunizationTet = new PdfPTable(2);
                            tblimmunizationTet.WidthPercentage = 100f;
                            tblimmunizationTet.SetWidths(wthAssessed);


                            PdfPCell ImmTet1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tetanus, fontBoldText));
                            ImmTet1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            ImmTet1.HorizontalAlignment = Element.ALIGN_CENTER;
                            ImmTet1.Colspan = 2;
                            tblimmunizationTet.AddCell(ImmTet1);
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "24IN") != "")
                            {
                                PdfPCell UnknowOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "24IN"), fontBoldTextOP));
                                tblimmunizationTet.AddCell(UnknowOP);
                                PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                                tblimmunizationTet.AddCell(Unknow);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "25IU") != "")
                            {
                                PdfPCell RefusedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "25IU"), fontBoldTextOP));
                                tblimmunizationTet.AddCell(RefusedOP);
                                PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unknow, tableFont));
                                tblimmunizationTet.AddCell(Refused);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "26IM") != "")
                            {
                                PdfPCell UnknowOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "26IM"), fontBoldTextOP));
                                tblimmunizationTet.AddCell(UnknowOP);
                                PdfPCell Unknow = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MRSA, tableFont));
                                tblimmunizationTet.AddCell(Unknow);
                            }
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "27IV") != "")
                            {
                                PdfPCell RefusedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "27IV"), fontBoldTextOP));
                                tblimmunizationTet.AddCell(RefusedOP);
                                PdfPCell Refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.VRE, tableFont));
                                tblimmunizationTet.AddCell(Refused);
                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_diagnosed"].ToString()))
                            {

                                PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DiagnosedDate + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_diagnosed"].ToString(), tableFont));
                                txtPneumovaxDateMod.Colspan = 2;
                                tblimmunizationTet.AddCell(txtPneumovaxDateMod);
                            }
                            if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_resolved"].ToString()))
                            {

                                PdfPCell txtPneumovaxDateMod = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResolvedDate + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_resolved"].ToString(), tableFont));
                                txtPneumovaxDateMod.Colspan = 2;
                                tblimmunizationTet.AddCell(txtPneumovaxDateMod);
                            }
                        }
                    }

                }
            }
        }

        catch (Exception ex)
        {
            Log.Write("ResidentProfileReport PrintResidentCareAssessmentPhase3 | " + ex.Message.ToString());
        }
        return multiColumn;
    }

    public PdfPTable PrintResidentCareAssessmentV3(DataSet dsAssessmentDetails, Document doc)
    {
        string exception = string.Empty;
        string assessmentDate = string.Empty;
        int assessmentValue = 0;
        string userName = string.Empty;
        string userType = string.Empty;
        string completedOn = string.Empty;
        Common.Residents resident;
        PdfPTable AssessmentTable = new PdfPTable(3);
        AssessmentTable.WidthPercentage = 100f;
        float[] wthHead = new float[] { 1f, 1f, 1f };
        AssessmentTable.SetWidths(wthHead);
        AssessmentTable.SpacingBefore = 5f;
        try
        {
            resident = new Common.Residents();
            if (Session["ResidentStatus"] != null && Session["ResidentStatus"].ToString() == "I")
            {
                resident = DAL.Residents.GetInActiveResidentById(Convert.ToInt32(Session["ResidentId"]));
            }
            else
            {
                resident = DAL.Residents.GetResidentById(Convert.ToInt32(Session["ResidentId"]));
            }
            string residentnamefooter = resident.LastName + " " + resident.FirstName;
            string suitenofooter = resident.SuiteNo;
            string reportname = "Resident Care Assessment";


            if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
            {
                dsAssessmentDetails = DAL.PlanOfCare.GetPlanOfCare(Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_id"]));
                if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
                {
                    userName = dsAssessmentDetails.Tables[0].Rows[0]["As_fd_last_name"].ToString() + ", " + dsAssessmentDetails.Tables[0].Rows[0]["As_fd_first_name"].ToString();
                    userType = dsAssessmentDetails.Tables[0].Rows[0]["As_fd_user_type"].ToString();
                    DateTime de = Convert.ToDateTime(dsAssessmentDetails.Tables[0].Rows[0]["fd_modified_on"]);
                    completedOn = de.ToString("MMMM dd, yyyy");
                }
                Font tableFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.NORMAL, BaseColor.BLACK);
                Font fontHDBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                Font fontBoldTextSubtitle = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                Font fontBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                Font fontLargeBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                string fontpath = Server.MapPath(".");
                BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
                Font fontBoldTextOP = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);

                iTextSharp.text.Font fontFooter = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.ITALIC, BaseColor.DARK_GRAY);
                iTextSharp.text.Font fontGeneralText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
                iTextSharp.text.Font fontBoldHeadText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                iTextSharp.text.Font fontCellHeader = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                string modify = userName + ", " + userType + ", " + completedOn;

                doc = new Document(PageSize.A4, 20, 20, 25, 15);
                System.IO.MemoryStream mstream = new System.IO.MemoryStream();
                PdfWriter writer = PdfWriter.GetInstance(doc, mstream);

                writer.PageEvent = new pdfHeaderFooterAssessment(residentnamefooter, suitenofooter, reportname, modify);
                doc.Open();
                PdfPTable tblHeader = new PdfPTable(4);
                tblHeader.WidthPercentage = 100f;
                float[] headerWidth = new float[] { 1f, 1f, 1f, 0.32f };
                tblHeader.SetWidths(headerWidth);
                tblHeader.SpacingBefore = 5f;


                PdfPCell hdCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentName + " : ", fontBoldText));
                hdCell1.Border = 0;
                tblHeader.AddCell(hdCell1);

                PdfPCell hdCell2 = new PdfPCell(new Phrase(resident.LastName + ", " + resident.FirstName, fontBoldText));
                hdCell2.Border = 0;
                hdCell2.PaddingLeft = -100;
                hdCell2.HorizontalAlignment = Element.ALIGN_LEFT;
                tblHeader.AddCell(hdCell2);

                PdfPCell hdCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suite + " # : " + resident.SuiteNo, fontBoldText));
                hdCell3.Border = 0;
                hdCell3.Colspan = 2;
                hdCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(hdCell3);

                assessmentValue = Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_id"]);
                PdfPCell cellAssDate;
                if (assessmentValue != 0)
                {
                    assessmentDate = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_date"]);
                }

                cellAssDate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + " : ", fontBoldText));
                cellAssDate.Border = 0;
                cellAssDate.Colspan = 3;
                cellAssDate.PaddingRight = -12;
                cellAssDate.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(cellAssDate);

                cellAssDate = new PdfPCell(new Phrase(assessmentDate, fontBoldText));
                cellAssDate.Border = 0;
                cellAssDate.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(cellAssDate);

                if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
                {
                    doc.Add(tblHeader);
                    float[] wthAssessed = new float[] { 8f, 1f };


                    PdfPCell spaceCell1 = new PdfPCell(new Phrase(""));
                    spaceCell1.Colspan = 2;
                    spaceCell1.FixedHeight = 8;
                    spaceCell1.Border = 0;

                    PdfPCell BlaContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Continent, tableFont));
                    PdfPCell BlaOCCInContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OCCInContinent, tableFont));
                    PdfPCell BlaInContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InContinent, tableFont));
                    PdfPCell Independent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    PdfPCell Supervised = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervised, tableFont));
                    PdfPCell HomeAMCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Home, tableFont));
                    PdfPCell AgencyAMCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
                    PdfPCell Assisted = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assisted, tableFont));

                    PdfPCell OSats = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sats, tableFont));
                    PdfPCell ForeWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ForeWheel, tableFont));
                    PdfPCell NA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    PdfPCell TwoWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TwoWheel, tableFont));
                    PdfPCell NoWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NoWheel, tableFont));
                    PdfPCell Yes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                    PdfPCell No = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                    PdfPCell NutIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    PdfPCell Elimination = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Elimination, fontHDBoldText));
                    PdfPCell DependentCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                    PdfPCell AM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AM, tableFont));
                    PdfPCell PM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PM, tableFont));
                    PdfPCell AMPM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BothAmPm, tableFont));

                    PdfPCell dependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                    PdfPCell na = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    Elimination.Colspan = 2;
                    Elimination.BackgroundColor = BaseColor.LIGHT_GRAY;
                    PdfPCell txtBlaComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtBlaComments.Colspan = 2;

                    PdfPTable tblAssessed = new PdfPTable(2);
                    tblAssessed.WidthPercentage = 100f;
                    tblAssessed.SetWidths(wthAssessed);

                    PdfPCell Assessed = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssessmentType, fontBoldTextSubtitle));
                    Assessed.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Assessed.HorizontalAlignment = Element.ALIGN_CENTER;
                    Assessed.Colspan = 2;
                    tblAssessed.AddCell(Assessed);
                    PdfPCell NA1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    tblAssessed.AddCell(NA1);
                    PdfPCell NAOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "5AS") != "")
                    {
                        NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "5AS"), fontBoldTextOP));
                    }
                    tblAssessed.AddCell(NAOP);
                    PdfPCell CUpdate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Update, tableFont));
                    tblAssessed.AddCell(CUpdate);

                    PdfPCell CUpdateOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "2AU") != "")
                    {
                        CUpdateOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "2AU"), fontBoldTextOP));
                    }
                    tblAssessed.AddCell(CUpdateOP);

                    PdfPCell SemiAnnualAssessment = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SemiAnnualAssessment, tableFont));
                    tblAssessed.AddCell(SemiAnnualAssessment);
                    PdfPCell SemiAnnualAssessmentOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "6AN") != "")
                    {
                        SemiAnnualAssessmentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "6AN"), fontBoldTextOP));
                    }
                    tblAssessed.AddCell(SemiAnnualAssessmentOP);
                    AssessmentTable.AddCell(tblAssessed);

                    PdfPTable tblBP = new PdfPTable(2);
                    tblBP.WidthPercentage = 100f;
                    tblBP.SetWidths(wthAssessed);

                    PdfPCell ModifyBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.VitalSign, fontBoldTextSubtitle));
                    ModifyBP.HorizontalAlignment = Element.ALIGN_CENTER;
                    ModifyBP.Colspan = 2;
                    ModifyBP.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblBP.AddCell(ModifyBP);

                    PdfPCell ModifyBP1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BP + ": ", fontBoldText));
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_value"].ToString()))
                    {
                        ModifyBP1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BP + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_value"].ToString(), tableFont));
                    }
                    ModifyBP1.HorizontalAlignment = Element.ALIGN_LEFT;
                    ModifyBP1.Colspan = 2;
                    tblBP.AddCell(ModifyBP1);

                    PdfPCell ModifyPulse1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pulse, fontBoldText));
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString()))
                    {
                        ModifyPulse1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pulse + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString(), tableFont));
                    }
                    ModifyPulse1.HorizontalAlignment = Element.ALIGN_LEFT;
                    ModifyPulse1.Colspan = 2;
                    tblBP.AddCell(ModifyPulse1);

                    PdfPCell ModifyWeight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Weight + ": ", fontBoldText));
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString()) && Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_measurement"].ToString()) > 0)
                    {
                        ModifyWeight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Weight + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString(), tableFont));
                    }
                    ModifyWeight.HorizontalAlignment = Element.ALIGN_LEFT;
                    ModifyWeight.Colspan = 2;
                    tblBP.AddCell(ModifyWeight);

                    PdfPCell ModifyHeight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Height + ": ", fontBoldText));
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString()))
                    {
                        ModifyHeight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Height + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString(), tableFont));
                    }
                    ModifyHeight.HorizontalAlignment = Element.ALIGN_LEFT;
                    ModifyHeight.Colspan = 2;
                    tblBP.AddCell(ModifyHeight);
                    AssessmentTable.AddCell(tblBP);

                    PdfPTable tblAllergy = new PdfPTable(1);
                    tblAllergy.WidthPercentage = 100f;
                    tblAllergy.SetWidths(new float[] { 1f });

                    PdfPCell Allergies = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Allergies, fontBoldTextSubtitle));
                    Allergies.HorizontalAlignment = Element.ALIGN_CENTER;
                    Allergies.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblAllergy.AddCell(Allergies);
                    PdfPCell allEmpty = new PdfPCell();
                    allEmpty.MinimumHeight = 50f;
                    tblAllergy.AddCell(allEmpty);

                    AssessmentTable.AddCell(tblAllergy);

                    PdfPTable AMCare = new PdfPTable(2);
                    AMCare.WidthPercentage = 100f;
                    AMCare.SetWidths(wthAssessed);

                    PdfPCell PersonalHygine = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PersonalHygiene, fontHDBoldText));
                    PersonalHygine.HorizontalAlignment = Element.ALIGN_CENTER;
                    PersonalHygine.Colspan = 3;
                    PersonalHygine.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(PersonalHygine);

                    PdfPCell amCareCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AMcare, fontBoldTextSubtitle));
                    amCareCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    amCareCell.Colspan = 2;
                    amCareCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    amCareCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AMCare.AddCell(amCareCell);

                    string AMCareSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "")
                    {
                        AMCareSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "")
                    {
                        if (AMCareSelected != "")
                        {
                            AMCareSelected += ", ";
                        }
                        AMCareSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA") != "")
                    {
                        if (AMCareSelected != "")
                        {
                            AMCareSelected += ", ";
                        }
                        AMCareSelected += Resources.Qola.UIverbiage.Assisted;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7AD") != "")
                    {
                        if (AMCareSelected != "")
                        {
                            AMCareSelected += ", ";
                        }
                        AMCareSelected += Resources.Qola.UIverbiage.Dependent;
                    }

                    var pharse1 = new Phrase();
                    pharse1.Add(new Chunk(Resources.Qola.UIverbiage.AMcare + ": ", fontBoldText));
                    pharse1.Add(new Chunk(AMCareSelected, tableFont));
                    PdfPCell amCare = new PdfPCell(new Phrase(pharse1));
                    amCare.Colspan = 2;
                    AMCare.AddCell(amCare);

                    string amCareAssistedBy = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "")
                    {
                        amCareAssistedBy = Resources.Qola.UIverbiage.Home;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "")
                    {
                        amCareAssistedBy = Resources.Qola.UIverbiage.Agency;
                    }
                    string agencyName = string.Empty;
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_AM_agency_name"].ToString()))
                    {
                        agencyName = dsAssessmentDetails.Tables[0].Rows[0]["fd_AM_agency_name"].ToString();
                    }

                    var pharse2 = new Phrase();
                    pharse2.Add(new Chunk(Resources.Qola.UIverbiage.Assistedby + ": ", fontBoldText));
                    pharse2.Add(new Chunk(amCareAssistedBy, tableFont));
                    PdfPCell amCareAssistedByCell = new PdfPCell(new Phrase(pharse2));
                    amCareAssistedByCell.Colspan = 2;
                    AMCare.AddCell(amCareAssistedByCell);

                    var pharse3 = new Phrase();
                    pharse3.Add(new Chunk(Resources.Qola.UIverbiage.Agencyname + ": ", fontBoldText));
                    pharse3.Add(new Chunk(agencyName, tableFont));
                    PdfPCell amCareAgemcy = new PdfPCell(new Phrase(pharse3));
                    amCareAgemcy.Colspan = 2;
                    AMCare.AddCell(amCareAgemcy);

                    string preferredTime = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP") != "")
                    {
                        preferredTime = Resources.Qola.UIverbiage.AllMorningHours;
                    }

                    var pharse4 = new Phrase();
                    pharse4.Add(new Chunk(Resources.Qola.UIverbiage.PreferredTime + ": ", fontBoldText));
                    pharse4.Add(new Chunk(preferredTime, tableFont));
                    PdfPCell amCarePreferredTime = new PdfPCell(new Phrase(pharse4));
                    amCarePreferredTime.Colspan = 2;
                    AMCare.AddCell(amCarePreferredTime);

                    AssessmentTable.AddCell(AMCare);

                    PdfPTable PMCare = new PdfPTable(2);
                    PMCare.WidthPercentage = 100f;
                    PMCare.SetWidths(wthAssessed);

                    PdfPCell PMCareCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PMCare, fontBoldTextSubtitle));
                    PMCareCell.Colspan = 2;
                    PMCareCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    PMCareCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    PMCare.AddCell(PMCareCell);

                    string pMCareSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8PI") != "")
                    {
                        pMCareSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9PS") != "")
                    {
                        if (AMCareSelected != "")
                        {
                            pMCareSelected += ", ";
                        }
                        pMCareSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10PA") != "")
                    {
                        if (pMCareSelected != "")
                        {
                            pMCareSelected += ", ";
                        }
                        pMCareSelected += Resources.Qola.UIverbiage.Assisted;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11PD") != "")
                    {
                        if (pMCareSelected != "")
                        {
                            pMCareSelected += ", ";
                        }
                        AMCareSelected += Resources.Qola.UIverbiage.Dependent;
                    }
                    var pharse5 = new Phrase();
                    pharse5.Add(new Chunk(Resources.Qola.UIverbiage.PMCare + ": ", fontBoldText));
                    pharse5.Add(new Chunk(pMCareSelected, tableFont));
                    PdfPCell pmCare = new PdfPCell(new Phrase(pharse5));
                    pmCare.Colspan = 2;
                    PMCare.AddCell(pmCare);

                    string pmCareAssistedBy = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "28PH") != "")
                    {
                        pmCareAssistedBy = Resources.Qola.UIverbiage.Home;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "29PA") != "")
                    {
                        pmCareAssistedBy = Resources.Qola.UIverbiage.Agency;
                    }
                    string PmagencyName = string.Empty;
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_PM_agency_name"].ToString()))
                    {
                        PmagencyName = dsAssessmentDetails.Tables[0].Rows[0]["fd_PM_agency_name"].ToString();
                    }

                    var pharse6 = new Phrase();
                    pharse6.Add(new Chunk(Resources.Qola.UIverbiage.Assistedby + ": ", fontBoldText));
                    pharse6.Add(new Chunk(pmCareAssistedBy, tableFont));
                    PdfPCell pmCareAssistedByCell = new PdfPCell(new Phrase(pharse6));

                    pmCareAssistedByCell.Colspan = 2;
                    PMCare.AddCell(pmCareAssistedByCell);

                    var pharse7 = new Phrase();
                    pharse7.Add(new Chunk(Resources.Qola.UIverbiage.Agencyname + ": ", fontBoldText));
                    pharse7.Add(new Chunk(PmagencyName, tableFont));
                    PdfPCell pmCareAgemcy = new PdfPCell(new Phrase(pharse7));

                    pmCareAgemcy.Colspan = 2;
                    PMCare.AddCell(pmCareAgemcy);

                    string PMpreferredTime = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "33PP") != "")
                    {
                        PMpreferredTime = Resources.Qola.UIverbiage.AllEveningHours;
                    }

                    var pharse8 = new Phrase();
                    pharse8.Add(new Chunk(Resources.Qola.UIverbiage.PreferredTime + ": ", fontBoldText));
                    pharse8.Add(new Chunk(PMpreferredTime, tableFont));
                    PdfPCell pmCarePreferredTime = new PdfPCell(new Phrase(pharse8));

                    pmCarePreferredTime.Colspan = 2;
                    PMCare.AddCell(pmCarePreferredTime);

                    AssessmentTable.AddCell(PMCare);

                    PdfPTable tblBathing = new PdfPTable(2);
                    tblBathing.WidthPercentage = 100f;
                    tblBathing.SetWidths(wthAssessed);

                    PdfPCell BathingCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bathing, fontBoldTextSubtitle));
                    BathingCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    BathingCell.Colspan = 2;
                    BathingCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblBathing.AddCell(BathingCell);

                    string BathingCareSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "30BN") != "")
                    {
                        if (BathingCareSelected != "")
                        {
                            BathingCareSelected += ", ";
                        }
                        BathingCareSelected += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4BI") != "")
                    {
                        if (BathingCareSelected != "")
                        {
                            BathingCareSelected += ", ";
                        }
                        BathingCareSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5BS") != "")
                    {
                        if (BathingCareSelected != "")
                        {
                            BathingCareSelected += ", ";
                        }
                        BathingCareSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6BA") != "")
                    {
                        if (BathingCareSelected != "")
                        {
                            BathingCareSelected += ", ";
                        }
                        BathingCareSelected += Resources.Qola.UIverbiage.Assisted;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "31BD") != "")
                    {
                        if (BathingCareSelected != "")
                        {
                            BathingCareSelected += ", ";
                        }
                        BathingCareSelected += Resources.Qola.UIverbiage.Dependent;
                    }

                    var pharse9 = new Phrase();
                    pharse9.Add(new Chunk(Resources.Qola.UIverbiage.Bathing + ": ", fontBoldText));
                    pharse9.Add(new Chunk(BathingCareSelected, tableFont));
                    PdfPCell bathing = new PdfPCell(new Phrase(pharse9));

                    bathing.Colspan = 2;
                    tblBathing.AddCell(bathing);

                    string bathingAssistedBy = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH") != "")
                    {
                        bathingAssistedBy = Resources.Qola.UIverbiage.Home;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "56BA") != "")
                    {
                        bathingAssistedBy = Resources.Qola.UIverbiage.Agency;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH56BA") != "")
                    {
                        bathingAssistedBy = "Both";
                    }
                    string BathingAgencyName = string.Empty;
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bathing_agency_name"].ToString()))
                    {
                        BathingAgencyName = dsAssessmentDetails.Tables[0].Rows[0]["fd_bathing_agency_name"].ToString();
                    }
                    var pharse10 = new Phrase();
                    pharse10.Add(new Chunk(Resources.Qola.UIverbiage.Assistedby + ": ", fontBoldText));
                    pharse10.Add(new Chunk(bathingAssistedBy, tableFont));
                    PdfPCell bathingAssistedByCell = new PdfPCell(new Phrase(pharse10));

                    bathingAssistedByCell.Colspan = 2;
                    tblBathing.AddCell(bathingAssistedByCell);

                    var pharse11 = new Phrase();
                    pharse11.Add(new Chunk(Resources.Qola.UIverbiage.Agencyname + ": ", fontBoldText));
                    pharse11.Add(new Chunk(BathingAgencyName, tableFont));
                    PdfPCell batingAgemcy = new PdfPCell(new Phrase(pharse11));

                    batingAgemcy.Colspan = 2;
                    tblBathing.AddCell(batingAgemcy);

                    string bathingPreferredTime = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "34BB") != "")
                    {
                        bathingPreferredTime = Resources.Qola.UIverbiage.AllMorningHours;
                    }
                    var pharse12 = new Phrase();
                    pharse12.Add(new Chunk(Resources.Qola.UIverbiage.PreferredTime + ": ", fontBoldText));
                    pharse12.Add(new Chunk(bathingPreferredTime, tableFont));
                    PdfPCell bathingPreferredTimeCell = new PdfPCell(new Phrase(pharse12));

                    bathingPreferredTimeCell.Colspan = 2;
                    tblBathing.AddCell(bathingPreferredTimeCell);

                    string bathingDay = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "62PA") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "63PE") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.EveryDay;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "44PS") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Sunday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "45PM") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Monday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "46PT") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Tuesday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "47PW") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Wednesday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "48PH") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Thursday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "49PF") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Friday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "50PA") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Saturday;
                    }
                    var pharse13 = new Phrase();
                    pharse13.Add(new Chunk(Resources.Qola.UIverbiage.PreferredDay + ": ", fontBoldText));
                    pharse13.Add(new Chunk(bathingDay, tableFont));
                    PdfPCell PreferredDay = new PdfPCell(new Phrase(pharse13));

                    PreferredDay.Colspan = 2;
                    tblBathing.AddCell(PreferredDay);

                    string preferedTYpe = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12PB") != "")
                    {
                        if (preferedTYpe != "")
                        {
                            preferedTYpe += ", ";
                        }
                        preferedTYpe += Resources.Qola.UIverbiage.Bath;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24PS") != "")
                    {
                        if (preferedTYpe != "")
                        {
                            preferedTYpe += ", ";
                        }
                        preferedTYpe += Resources.Qola.UIverbiage.Shower;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "35PP") != "")
                    {
                        if (preferedTYpe != "")
                        {
                            preferedTYpe += ", ";
                        }
                        preferedTYpe += Resources.Qola.UIverbiage.Saturday;
                    }
                    PdfPCell PreferredType = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sponge + ": " + preferedTYpe, tableFont));
                    PreferredDay.Colspan = 2;
                    tblBathing.AddCell(PreferredType);

                    AssessmentTable.AddCell(tblBathing);


                    PdfPCell assistanceWith = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWith, fontHDBoldText));
                    assistanceWith.HorizontalAlignment = Element.ALIGN_CENTER;
                    assistanceWith.Colspan = 3;
                    assistanceWith.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(assistanceWith);

                    PdfPTable tblDressing = new PdfPTable(1);
                    tblDressing.WidthPercentage = 100f;
                    tblDressing.SetWidths(new float[] { 1f });



                    string dressingType = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15DA") != "")
                    {
                        dressingType += Resources.Qola.UIverbiage.AM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "16DP") != "")
                    {
                        if (dressingType != "")
                        {
                            dressingType += ", ";
                        }
                        dressingType += Resources.Qola.UIverbiage.PM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "17DB") != "")
                    {
                        if (dressingType != "")
                        {
                            dressingType += ", ";
                        }
                        dressingType += Resources.Qola.UIverbiage.BothAmPm;
                    }

                    var pharse14 = new Phrase();
                    pharse14.Add(new Chunk(Resources.Qola.UIverbiage.Dressing + ": ", fontBoldText));
                    pharse14.Add(new Chunk(dressingType, tableFont));
                    PdfPCell dressing = new PdfPCell(new Phrase(pharse14));

                    tblDressing.AddCell(dressing);

                    string dressingSelectedValue = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13DN") != "")
                    {
                        dressingSelectedValue = Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7DI") != "")
                    {
                        dressingSelectedValue = Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8DS") != "")
                    {
                        dressingSelectedValue = Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9DA") != "")
                    {
                        dressingSelectedValue = Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14DD") != "")
                    {
                        dressingSelectedValue = Resources.Qola.UIverbiage.Dependent;
                    }

                    PdfPCell dressingValue = new PdfPCell(new Phrase(dressingSelectedValue, tableFont));
                    tblDressing.AddCell(dressingValue);

                    string oralHygieneType = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "18OA") != "")
                    {
                        oralHygieneType += Resources.Qola.UIverbiage.AM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "19OP") != "")
                    {
                        if (oralHygieneType != "")
                        {
                            oralHygieneType += ", ";
                        }
                        oralHygieneType += Resources.Qola.UIverbiage.PM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "20OB") != "")
                    {
                        if (oralHygieneType != "")
                        {
                            oralHygieneType += ", ";
                        }
                        oralHygieneType += Resources.Qola.UIverbiage.BothAmPm;
                    }
                    var pharse15 = new Phrase();
                    pharse15.Add(new Chunk(Resources.Qola.UIverbiage.OralHygiene + ": ", fontBoldText));
                    pharse15.Add(new Chunk(oralHygieneType, tableFont));
                    PdfPCell oralHygiene = new PdfPCell(new Phrase(pharse15));

                    tblDressing.AddCell(oralHygiene);

                    string oralHygieneSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "21ON") != "")
                    {
                        oralHygieneSelected += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13OI") != "")
                    {
                        if (oralHygieneSelected != "")
                        {
                            oralHygieneSelected += ", ";
                        }
                        oralHygieneSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14OS") != "")
                    {
                        if (oralHygieneSelected != "")
                        {
                            oralHygieneSelected += ", ";
                        }
                        oralHygieneSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15OA") != "")
                    {
                        if (oralHygieneSelected != "")
                        {
                            oralHygieneSelected += ", ";
                        }
                        oralHygieneSelected += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "22OD") != "")
                    {
                        if (oralHygieneSelected != "")
                        {
                            oralHygieneSelected += ", ";
                        }
                        oralHygieneSelected += Resources.Qola.UIverbiage.Dependent;
                    }
                    PdfPCell oralHygieneCell = new PdfPCell(new Phrase(oralHygieneSelected.ToString(), tableFont));
                    oralHygieneCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblDressing.AddCell(oralHygieneCell);

                    string shavingType = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "23SA") != "")
                    {
                        shavingType += Resources.Qola.UIverbiage.AM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24SP") != "")
                    {
                        if (oralHygieneType != "")
                        {
                            shavingType += ", ";
                        }
                        oralHygieneType += Resources.Qola.UIverbiage.PM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "25SB") != "")
                    {
                        if (shavingType != "")
                        {
                            shavingType += ", ";
                        }
                        shavingType += Resources.Qola.UIverbiage.BothAmPm;
                    }
                    var pharse16 = new Phrase();
                    pharse16.Add(new Chunk(Resources.Qola.UIverbiage.Shaving + ": ", fontBoldText));
                    pharse16.Add(new Chunk(shavingType, tableFont));
                    PdfPCell shaving = new PdfPCell(new Phrase(pharse16));

                    tblDressing.AddCell(shaving);

                    string shavingSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "26SN") != "")
                    {
                        shavingSelected += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10SI") != "")
                    {
                        if (shavingSelected != "")
                        {
                            shavingSelected += ", ";
                        }
                        shavingSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11SS") != "")
                    {
                        if (shavingSelected != "")
                        {
                            shavingSelected += ", ";
                        }
                        shavingSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12SA") != "")
                    {
                        if (shavingSelected != "")
                        {
                            shavingSelected += ", ";
                        }
                        shavingSelected += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "27SD") != "")
                    {
                        if (shavingSelected != "")
                        {
                            shavingSelected += ", ";
                        }
                        shavingSelected += Resources.Qola.UIverbiage.Dependent;
                    }
                    PdfPCell shavingCell = new PdfPCell(new Phrase(shavingSelected.ToString(), tableFont));
                    shavingCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblDressing.AddCell(shavingCell);

                    PdfPCell assistanceCell = new PdfPCell(tblDressing);
                    assistanceCell.Colspan = 3;
                    AssessmentTable.AddCell(assistanceCell);


                    PdfPCell mobility = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mobility, fontHDBoldText));
                    mobility.HorizontalAlignment = Element.ALIGN_CENTER;
                    mobility.Colspan = 3;
                    mobility.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(mobility);

                    PdfPTable tblMobility = new PdfPTable(3);
                    tblMobility.WidthPercentage = 100f;
                    tblMobility.SetWidths(new float[] { 1f, 1f, 1f });
                    string mobilitySelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "27MN") != "")
                    {
                        mobilitySelected += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MI") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MS") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MA") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MD") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Dependent;
                    }
                    PdfPCell mobilityCell = new PdfPCell(new Phrase(mobilitySelected.ToString(), tableFont));
                    mobilityCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    mobilityCell.Colspan = 3;
                    tblMobility.AddCell(mobilityCell);

                    PdfPCell transfer = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Transfers, fontBoldTextSubtitle));
                    transfer.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    transfer.HorizontalAlignment = Element.ALIGN_LEFT;
                    transfer.Colspan = 2;
                    tblMobility.AddCell(transfer);

                    PdfPCell mechancialLift = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MechanicalLift, tableFont));
                    mechancialLift.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblMobility.AddCell(mechancialLift);

                    string transferSeleected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "28MN") != "")
                    {
                        transferSeleected += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "29TD") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "14TS") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "15TA") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "16T1") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Person1;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "17T2") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Person2;
                    }

                    PdfPCell transferedCell = new PdfPCell(new Phrase(transferSeleected.ToString(), tableFont));
                    transferedCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    transferedCell.Colspan = 2;
                    tblMobility.AddCell(transferedCell);
                    transferSeleected = "";

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "30MN") != "")
                    {
                        transferSeleected = Resources.Qola.UIverbiage.NA;
                    }
                    PdfPCell MechanicLiftCell = new PdfPCell(new Phrase(transferSeleected.ToString(), tableFont));
                    MechanicLiftCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblMobility.AddCell(MechanicLiftCell);

                    PdfPCell Walker = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Walker, fontBoldTextSubtitle));
                    Walker.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Walker.HorizontalAlignment = Element.ALIGN_LEFT;
                    Walker.Colspan = 3;
                    tblMobility.AddCell(Walker);

                    string walker = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "31WN") != "")
                    {
                        walker = Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "1WI") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "2WS") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "3WA") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.Assisted;
                    }
                    PdfPCell walkerCell = new PdfPCell(new Phrase(walker, tableFont));
                    walkerCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    walkerCell.Colspan = 3;
                    tblMobility.AddCell(walkerCell);

                    walker = "";
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString()))
                    {
                        walker = dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString() != "undefined" ? dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString() : "";
                    }
                    var pharse23 = new Phrase();
                    pharse23.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));
                    pharse23.Add(new Chunk(walker, tableFont));
                    PdfPCell walkerType = new PdfPCell(new Phrase(pharse23));
                    walkerType.HorizontalAlignment = Element.ALIGN_LEFT;
                    walkerType.Colspan = 3;
                    tblMobility.AddCell(walkerType);

                    PdfPCell WheelChair = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wheelchair, fontBoldTextSubtitle));
                    WheelChair.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    WheelChair.HorizontalAlignment = Element.ALIGN_LEFT;
                    WheelChair.Colspan = 3;
                    tblMobility.AddCell(WheelChair);

                    string wheel = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "32WCN") != "")
                    {
                        wheel = Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "5HS") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "6HA") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Assisted;
                    }
                    PdfPCell wheelchairCell = new PdfPCell(new Phrase(wheel, tableFont));
                    wheelchairCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    wheelchairCell.Colspan = 3;
                    tblMobility.AddCell(wheelchairCell);

                    wheel = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "25HT") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Manual;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Electric;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Transport;
                    }
                    var pharse17 = new Phrase();
                    pharse17.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));
                    pharse17.Add(new Chunk(wheel, tableFont));
                    PdfPCell wheelChairType = new PdfPCell(new Phrase(pharse17));

                    wheelChairType.HorizontalAlignment = Element.ALIGN_LEFT;
                    wheelChairType.Colspan = 3;
                    tblMobility.AddCell(wheelChairType);

                    PdfPCell Cane = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cane, fontBoldTextSubtitle));
                    Cane.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Cane.HorizontalAlignment = Element.ALIGN_LEFT;
                    Cane.Colspan = 3;
                    tblMobility.AddCell(Cane);

                    string cane = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "33CN") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "8CS") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.Supervised;
                    }
                    PdfPCell caneType = new PdfPCell(new Phrase(cane, tableFont));
                    caneType.HorizontalAlignment = Element.ALIGN_LEFT;
                    caneType.Colspan = 3;
                    tblMobility.AddCell(caneType);

                    cane = "";
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString()))
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane = dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString();
                    }

                    var pharse21 = new Phrase();
                    pharse21.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));
                    pharse21.Add(new Chunk(cane, tableFont));
                    PdfPCell caneCell = new PdfPCell(new Phrase(pharse21));

                    caneCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    caneCell.Colspan = 3;
                    tblMobility.AddCell(caneCell);

                    PdfPCell Scooter = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Scooter, fontBoldTextSubtitle));
                    Scooter.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Scooter.HorizontalAlignment = Element.ALIGN_LEFT;
                    Scooter.Colspan = 3;
                    tblMobility.AddCell(Scooter);
                    string scooter = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "34SN") != "")
                    {
                        scooter = Resources.Qola.UIverbiage.NA;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "10SI") != "")
                    {
                        if (scooter != "")
                        {
                            scooter += ", ";
                        }
                        scooter = Resources.Qola.UIverbiage.Independent;
                    }
                    PdfPCell scooterSelected = new PdfPCell(new Phrase(scooter, tableFont));
                    scooterSelected.HorizontalAlignment = Element.ALIGN_LEFT;
                    scooterSelected.Colspan = 3;
                    tblMobility.AddCell(scooterSelected);

                    scooter = "";
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString()))
                    {
                        scooter = dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString();
                    }

                    var pharse18 = new Phrase();
                    pharse18.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));
                    pharse18.Add(new Chunk(scooter, tableFont));
                    PdfPCell scooterValue = new PdfPCell(new Phrase(pharse18));

                    scooterValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    scooterValue.Colspan = 3;
                    tblMobility.AddCell(scooterValue);

                    PdfPCell mobiityCell = new PdfPCell(tblMobility);
                    mobiityCell.Colspan = 3;
                    AssessmentTable.AddCell(mobiityCell);

                    PdfPTable tblOTPT = new PdfPTable(2);
                    tblOTPT.WidthPercentage = 100f;
                    tblOTPT.SetWidths(new float[] { 1f, 1f });
                    string ptValue = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "10PY") != "")
                    {
                        ptValue = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "11PN") != "")
                    {
                        ptValue = Resources.Qola.UIverbiage.No;
                    }
                    var pharse19 = new Phrase();
                    pharse19.Add(new Chunk(Resources.Qola.UIverbiage.PT + ": ", fontBoldText));
                    pharse19.Add(new Chunk(ptValue, tableFont));
                    PdfPCell PT = new PdfPCell(new Phrase(pharse19));

                    tblOTPT.AddCell(PT);

                    string getfreq = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PT_frequency"]);
                    var pharse20 = new Phrase();
                    pharse20.Add(new Chunk(Resources.Qola.UIverbiage.Frequency + ": ", fontBoldText));
                    pharse20.Add(new Chunk(getfreq, tableFont));
                    PdfPCell PTFrequency = new PdfPCell(new Phrase(pharse20));

                    tblOTPT.AddCell(PTFrequency);

                    string otValue = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "12OY") != "")
                    {
                        otValue = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "13ON") != "")
                    {
                        otValue = Resources.Qola.UIverbiage.No;
                    }

                    var pharse221 = new Phrase();
                    pharse221.Add(new Chunk(Resources.Qola.UIverbiage.OT + ": ", fontBoldText));
                    pharse221.Add(new Chunk(otValue, tableFont));
                    PdfPCell OT = new PdfPCell(new Phrase(pharse221));

                    tblOTPT.AddCell(OT);

                    string getfreq1 = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_frequency"]);
                    var pharse22 = new Phrase();
                    pharse22.Add(new Chunk(Resources.Qola.UIverbiage.Frequency + ": ", fontBoldText));
                    pharse22.Add(new Chunk(getfreq1, tableFont));
                    PdfPCell OTFrequency = new PdfPCell(new Phrase(pharse22));

                    tblOTPT.AddCell(OTFrequency);

                    PdfPCell ptptCell = new PdfPCell(tblOTPT);
                    ptptCell.Colspan = 3;
                    AssessmentTable.AddCell(ptptCell);

                    PdfPCell SafetyPasd = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SafetyPads, fontHDBoldText));
                    SafetyPasd.Colspan = 3;
                    SafetyPasd.HorizontalAlignment = Element.ALIGN_CENTER;
                    SafetyPasd.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(SafetyPasd);
                    string safety = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "1SS") != "")
                    {
                        safety = Resources.Qola.UIverbiage.SeatLapbelt;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "7SM") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.Mattressonfloor;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "8ST") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.TransferPole;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "9SB") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.TableTray;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "10SE") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.Recliner;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "11SW") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.Tiltwc;
                    }
                    PdfPCell SafetyPasdCell = new PdfPCell(new Phrase(safety, tableFont));
                    SafetyPasdCell.Colspan = 3;
                    AssessmentTable.AddCell(SafetyPasdCell);

                    safety = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "18SN") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "3SA") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.RailsRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "4SI") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.RailsLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "5SL") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.RailsFull;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "6SN") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.RailsNight;
                    }

                    PdfPCell SafetyPasdRailCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Rails + ": " + safety, tableFont));
                    SafetyPasdRailCell.Colspan = 3;
                    AssessmentTable.AddCell(SafetyPasdRailCell);

                    PdfPCell Escorting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EscortingToAndFromMeals, fontBoldText));
                    Escorting.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Escorting.HorizontalAlignment = Element.ALIGN_CENTER;
                    PdfPTable tblEscorting = new PdfPTable(4);
                    tblEscorting.WidthPercentage = 100f;
                    tblEscorting.SetWidths(new float[] { 1f, 1f, 1f, 1f });

                    tblEscorting.AddCell(Escorting);
                    string breakFast = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "19BY") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "20BN") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell BreakFast = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Breakfast + ": " + breakFast, tableFont));
                    tblEscorting.AddCell(BreakFast);

                    breakFast = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "21LY") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "22LN") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell Lunch = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Lunch + ": " + breakFast, tableFont));
                    tblEscorting.AddCell(Lunch);

                    breakFast = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "23DY") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "24DN") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell Dinner = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dinner + ": " + breakFast, tableFont));
                    tblEscorting.AddCell(Dinner);

                    PdfPCell meals = new PdfPCell(tblEscorting);
                    meals.Colspan = 3;
                    AssessmentTable.AddCell(meals);

                    PdfPCell Behaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Behaviour, fontHDBoldText));
                    Behaviour.Colspan = 2;
                    Behaviour.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(Behaviour);

                    PdfPCell Cognitive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cognitivefunction, fontHDBoldText));
                    Cognitive.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(Cognitive);

                    PdfPTable tblBehaviour = new PdfPTable(2);
                    tblBehaviour.WidthPercentage = 100f;
                    tblBehaviour.SetWidths(wthAssessed);

                    PdfPCell BehConcerns = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NOConcerns, tableFont));
                    tblBehaviour.AddCell(BehConcerns);
                    PdfPCell BehConcernsOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "1BN") != "")
                    {
                        BehConcernsOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "1BN"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(BehConcernsOP);

                    PdfPCell PotentialForInjury = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PotentialForInjuryToSelf, tableFont));
                    tblBehaviour.AddCell(PotentialForInjury);
                    PdfPCell PotentialForInjuryValue = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP") != "")
                    {
                        PotentialForInjuryValue = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(PotentialForInjuryValue);

                    PdfPCell PotentialInjuryToOthers = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PotentialForInjuryToOthers, tableFont));
                    tblBehaviour.AddCell(PotentialInjuryToOthers);
                    PdfPCell PotentialInjuryToOthersValue = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "27BP") != "")
                    {
                        PotentialInjuryToOthersValue = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "27BP"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(PotentialInjuryToOthersValue);

                    PdfPCell BehCooperative = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cooperative, tableFont));
                    tblBehaviour.AddCell(BehCooperative);
                    PdfPCell BehCooperativeOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "2BC") != "")
                    {
                        BehCooperativeOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "2BC"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(BehCooperativeOP);

                    PdfPCell BehWanders = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wanders, tableFont));
                    tblBehaviour.AddCell(BehWanders);
                    PdfPCell BehWandersOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") != "")
                    {
                        BehWandersOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(BehWandersOP);

                    PdfPCell BehAgitated = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agitated, tableFont));
                    tblBehaviour.AddCell(BehAgitated);
                    PdfPCell BehAgitatedOP = new PdfPCell();

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "4BA") != "")
                    {
                        BehAgitatedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "4BA"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(BehAgitatedOP);

                    PdfPCell BehAggressive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Aggressive, tableFont));
                    tblBehaviour.AddCell(BehAggressive);
                    PdfPCell BehAggressiveOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "15BG") != "")
                    {
                        BehAggressiveOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "15BG"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(BehAggressiveOP);

                    PdfPCell BehDepression = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Depression, tableFont));
                    tblBehaviour.AddCell(BehDepression);
                    PdfPCell BehDepressionOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "5BD") != "")
                    {
                        BehDepressionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "5BD"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(BehDepressionOP);
                    PdfPCell BehDemanding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Demanding, tableFont));
                    tblBehaviour.AddCell(BehDemanding);
                    PdfPCell BehDemandingOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "6BE") != "")
                    {
                        BehDemandingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "6BE"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(BehDemandingOP);

                    PdfPCell BehDisruptive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Disruptive, tableFont));
                    tblBehaviour.AddCell(BehDisruptive);
                    PdfPCell BehDisruptiveOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "7BI") != "")
                    {
                        BehDisruptiveOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "7BI"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(BehDisruptiveOP);

                    PdfPCell BehHoarding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Hoarding, tableFont));
                    tblBehaviour.AddCell(BehHoarding);
                    PdfPCell BehHoardingOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "8BH") != "")
                    {
                        BehHoardingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "8BH"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(BehHoardingOP);

                    PdfPCell sad = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sad, tableFont));
                    tblBehaviour.AddCell(sad);
                    PdfPCell sadOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "23BW") != "")
                    {
                        sadOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "23BW"), fontBoldTextOP));
                    }
                    tblBehaviour.AddCell(sadOP);
                    PdfPCell behaviourCell = new PdfPCell(tblBehaviour);
                    behaviourCell.Colspan = 2;

                    AssessmentTable.AddCell(behaviourCell);

                    PdfPTable tblBehaviour1 = new PdfPTable(2);
                    tblBehaviour1.WidthPercentage = 100f;
                    tblBehaviour1.SetWidths(wthAssessed);

                    PdfPCell BehIneffectiveCoping = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IneffectiveCoping, tableFont));
                    tblBehaviour1.AddCell(BehIneffectiveCoping);
                    PdfPCell BehIneffectiveCopingOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "9BN") != "")
                    {
                        BehIneffectiveCopingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "9BN"), fontBoldTextOP));
                    }
                    tblBehaviour1.AddCell(BehIneffectiveCopingOP);

                    PdfPCell BehResistsTreatmentorRefusesCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResistsTreatment, tableFont));
                    tblBehaviour1.AddCell(BehResistsTreatmentorRefusesCare);
                    PdfPCell BehResistsTreatmentorRefusesCareOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "11BR") != "")
                    {
                        BehResistsTreatmentorRefusesCareOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "11BR"), fontBoldTextOP));

                    }
                    tblBehaviour1.AddCell(BehResistsTreatmentorRefusesCareOP);

                    PdfPCell BehSuspicious = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suspicious, tableFont));
                    tblBehaviour1.AddCell(BehSuspicious);
                    PdfPCell BehSuspiciousOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "17BS") != "")
                    {
                        BehSuspiciousOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "17BS"), fontBoldTextOP));
                    }
                    tblBehaviour1.AddCell(BehSuspiciousOP);

                    PdfPCell BehIngestForeignItems = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IngestsForeignItems, tableFont));
                    tblBehaviour1.AddCell(BehIngestForeignItems);
                    PdfPCell BehIngestForeignItemsOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "18BT") != "")
                    {
                        BehIngestForeignItemsOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "18BT"), fontBoldTextOP));
                    }
                    tblBehaviour1.AddCell(BehIngestForeignItemsOP);

                    PdfPCell BehInappropriateSexualBehaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InappropriateSexualBehaviour, tableFont));
                    tblBehaviour1.AddCell(BehInappropriateSexualBehaviour);
                    PdfPCell BehInappropriateSexualBehaviourOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "19BP") != "")
                    {
                        BehInappropriateSexualBehaviourOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "19BP"), fontBoldTextOP));
                    }
                    tblBehaviour1.AddCell(BehInappropriateSexualBehaviourOP);

                    PdfPCell BehInappropriateSmoking = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InappropriateSmoking, tableFont));
                    tblBehaviour1.AddCell(BehInappropriateSmoking);
                    PdfPCell BehInappropriateSmokingOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "20BO") != "")
                    {
                        BehInappropriateSmokingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "20BO"), fontBoldTextOP));
                    }
                    tblBehaviour1.AddCell(BehInappropriateSmokingOP);

                    PdfPCell BehSubstanceAbuse = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SubstanceAbuse, tableFont));
                    tblBehaviour1.AddCell(BehSubstanceAbuse);
                    PdfPCell BehSubstanceAbuseOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "21BB") != "")
                    {
                        BehSubstanceAbuseOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "21BB"), fontBoldTextOP));
                    }
                    tblBehaviour1.AddCell(BehSubstanceAbuseOP);

                    PdfPCell BehAlcoholAbuse = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AlcoholAbuse, tableFont));
                    tblBehaviour1.AddCell(BehAlcoholAbuse);
                    PdfPCell BehAlcoholAbuseOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "28BA") != "")
                    {
                        BehAlcoholAbuseOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "28BA"), fontBoldTextOP));
                    }
                    tblBehaviour1.AddCell(BehAlcoholAbuseOP);

                    PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SeeksAttention, tableFont));
                    tblBehaviour1.AddCell(BehSeeksAttention);
                    PdfPCell BehSeeksAttentionOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "24BK") != "")
                    {
                        BehSeeksAttentionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "24BK"), fontBoldTextOP));
                    }
                    tblBehaviour1.AddCell(BehSeeksAttentionOP);

                    PdfPCell BehAnxiousBehaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AnxiousBehaviour, tableFont));
                    tblBehaviour1.AddCell(BehAnxiousBehaviour);
                    PdfPCell BehAnxiousBehaviourOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "26BX") != "")
                    {
                        BehAnxiousBehaviourOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "26BX"), fontBoldTextOP));
                    }
                    tblBehaviour1.AddCell(BehAnxiousBehaviourOP);

                    PdfPCell BehWithdrawn = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Withdrawn, tableFont));
                    tblBehaviour1.AddCell(BehWithdrawn);
                    PdfPCell BehWithdrawnOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP") != "")
                    {
                        BehWithdrawnOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP"), fontBoldTextOP));

                    }
                    tblBehaviour1.AddCell(BehWithdrawnOP);
                    AssessmentTable.AddCell(tblBehaviour1);

                    PdfPTable tblCognitivefunction = new PdfPTable(2);
                    tblCognitivefunction.WidthPercentage = 100f;
                    tblCognitivefunction.SetWidths(wthAssessed);

                    tblCognitivefunction.AddCell(spaceCell1);

                    PdfPCell Cognitivefunction = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cognitivefunction, fontHDBoldText));
                    Cognitivefunction.BackgroundColor = BaseColor.LIGHT_GRAY;
                    tblCognitivefunction.AddCell(Cognitivefunction);

                    PdfPCell Cognitivefunction1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cognitivefunction, fontBoldTextSubtitle));
                    Cognitivefunction1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Cognitivefunction1.HorizontalAlignment = Element.ALIGN_CENTER;
                    Cognitivefunction1.Colspan = 2;

                    tblCognitivefunction.AddCell(Cognitivefunction1);
                    PdfPCell CogUnimpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unimpaired, tableFont));
                    tblCognitivefunction.AddCell(CogUnimpaired);

                    PdfPCell CogUnimpairedOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "1CU") != "")
                    {
                        CogUnimpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "1CU"), fontBoldTextOP));
                    }
                    tblCognitivefunction.AddCell(CogUnimpairedOP);

                    PdfPCell CogForgetful = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Forgetful, tableFont));
                    tblCognitivefunction.AddCell(CogForgetful);
                    PdfPCell CogForgetfulOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "2CF") != "")
                    {
                        CogForgetfulOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "2CF"), fontBoldTextOP));
                    }
                    tblCognitivefunction.AddCell(CogForgetfulOP);

                    PdfPCell CogJudgementPoor = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Judgementpoor, tableFont));
                    tblCognitivefunction.AddCell(CogJudgementPoor);
                    PdfPCell CogJudgementPoorOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "3CJ") != "")
                    {
                        CogJudgementPoorOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "3CJ"), fontBoldTextOP));
                    }
                    tblCognitivefunction.AddCell(CogJudgementPoorOP);

                    PdfPCell CogConfused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Confused, tableFont));
                    tblCognitivefunction.AddCell(CogConfused);
                    PdfPCell CogConfusedOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "4CC") != "")
                    {
                        CogConfusedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "4CC"), fontBoldTextOP));
                    }
                    tblCognitivefunction.AddCell(CogConfusedOP);

                    PdfPCell CogShorttermloss = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Shorttermloss, tableFont));
                    tblCognitivefunction.AddCell(CogShorttermloss);
                    PdfPCell CogShorttermlossOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "5CS") != "")
                    {
                        CogShorttermlossOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "5CS"), fontBoldTextOP));
                    }
                    tblCognitivefunction.AddCell(CogShorttermlossOP);
                    PdfPCell CogSignificantImpairment = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Significantimpairment, tableFont));
                    tblCognitivefunction.AddCell(CogSignificantImpairment);
                    PdfPCell CogSignificantImpairmentOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "6CI") != "")
                    {
                        CogSignificantImpairmentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "6CI"), fontBoldTextOP));
                    }
                    tblCognitivefunction.AddCell(CogSignificantImpairmentOP);

                    PdfPCell emptycell1 = new PdfPCell();
                    emptycell1.Colspan = 2;
                    tblCognitivefunction.AddCell(emptycell1);
                    tblCognitivefunction.AddCell(emptycell1);

                    PdfPCell MemoryandOrientation = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Orientation, fontHDBoldText));
                    MemoryandOrientation.Colspan = 2;
                    MemoryandOrientation.BackgroundColor = BaseColor.LIGHT_GRAY;
                    tblCognitivefunction.AddCell(MemoryandOrientation);

                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Person, tableFont));
                    tblCognitivefunction.AddCell(OriPerson);
                    PdfPCell OriPersonOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP") != "")
                    {
                        OriPersonOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP"), fontBoldTextOP));
                    }
                    tblCognitivefunction.AddCell(OriPersonOP);

                    PdfPCell OriPlace = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Place, tableFont));
                    tblCognitivefunction.AddCell(OriPlace);
                    PdfPCell OriPlaceOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL") != "")
                    {
                        OriPlaceOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL"), fontBoldTextOP));
                    }
                    tblCognitivefunction.AddCell(OriPlaceOP);
                    PdfPCell OriTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Time, tableFont));
                    tblCognitivefunction.AddCell(OriTime);
                    PdfPCell OriTimeOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT") != "")
                    {
                        OriTimeOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT"), fontBoldTextOP));
                    }
                    tblCognitivefunction.AddCell(OriTimeOP);
                    AssessmentTable.AddCell(tblCognitivefunction);

                    PdfPCell NutritionCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Nutrition, fontHDBoldText));
                    NutritionCell.Colspan = 3;
                    NutritionCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    NutritionCell.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(NutritionCell);

                    PdfPTable tblNutrition = new PdfPTable(1);
                    tblNutrition.WidthPercentage = 100f;
                    tblNutrition.SetWidths(new float[] { 1f });

                    PdfPCell Stautus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Status, fontBoldTextSubtitle));
                    Stautus.HorizontalAlignment = Element.ALIGN_CENTER;
                    Stautus.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(Stautus);

                    string nutrition = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "10SI") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "11SS") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "12SA") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "13SD") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Dependent;
                    }
                    PdfPCell StautusCell = new PdfPCell(new Phrase(nutrition, tableFont));
                    tblNutrition.AddCell(StautusCell);
                    nutrition = "";
                    PdfPCell RiskCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Risk, fontBoldTextSubtitle));
                    RiskCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    RiskCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(RiskCell);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "3NS") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Swallowing;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "4NH") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Chokingrisk;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "2NC") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.DifficultyChewing;
                    }
                    PdfPCell riskValue = new PdfPCell(new Phrase(nutrition, tableFont));
                    tblNutrition.AddCell(riskValue);
                    var phrase13 = new Phrase();
                    phrase13.Add(new Chunk(Resources.Qola.UIverbiage.AssistiveDevices + ": ", fontBoldText));
                    phrase13.Add(new Chunk(dsAssessmentDetails.Tables[0].Rows[0]["fd_risk_assistive_device"].ToString() + ": ", fontBoldText));
                    PdfPCell riskAssistive = new PdfPCell(new Phrase(phrase13));
                    tblNutrition.AddCell(riskAssistive);

                    nutrition = "";
                    PdfPCell RiskTexture = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Texture, fontBoldTextSubtitle));
                    RiskTexture.HorizontalAlignment = Element.ALIGN_CENTER;
                    RiskTexture.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(RiskTexture);
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "14TN") != "")
                    {
                        nutrition = Resources.Qola.UIverbiage.NA;
                    }
                    PdfPCell RiskTextureValue = new PdfPCell(new Phrase(nutrition, tableFont));
                    tblNutrition.AddCell(RiskTextureValue);

                    AssessmentTable.AddCell(tblNutrition);
                    tblNutrition = new PdfPTable(1);
                    tblNutrition.WidthPercentage = 100f;
                    tblNutrition.SetWidths(new float[] { 1f });

                    PdfPCell diet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Diet, fontBoldTextSubtitle));
                    diet.HorizontalAlignment = Element.ALIGN_CENTER;
                    diet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(diet);

                    PdfPCell dietValue = new PdfPCell(new Phrase(PrintDiet(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet"].ToString()), tableFont));
                    tblNutrition.AddCell(dietValue);
                    AssessmentTable.AddCell(tblNutrition);
                    tblNutrition = new PdfPTable(1);
                    tblNutrition.WidthPercentage = 100f;
                    tblNutrition.SetWidths(new float[] { 1f });

                    PdfPCell allergies = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AllergiesSensitivities, fontBoldTextSubtitle));
                    allergies.HorizontalAlignment = Element.ALIGN_CENTER;
                    allergies.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(allergies);
                    PdfPCell allergiesValue = new PdfPCell(new Phrase(PrintDietAllergies(resident.ID), tableFont));
                    tblNutrition.AddCell(allergiesValue);

                    PdfPCell appietite = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Appetite, fontBoldTextSubtitle));
                    appietite.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    appietite.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblNutrition.AddCell(appietite);

                    nutrition = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "1AG") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Good;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "2AF") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Fair;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "3AP") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Poor;
                    }
                    PdfPCell appietiteValue = new PdfPCell(new Phrase(nutrition, tableFont));
                    tblNutrition.AddCell(appietiteValue);

                    AssessmentTable.AddCell(tblNutrition);
                    PdfPCell Meals = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Meals, fontBoldTextSubtitle));
                    Meals.HorizontalAlignment = Element.ALIGN_LEFT;
                    Meals.Colspan = 3;
                    Meals.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AssessmentTable.AddCell(Meals);

                    PdfPTable tblMeals = new PdfPTable(1);
                    tblDressing.WidthPercentage = 100f;
                    tblDressing.SetWidths(new float[] { 1f });

                    string mealSelectedValue = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "13BN") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "14BM") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.MainDiningRoom;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "15BO") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.Onunit;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "16BT") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.TrayService;
                    }

                    var pharse461 = new Phrase();
                    pharse461.Add(new Chunk(Resources.Qola.UIverbiage.Breakfast + ": ", fontBoldText));
                    pharse461.Add(new Chunk(mealSelectedValue, tableFont));
                    PdfPCell mealsValue = new PdfPCell(new Phrase(pharse461));

                    tblMeals.AddCell(mealsValue);
                    mealSelectedValue = "";

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "17LN") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "18LM") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.MainDiningRoom;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "19LO") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.Onunit;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "20LT") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.TrayService;
                    }
                    var pharse47 = new Phrase();
                    pharse47.Add(new Chunk(Resources.Qola.UIverbiage.Lunch + ": ", fontBoldText));
                    pharse47.Add(new Chunk(mealSelectedValue, tableFont));
                    PdfPCell lunchValue = new PdfPCell(new Phrase(pharse47));

                    tblMeals.AddCell(lunchValue);
                    mealSelectedValue = "";

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "21DN") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "22DM") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.MainDiningRoom;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "23DO") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.Onunit;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "24DT") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.TrayService;
                    }

                    var pharse48 = new Phrase();
                    pharse48.Add(new Chunk(Resources.Qola.UIverbiage.Dinner + ": ", fontBoldText));
                    pharse48.Add(new Chunk(mealSelectedValue, tableFont));
                    PdfPCell dinnerValue = new PdfPCell(new Phrase(pharse48));

                    tblMeals.AddCell(dinnerValue);
                    PdfPCell mealsCell = new PdfPCell(tblMeals);
                    mealsCell.Colspan = 3;
                    AssessmentTable.AddCell(mealsCell);

                    PdfPCell EliminationCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Elimination, fontBoldHeadText));
                    EliminationCell.Colspan = 3;
                    EliminationCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    EliminationCell.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(EliminationCell);

                    PdfPTable tblElimination = new PdfPTable(2);
                    tblElimination.WidthPercentage = 100f;
                    tblElimination.SetWidths(wthAssessed);
                    PdfPCell bladder = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bladder, fontBoldTextSubtitle));
                    bladder.HorizontalAlignment = Element.ALIGN_CENTER;
                    bladder.Colspan = 2;
                    bladder.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblElimination.AddCell(bladder);
                    string elimination = string.Empty;


                    tblElimination.AddCell(BlaContinent);
                    PdfPCell BlaContinentOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC") != "")
                    {
                        BlaContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC"), fontBoldTextOP));
                    }
                    tblElimination.AddCell(BlaContinentOP);

                    tblElimination.AddCell(BlaInContinent);
                    PdfPCell BlaInContinentOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI") != "")
                    {
                        BlaInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI"), fontBoldTextOP));
                    }
                    tblElimination.AddCell(BlaInContinentOP);

                    tblElimination.AddCell(BlaOCCInContinent);
                    PdfPCell BlaOCCInContinentOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO") != "")
                    {
                        BlaOCCInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO"), fontBoldTextOP));
                    }
                    tblElimination.AddCell(BlaOCCInContinentOP);

                    PdfPCell BlaCatheter = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Catheter, tableFont));
                    tblElimination.AddCell(BlaCatheter);
                    PdfPCell BlaCatheterOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA") != "")
                    {
                        BlaCatheterOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA"), fontBoldTextOP));
                    }
                    tblElimination.AddCell(BlaCatheterOP);
                    AssessmentTable.AddCell(tblElimination);
                    tblElimination = new PdfPTable(2);
                    tblElimination.WidthPercentage = 100f;
                    tblElimination.SetWidths(wthAssessed);

                    PdfPCell bowel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bowel, fontBoldTextSubtitle));
                    bowel.Colspan = 2;
                    bowel.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblElimination.AddCell(bowel);

                    tblElimination.AddCell(BlaContinent);
                    PdfPCell BowContinentOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bowel"].ToString(), "1BC") != "")
                    {
                        BowContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC"), fontBoldTextOP));
                    }
                    tblElimination.AddCell(BowContinentOP);

                    tblElimination.AddCell(BlaInContinent);
                    PdfPCell BowInContinentOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2BI") != "")
                    {
                        BowInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2BI"), fontBoldTextOP));
                    }
                    tblElimination.AddCell(BowInContinentOP);

                    tblElimination.AddCell(BlaOCCInContinent);
                    PdfPCell BowOCCInContinentOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BN") != "")
                    {
                        BowOCCInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BN"), fontBoldTextOP));
                    }
                    tblElimination.AddCell(BowOCCInContinentOP);

                    PdfPCell Ostomy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Ostomy, tableFont));
                    tblElimination.AddCell(Ostomy);
                    PdfPCell OstomyOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3BO") != "")
                    {
                        OstomyOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3BO"), fontBoldTextOP));
                    }
                    tblElimination.AddCell(OstomyOP);
                    AssessmentTable.AddCell(tblElimination);

                    tblElimination = new PdfPTable(2);
                    tblElimination.WidthPercentage = 100f;
                    tblElimination.SetWidths(wthAssessed);

                    PdfPCell ContinenceProducts = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ContinenceProducts, fontBoldTextSubtitle));
                    ContinenceProducts.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    ContinenceProducts.Colspan = 2;
                    tblElimination.AddCell(ContinenceProducts);

                    var getvalue = dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_Name"].ToString();
                    var pharse24 = new Phrase();
                    pharse24.Add(new Chunk(Resources.Qola.UIverbiage.Code + ": ", fontBoldText));
                    pharse24.Add(new Chunk(getvalue, tableFont));
                    PdfPCell nameCode = new PdfPCell(new Phrase(pharse24));
                    nameCode.Colspan = 2;
                    tblElimination.AddCell(nameCode);
                    string continenceSelectedValues = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "16BS") != "")
                    {
                        continenceSelectedValues = Resources.Qola.UIverbiage.SSmall;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "17BM") != "")
                    {
                        if (continenceSelectedValues != "")
                        {
                            continenceSelectedValues += ", ";
                        }
                        continenceSelectedValues += Resources.Qola.UIverbiage.MMedium;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "18BL") != "")
                    {
                        if (continenceSelectedValues != "")
                        {
                            continenceSelectedValues += ", ";
                        }
                        continenceSelectedValues += Resources.Qola.UIverbiage.LLarge;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "19BX") != "")
                    {
                        if (continenceSelectedValues != "")
                        {
                            continenceSelectedValues += ", ";
                        }
                        continenceSelectedValues += Resources.Qola.UIverbiage.XLExtraLarge;
                    }

                    var phrase11 = new Phrase();
                    phrase11.Add(new Chunk(Resources.Qola.UIverbiage.ContinenceProducts + ": ", fontBoldText));
                    phrase11.Add(new Chunk(continenceSelectedValues, fontBoldText));
                    PdfPCell continenceSelected = new PdfPCell(new Phrase(phrase11));

                    continenceSelected.Colspan = 2;
                    tblElimination.AddCell(continenceSelected);

                    var phrase12 = new Phrase();
                    phrase12.Add(new Chunk(Resources.Qola.UIverbiage.ContinenceProducts + ": ", fontBoldText));
                    phrase12.Add(new Chunk(continenceSelectedValues, fontBoldText));
                    PdfPCell continenceSupplier = new PdfPCell(new Phrase(phrase12));

                    continenceSupplier.Colspan = 2;
                    tblElimination.AddCell(continenceSupplier);

                    AssessmentTable.AddCell(tblElimination);

                    string newt1 = dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_completed_by"].ToString();
                    var pharse51 = new Phrase();
                    pharse51.Add(new Chunk(Resources.Qola.UIverbiage.AssessmentCompletedBy + ": ", fontBoldText));
                    pharse51.Add(new Chunk(newt1, tableFont));
                    PdfPCell Completedby = new PdfPCell(new Phrase(pharse51));
                    Completedby.Colspan = 2;
                    AssessmentTable.AddCell(Completedby);

                    PdfPCell CompletedDate = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_date"].ToString(), tableFont));
                    AssessmentTable.AddCell(CompletedDate);

                    PdfPCell Toileting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Toileting, fontHDBoldText));
                    Toileting.BackgroundColor = BaseColor.LIGHT_GRAY;
                    Toileting.HorizontalAlignment = Element.ALIGN_CENTER;
                    Toileting.Colspan = 3;
                    AssessmentTable.AddCell(Toileting);
                    string toileting = string.Empty;

                    PdfPTable tbltoilet = new PdfPTable(1);
                    tbltoilet.WidthPercentage = 100f;
                    tbltoilet.SetWidths(new float[] { 1f });

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "1TI") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "3TN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "2TA") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.Assistance;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "4T1") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.OnePersonAssist;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "5T2") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.TwoPersonAssist;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "6TT") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.ToiletRoutine;
                    }
                    PdfPCell toiletCell = new PdfPCell(new Phrase(toileting, tableFont));
                    tbltoilet.AddCell(toiletCell);
                    AssessmentTable.AddCell(tbltoilet);

                    tbltoilet = new PdfPTable(1);
                    tbltoilet.WidthPercentage = 100f;
                    tbltoilet.SetWidths(new float[] { 1f });

                    tbltoilet.AddCell(new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bathroom, tableFont)));
                    tbltoilet.AddCell(new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Commode, tableFont)));
                    tbltoilet.AddCell(new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BedpanUrinal, tableFont)));
                    AssessmentTable.AddCell(tbltoilet);

                    tbltoilet = new PdfPTable(1);
                    tbltoilet.WidthPercentage = 100f;
                    tbltoilet.SetWidths(new float[] { 1f });
                    toileting = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "7BD") != "")
                    {
                        toileting += Resources.Qola.UIverbiage.D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "8BE") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.E;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "9BN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.N;
                    }
                    PdfPCell bathRoom = new PdfPCell(new Phrase(toileting, tableFont));
                    tbltoilet.AddCell(bathRoom);

                    toileting = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "10CD") != "")
                    {
                        toileting += Resources.Qola.UIverbiage.D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "11CE") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.E;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "12CN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.N;
                    }
                    PdfPCell commode = new PdfPCell(new Phrase(toileting, tableFont));
                    tbltoilet.AddCell(commode);

                    toileting = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "13UD") != "")
                    {
                        toileting += Resources.Qola.UIverbiage.D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "14UE") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.E;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "15UN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.N;
                    }
                    PdfPCell bedPan = new PdfPCell(new Phrase(toileting, tableFont));
                    tbltoilet.AddCell(bedPan);

                    PdfPCell toiletCellTable = new PdfPCell(tbltoilet);
                    toiletCellTable.Colspan = 3;
                    AssessmentTable.AddCell(toiletCellTable);

                    PdfPTable tblMedication = new PdfPTable(1);
                    tblMedication.WidthPercentage = 100f;
                    tblMedication.SetWidths(new float[] { 1f });

                    PdfPCell medication = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Medication1, fontHDBoldText));
                    medication.BackgroundColor = BaseColor.LIGHT_GRAY;
                    medication.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblMedication.AddCell(medication);

                    string Assistance = String.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "9AA") != "")
                    {
                        if (Assistance != "")
                        {
                            Assistance += ", ";
                        }
                        Assistance = Resources.Qola.UIverbiage.AB;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "10AS") != "")
                    {
                        if (Assistance != "")
                        {
                            Assistance += ", ";
                        }
                        Assistance = Resources.Qola.UIverbiage.SK;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "11AM") != "")
                    {
                        if (Assistance != "")
                        {
                            Assistance += ", ";
                        }
                        Assistance = Resources.Qola.UIverbiage.MB;
                    }

                    string Administration = String.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "12AO") != "")
                    {
                        if (Administration != "")
                        {
                            Administration += ", ";
                        }
                        Administration = Resources.Qola.UIverbiage.AdministrationON;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "13AQ") != "")
                    {
                        if (Administration != "")
                        {
                            Administration += ", ";
                        }
                        Administration = Resources.Qola.UIverbiage.QC;
                    }

                    string medicationSelected = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "6MN") != "")
                    {
                        if (medicationSelected != "")
                        {
                            medicationSelected += ", ";
                        }
                        medicationSelected += Resources.Qola.UIverbiage.NA;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "1MS") != "")
                    {
                        if (medicationSelected != "")
                        {
                            medicationSelected += ", ";
                        }
                        medicationSelected += Resources.Qola.UIverbiage.Self;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "2ML") != "")
                    {
                        if (medicationSelected != "")
                        {
                            medicationSelected += ", ";
                        }
                        medicationSelected += Resources.Qola.UIverbiage.Home;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "3MA") != "")
                    {
                        if (medicationSelected != "")
                        {
                            medicationSelected += ", ";
                        }
                        medicationSelected += Resources.Qola.UIverbiage.Agency;
                    }
                    var pharse46 = new Phrase();
                    pharse46.Add(new Chunk(Resources.Qola.UIverbiage.Medication + ": ", fontBoldText));

                    pharse46.Add(new Chunk(medicationSelected, tableFont));
                    PdfPCell medicationAdminCell = new PdfPCell(new Phrase(pharse46));

                    tblMedication.AddCell(medicationAdminCell);
                    medicationSelected = "";

                    var pharse45 = new Phrase();
                    string new3 = dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_Pharmacy"].ToString();
                    pharse45.Add(new Chunk(Resources.Qola.UIverbiage.Pharmacyprovider + ": ", fontBoldText));
                    pharse45.Add(new Chunk(new3, tableFont));
                    PdfPCell txtMedPharmacyprovider = new PdfPCell(new Phrase(pharse45));

                    tblMedication.AddCell(txtMedPharmacyprovider);

                    PdfPCell medicationCell = new PdfPCell(tblMedication);
                    medicationCell.Colspan = 3;
                    AssessmentTable.AddCell(medicationCell);


                    PdfPCell sensory = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SensoryAbilities, fontHDBoldText));
                    sensory.BackgroundColor = BaseColor.LIGHT_GRAY;
                    sensory.HorizontalAlignment = Element.ALIGN_CENTER;
                    sensory.Colspan = 3;
                    AssessmentTable.AddCell(sensory);
                    string sensorySelectedValues = string.Empty;

                    PdfPTable tblSensor = new PdfPTable(1);
                    tblSensor.WidthPercentage = 100f;
                    tblSensor.SetWidths(new float[] { 1f });

                    PdfPCell vision = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Vision, fontBoldTextSubtitle));
                    vision.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSensor.AddCell(vision);

                    string sensorSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "12VU") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Unimpaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "2VI") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Impaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "8VIL") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "9VIR") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "3VB") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Blind;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "6VL") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.BlindLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "7VR") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.BlindRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "4VG") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Glasses;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "5VC") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ContactLens;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "10VA") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ToiletRoutine;
                    }
                    PdfPCell visionCell = new PdfPCell(new Phrase(sensorSelected, tableFont));
                    tblSensor.AddCell(visionCell);

                    AssessmentTable.AddCell(tblSensor);

                    tblSensor = new PdfPTable(1);
                    tblSensor.WidthPercentage = 100f;
                    tblSensor.SetWidths(new float[] { 1f });

                    PdfPCell hear = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Hearing, fontBoldTextSubtitle));
                    hear.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSensor.AddCell(hear);

                    sensorSelected = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "14HU") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Unimpaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "2HI") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Impaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "9HM") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "10HP") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "3HD") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Deaf;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "11HE") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.DeafLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "12HA") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.DeafRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "15HH") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.HearingAid;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "4HL") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.HearingAidLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "5HR") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.HearingAidRight;
                    }
                    PdfPCell hearingCell = new PdfPCell(new Phrase(sensorSelected, tableFont));
                    tblSensor.AddCell(hearingCell);

                    AssessmentTable.AddCell(tblSensor);
                    AssessmentTable.AddCell(new PdfPCell());

                    PdfPCell communication = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Communication + "/" + Resources.Qola.UIverbiage.Speech, fontHDBoldText));
                    communication.Colspan = 3;
                    communication.HorizontalAlignment = Element.ALIGN_CENTER;
                    communication.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(communication);

                    PdfPTable tblCommunication = new PdfPTable(2);
                    tblCommunication.WidthPercentage = 100f;
                    tblCommunication.SetWidths(wthAssessed);

                    tblCommunication.AddCell(new Phrase(Resources.Qola.UIverbiage.Unimpaired, tableFont));

                    PdfPCell UnimpairedOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "10SU") != "")
                    {
                        UnimpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "10SU"), fontBoldTextOP));
                    }
                    tblCommunication.AddCell(UnimpairedOP);

                    PdfPCell ImpairedAbility = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ImpairedAbilityToCommunicateAndUnderstand, tableFont));
                    tblCommunication.AddCell(ImpairedAbility);
                    PdfPCell ImpairedAbilityOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL") != "")
                    {
                        ImpairedAbilityOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL"), fontBoldTextOP));
                    }
                    tblCommunication.AddCell(ImpairedAbilityOP);

                    PdfPCell Difficultyincommunicating = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficultyincommunicating, tableFont));
                    tblCommunication.AddCell(Difficultyincommunicating);
                    PdfPCell DifficultyincommunicatingOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD") != "")
                    {
                        DifficultyincommunicatingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD"), fontBoldTextOP));
                    }
                    tblCommunication.AddCell(DifficultyincommunicatingOP);

                    PdfPCell Difficultyinunderstanding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficultyinunderstanding, tableFont));
                    tblCommunication.AddCell(Difficultyinunderstanding);

                    PdfPCell DifficultyinunderstandingOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI") != "")
                    {
                        DifficultyinunderstandingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI"), fontBoldTextOP));
                    }
                    tblCommunication.AddCell(DifficultyinunderstandingOP);

                    AssessmentTable.AddCell(tblCommunication);

                    tblCommunication = new PdfPTable(2);
                    tblCommunication.WidthPercentage = 100f;
                    tblCommunication.SetWidths(wthAssessed);

                    PdfPCell SpeUnderstandsInstruction = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Languagebarrier, tableFont));
                    tblCommunication.AddCell(SpeUnderstandsInstruction);
                    PdfPCell SpeUnderstandsInstructionOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU") != "")
                    {
                        SpeUnderstandsInstructionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU"), fontBoldTextOP));
                    }
                    tblCommunication.AddCell(SpeUnderstandsInstructionOP);

                    PdfPCell SpeSpeechUnimpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.UnderstandsInstruction, tableFont));
                    tblCommunication.AddCell(SpeSpeechUnimpaired);
                    PdfPCell SpeSpeechUnimpairedOP = new PdfPCell();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS") != "")
                    {
                        SpeSpeechUnimpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS"), fontBoldTextOP));
                    }
                    tblCommunication.AddCell(SpeSpeechUnimpairedOP);

                    string txtSpeCommentcy = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication_comments"].ToString());
                    var pharse40 = new Phrase();
                    pharse40.Add(new Chunk(Resources.Qola.UIverbiage.Notes + ": ", fontBoldText));
                    pharse40.Add(new Chunk(txtSpeCommentcy, tableFont));
                    PdfPCell txtSpeCommentsOP = new PdfPCell(new Phrase(pharse40));

                    txtSpeCommentsOP.Colspan = 2;
                    tblCommunication.AddCell(txtSpeCommentsOP);

                    AssessmentTable.AddCell(tblCommunication);

                    tblCommunication = new PdfPTable(2);
                    tblCommunication.WidthPercentage = 100f;
                    tblCommunication.SetWidths(wthAssessed);

                    PdfPCell txtLanguageSpoken = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Language, tableFont));
                    txtLanguageSpoken.Colspan = 2;
                    tblCommunication.AddCell(txtLanguageSpoken);
                    PdfPCell txtLanguageSpokenOP = new PdfPCell();
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString()))
                    {
                        txtLanguageSpokenOP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Spoken + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString(), tableFont));
                        txtLanguageSpokenOP.Colspan = 2;
                        txtLanguageSpokenOP.FixedHeight = 15;
                    }
                    tblCommunication.AddCell(txtLanguageSpokenOP);
                    AssessmentTable.AddCell(tblCommunication);

                    PdfPTable tblWoundCare = new PdfPTable(1);
                    tblWoundCare.SetWidths(new float[] { 1f });
                    tblWoundCare.WidthPercentage = 100f;

                    PdfPCell woundCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Woundcare, fontHDBoldText));
                    woundCare.BackgroundColor = BaseColor.LIGHT_GRAY;
                    woundCare.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblWoundCare.AddCell(woundCare);
                    string woundCareSelecetd = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "Y") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "N") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.No;
                    }

                    var pharse41 = new Phrase();
                    pharse41.Add(new Chunk(Resources.Qola.UIverbiage.Woundcare + ": ", fontBoldText));
                    pharse41.Add(new Chunk(woundCareSelecetd, tableFont));
                    PdfPCell woundCareCell = new PdfPCell(new Phrase(pharse41));

                    tblWoundCare.AddCell(woundCareCell);

                    woundCareSelecetd = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "1WH") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Home;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "2WA") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Agency;
                    }
                    var pharse38 = new Phrase();
                    pharse38.Add(new Chunk(Resources.Qola.UIverbiage.Assistedby + ": ", fontBoldText));
                    pharse38.Add(new Chunk(woundCareSelecetd, tableFont));
                    PdfPCell woundCareAssisstedBy = new PdfPCell(new Phrase(pharse38));

                    tblWoundCare.AddCell(woundCareAssisstedBy);

                    string getwondercareagency = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_agency"].ToString());
                    var pharse39 = new Phrase();
                    pharse39.Add(new Chunk(Resources.Qola.UIverbiage.Agencyname + ": ", fontBoldText));
                    pharse39.Add(new Chunk(getwondercareagency, tableFont));
                    PdfPCell woundCareAgency = new PdfPCell(new Phrase(pharse39));

                    tblWoundCare.AddCell(woundCareAssisstedBy);

                    woundCareSelecetd = "";
                    PdfPCell skinCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SkinCare, fontHDBoldText));
                    skinCare.BackgroundColor = BaseColor.LIGHT_GRAY;
                    skinCare.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblWoundCare.AddCell(skinCare);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "67SN") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "68SY") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.No;
                    }
                    var pharse37 = new Phrase();
                    pharse37.Add(new Chunk(Resources.Qola.UIverbiage.SkinCare + ": ", fontBoldText));
                    pharse37.Add(new Chunk(woundCareSelecetd, tableFont));
                    PdfPCell skinCareCell = new PdfPCell(new Phrase(pharse37));

                    tblWoundCare.AddCell(skinCareCell);

                    string new1 = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_skincare_treatment"].ToString());
                    var pharse42 = new Phrase();
                    pharse42.Add(new Chunk(Resources.Qola.UIverbiage.SpecialTreatements + ": ", fontBoldText));
                    pharse42.Add(new Chunk(new1, tableFont));
                    PdfPCell skinCareTreatmentCell = new PdfPCell(new Phrase(pharse42));

                    tblWoundCare.AddCell(skinCareTreatmentCell);

                    PdfPCell woundCareTableCell = new PdfPCell(tblWoundCare);
                    woundCareTableCell.Colspan = 3;
                    AssessmentTable.AddCell(woundCareTableCell);

                    PdfPCell specialNeeds = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialNeeds, fontHDBoldText));
                    specialNeeds.Colspan = 3;
                    specialNeeds.HorizontalAlignment = Element.ALIGN_CENTER;
                    specialNeeds.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(specialNeeds);

                    PdfPTable tblSpecialNeeds = new PdfPTable(1);
                    tblSpecialNeeds.WidthPercentage = 100f;
                    tblSpecialNeeds.SetWidths(new float[] { 1f });
                    PdfPCell oxygen = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.O2Oxygen, fontBoldTextSubtitle));
                    tblSpecialNeeds.AddCell(oxygen);

                    string speaiclNeedSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7ON") != "")
                    {
                        speaiclNeedSelected = Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "1OI") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "2OS") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "3OA") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9OD") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Dependent;
                    }

                    var pharse28 = new Phrase();
                    pharse28.Add(new Chunk(Resources.Qola.UIverbiage.O2Oxygen + ": ", fontBoldTextSubtitle));
                    pharse28.Add(new Chunk(speaiclNeedSelected, tableFont));
                    PdfPCell oxySelect = new PdfPCell(new Phrase(pharse28));
                    tblSpecialNeeds.AddCell(oxySelect);



                    speaiclNeedSelected = "";
                    speaiclNeedSelected = Resources.Qola.UIverbiage.Supplier + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_supplier"].ToString();
                    speaiclNeedSelected += "\t" + Resources.Qola.UIverbiage.Rate + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_rate"].ToString();

                    PdfPCell oxySupplier = new PdfPCell(new Phrase(speaiclNeedSelected, tableFont));
                    tblSpecialNeeds.AddCell(oxySupplier);
                    AssessmentTable.AddCell(tblSpecialNeeds);

                    tblSpecialNeeds = new PdfPTable(1);
                    tblSpecialNeeds.WidthPercentage = 100f;
                    tblSpecialNeeds.SetWidths(new float[] { 1f });
                    PdfPCell cpap = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CPAP, fontBoldTextSubtitle));
                    tblSpecialNeeds.AddCell(cpap);
                    speaiclNeedSelected = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9CN") != "")
                    {
                        speaiclNeedSelected = Resources.Qola.UIverbiage.NA;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "4CI") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "5CS") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "6CA") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7CD") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Dependent;
                    }
                    var pharse35 = new Phrase();
                    pharse35.Add(new Chunk(Resources.Qola.UIverbiage.CPAP + ": ", fontBoldText));
                    pharse35.Add(new Chunk(speaiclNeedSelected, tableFont));
                    PdfPCell cpapSelect = new PdfPCell(new Phrase(pharse35));

                    tblSpecialNeeds.AddCell(cpapSelect);

                    string gettxtspneed = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_other"].ToString());
                    var pharse36 = new Phrase();
                    pharse36.Add(new Chunk(Resources.Qola.UIverbiage.Supplier + ": ", fontBoldText));
                    pharse36.Add(new Chunk(gettxtspneed, tableFont));
                    PdfPCell txtSPNeedOtherOP = new PdfPCell(new Phrase(pharse36));

                    tblSpecialNeeds.AddCell(txtSPNeedOtherOP);

                    AssessmentTable.AddCell(tblSpecialNeeds);
                    tblSpecialNeeds = new PdfPTable(1);
                    tblSpecialNeeds.WidthPercentage = 100f;
                    tblSpecialNeeds.SetWidths(new float[] { 1f });

                    PdfPCell specislNeedOther = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Others, tableFont));
                    tblSpecialNeeds.AddCell(specislNeedOther);

                    AssessmentTable.AddCell(tblSpecialNeeds);

                    PdfPCell specialEquipement = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialEquipments, fontBoldTextSubtitle));
                    specialEquipement.Colspan = 3;
                    AssessmentTable.AddCell(specialEquipement);
                    PdfPCell specialEquipementEmpty = new PdfPCell();
                    specialEquipementEmpty.MinimumHeight = 50f;
                    specialEquipementEmpty.Colspan = 3;
                    AssessmentTable.AddCell(specialEquipementEmpty);

                    PdfPTable tblFamily = new PdfPTable(1);
                    tblFamily.WidthPercentage = 100f;
                    tblFamily.SetWidths(new float[] { 1f });

                    PdfPCell FamilySuupot = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilySuport, fontHDBoldText));
                    FamilySuupot.BackgroundColor = BaseColor.LIGHT_GRAY;
                    FamilySuupot.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblFamily.AddCell(FamilySuupot);
                    string Family = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "Y") != "")
                    {
                        Family = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "N") != "")
                    {
                        Family = Resources.Qola.UIverbiage.No;
                    }

                    var pharse34 = new Phrase();
                    pharse34.Add(new Chunk(Resources.Qola.UIverbiage.ResidentFamilymeetingtobearranged + ": ", fontBoldText));
                    pharse34.Add(new Chunk(Family, tableFont));
                    PdfPCell ResidentFamilymeetingtobearranged1 = new PdfPCell(new Phrase(pharse34));

                    tblFamily.AddCell(ResidentFamilymeetingtobearranged1);
                    Family = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "4IN") != "")
                    {
                        Family = Resources.Qola.UIverbiage.Never;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "1ID") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.daily;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "2IW") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.Weekly;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "3IM") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.Monthly;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "9FA") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.Annually;
                    }

                    var pharse33 = new Phrase();
                    pharse33.Add(new Chunk(Resources.Qola.UIverbiage.FamilyInvolement + ": ", fontBoldText));
                    pharse33.Add(new Chunk(Family, tableFont));
                    PdfPCell Familyinvolvement = new PdfPCell(new Phrase(pharse33));

                    tblFamily.AddCell(Familyinvolvement);


                    PdfPCell familyTableCell = new PdfPCell(tblFamily);
                    familyTableCell.Colspan = 3;
                    AssessmentTable.AddCell(familyTableCell);

                    PdfPTable tblImmunization = new PdfPTable(2);
                    tblImmunization.WidthPercentage = 100f;
                    tblImmunization.SetWidths(new float[] { 2f, 1f });

                    PdfPCell Immunization = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Immunization, fontHDBoldText));
                    Immunization.BackgroundColor = BaseColor.LIGHT_GRAY;
                    Immunization.HorizontalAlignment = Element.ALIGN_CENTER;
                    Immunization.Colspan = 2;
                    tblImmunization.AddCell(Immunization);
                    string immunization = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "5MU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "20MY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_mantoux"].ToString();
                    }
                    PdfPCell mantoux = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mantoux, tableFont));
                    tblImmunization.AddCell(mantoux);
                    PdfPCell mantouxValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(mantouxValue);
                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "7CU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "21CY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_chest_Xray"].ToString();
                    }
                    PdfPCell xRay = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ChestXRay, tableFont));
                    tblImmunization.AddCell(xRay);
                    PdfPCell xRayValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(xRayValue);

                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "1PU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22PY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_pheumovax"].ToString();
                    }
                    PdfPCell Pneumovax = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pneumovax, tableFont));
                    tblImmunization.AddCell(Pneumovax);

                    PdfPCell PneumovaxValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(PneumovaxValue);

                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "3FU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22FY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_flu_vaccine"].ToString();
                    }
                    PdfPCell FluVaccine = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FluVaccine, tableFont));
                    tblImmunization.AddCell(FluVaccine);

                    PdfPCell FluVaccineValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(FluVaccineValue);

                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "23TY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_tetanus"].ToString();
                    }
                    PdfPCell Tetanus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tetanus, tableFont));
                    tblImmunization.AddCell(Tetanus);

                    PdfPCell TetanusValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(TetanusValue);

                    PdfPCell immunizationTableCell = new PdfPCell(tblImmunization);
                    immunizationTableCell.Colspan = 3;
                    AssessmentTable.AddCell(immunizationTableCell);

                    PdfPCell infection = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InfectiousDiseases, fontBoldTextSubtitle));
                    infection.HorizontalAlignment = Element.ALIGN_CENTER;
                    infection.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    infection.Colspan = 3;
                    AssessmentTable.AddCell(infection);
                    string infectionSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "24IN") != "")
                    {
                        infectionSelected = Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "25IU") != "")
                    {
                        if (infectionSelected != "")
                        {
                            infectionSelected += ", ";
                        }
                        infectionSelected += Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "26IM") != "")
                    {
                        if (infectionSelected != "")
                        {
                            infectionSelected += ", ";
                        }
                        infectionSelected += Resources.Qola.UIverbiage.MRSA;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "27IV") != "")
                    {
                        if (infectionSelected != "")
                        {
                            infectionSelected += ", ";
                        }
                        infectionSelected += Resources.Qola.UIverbiage.VRE;
                    }
                    PdfPCell infectionValue = new PdfPCell(new Phrase(infectionSelected, tableFont));
                    AssessmentTable.AddCell(infectionValue);

                    string getdiag = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_diagnosed"].ToString());
                    string getresol = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_resolved"].ToString());
                    var pharse30 = new Phrase();
                    pharse30.Add(new Chunk(Resources.Qola.UIverbiage.Diagnosed + ": ", fontBoldText));
                    pharse30.Add(new Chunk(getdiag, tableFont));
                    PdfPCell diagnosed = new PdfPCell(new Phrase(pharse30));

                    AssessmentTable.AddCell(diagnosed);

                    var pharse31 = new Phrase();
                    pharse31.Add(new Chunk(Resources.Qola.UIverbiage.Resolved + ": ", fontBoldText));
                    pharse31.Add(new Chunk(getresol, tableFont));
                    PdfPCell resolved = new PdfPCell(new Phrase(pharse31));
                    AssessmentTable.AddCell(resolved);

                }

            }
        }
        catch (Exception ex)
        {
            Log.Write("Progressive Report PrintResidentCareAssessmentP3 | " + ex.Message.ToString());
        }
        return AssessmentTable;
    }

    private void PrintDiet(string allergiesValue, PdfPTable allergyTable, Font fontBoldTextOP, Font tableFont)
    {
        string[] allergies = allergiesValue.Split(',');
        try
        {
            Collection<Common.SpecialDiet> objDiet = DAL.SpecialDiet.GetSplDietCollections();
            for (int index = 0; index < allergies.Length; index++)
            {
                string name = string.Empty;
                if (allergies[index] != "")
                {
                    int allergyId = Convert.ToInt32(allergies[index]);
                    for (int alergyIndex = 0; alergyIndex < objDiet.Count; alergyIndex++)
                    {
                        if (objDiet[alergyIndex].ID == allergyId)
                        {
                            name = objDiet[alergyIndex].Name;
                            break;
                        }
                    }
                    PdfPCell RefusedOP = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    allergyTable.AddCell(RefusedOP);
                    PdfPCell Refused = new PdfPCell(new Phrase(name, tableFont));
                    allergyTable.AddCell(Refused);
                }
            }
        }
        catch (Exception ex)
        {
            Log.Write("PrintAllergies | " + ex.Message.ToString());
        }
    }

    private void PrintAllergies(string allergiesValue, PdfPTable allergyTable, Font fontBoldTextOP, Font tableFont)
    {
        string[] allergies = allergiesValue.Split(',');
        try
        {
            Collection<Common.Allergies> objAllergies = DAL.Allergies.GetAllergiesCollections();
            for (int index = 0; index < allergies.Length; index++)
            {
                string name = string.Empty;
                if (allergies[index] != "")
                {
                    int allergyId = Convert.ToInt32(allergies[index]);
                    for (int alergyIndex = 0; alergyIndex < objAllergies.Count; alergyIndex++)
                    {
                        if (objAllergies[alergyIndex].ID == allergyId)
                        {
                            name = objAllergies[alergyIndex].Name;
                            break;
                        }
                    }
                    PdfPCell RefusedOP = new PdfPCell(new Phrase("P", fontBoldTextOP));
                    allergyTable.AddCell(RefusedOP);
                    PdfPCell Refused = new PdfPCell(new Phrase(name, tableFont));
                    allergyTable.AddCell(Refused);
                }
            }
        }
        catch (Exception ex)
        {
            Log.Write("PrintAllergies | " + ex.Message.ToString());
        }
    }

    private string PrintDiet(string allergiesValue)
    {
        string[] allergies = allergiesValue.Split(',');
        string name = string.Empty;
        try
        {
            Collection<Common.SpecialDiet> objDiet = DAL.SpecialDiet.GetSplDietCollections();
            for (int index = 0; index < allergies.Length; index++)
            {

                if (allergies[index] != "")
                {
                    int allergyId = Convert.ToInt32(allergies[index]);
                    for (int alergyIndex = 0; alergyIndex < objDiet.Count; alergyIndex++)
                    {
                        if (objDiet[alergyIndex].ID == allergyId)
                        {
                            name += objDiet[alergyIndex].Name + ", ";
                            break;
                        }
                    }

                }
            }
        }
        catch (Exception ex)
        {
            Log.Write("PrintAllergies | " + ex.Message.ToString());
        }
        char[] remove = new char[] { ',', ' ' };
        return name.TrimEnd(remove);
    }

    private string PrintAllergies(string allergiesValue)
    {
        string[] allergies = allergiesValue.Split(',');
        string name = string.Empty;
        try
        {
            Collection<Common.Allergies> objAllergies = DAL.Allergies.GetAllergiesCollections();
            for (int index = 0; index < allergies.Length; index++)
            {
                if (allergies[index] != "")
                {
                    int allergyId = Convert.ToInt32(allergies[index]);
                    for (int alergyIndex = 0; alergyIndex < objAllergies.Count; alergyIndex++)
                    {
                        if (objAllergies[alergyIndex].ID == allergyId)
                        {
                            name += objAllergies[alergyIndex].Name + ", ";
                            break;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Log.Write("PrintAllergies | " + ex.Message.ToString());
        }
        char[] remove = new char[] { ',', ' ' };
        return name.TrimEnd(remove);
    }

    private string PrintDietAllergies(int iResidentId)
    {
        int assessmentId = 0;
        Common.DietaryAssessment dietaryAssessments = new Common.DietaryAssessment();
        dietaryAssessments = DAL.DietaryAssessment.GetDietaryAssessmentByResidentId(iResidentId);
        string allergies = "";
        try
        {
            if (dietaryAssessments != null)
            {
                assessmentId = dietaryAssessments.ID > 0 ? Convert.ToInt32(dietaryAssessments.ID) : 0;
                List<Common.DietaryAssessment> listCollection = DAL.DietaryAssessment.GetDietAllergyListByResidentId(assessmentId);
                if (listCollection.Count > 0)
                {
                    for (int index = 0; index < listCollection.Count; index++)
                    {
                        Common.DietaryAssessment ass = listCollection[index];
                        allergies += ass.Allergy.Name + ": " + ass.DietAllergyNote + "\n";
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Log.Write("PrintDietAllergies | " + ex.Message.ToString());
        }
        return allergies;
    }

    public static string PrintMedicalAllergies(int iResidentId)
    {
        string allergies = "";
        try
        {
            List<Common.DietaryAssessment> liDietAllergyList = new List<Common.DietaryAssessment>();
            liDietAllergyList = DAL.Residents.GetMedicallAllergyListByResidentId(iResidentId);

            if (liDietAllergyList.Count > 0)
            {
                for (int index = 0; index < liDietAllergyList.Count; index++)
                {
                    Common.DietaryAssessment ass = liDietAllergyList[index];
                    allergies += ass.Allergy.Name + ": " + ass.DietAllergyNote + "\n";
                }
            }
        }
        catch (Exception ex)
        {
            Log.Write("PrintMedicalAllergies | " + ex.Message.ToString());
        }
        return allergies;
    }

    public PdfPTable ResidentNeedsAndGoalsReviewed()
    {
        Common.Residents resident = objResident;
        PdfPTable tblPlanOfCare = new PdfPTable(7);
        tblPlanOfCare.WidthPercentage = 80f;
        float[] wthtblPlanOfCare = new float[] { 1f, 1f, 1f, 1f, 1f, 1f, 3f };
        tblPlanOfCare.SetWidths(wthtblPlanOfCare);
        tblPlanOfCare.SpacingBefore = 5f;
        tblPlanOfCare.SpacingAfter = 5f;
        tblPlanOfCare.HorizontalAlignment = Element.ALIGN_LEFT;

        PdfPCell tblPlanOfCareHeader2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.VitalSign + " " + Resources.Qola.UIverbiage.FlowSheet, ProgressiveReport.font10B));
        tblPlanOfCareHeader2.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCareHeader2.Colspan = 7;
        tblPlanOfCareHeader2.Border = 0;
        tblPlanOfCareHeader2.PaddingBottom = 10f;
        tblPlanOfCare.AddCell(tblPlanOfCareHeader2);

        PdfPCell tblPlanOfCareTitle1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date, ProgressiveReport.font10B));
        tblPlanOfCareTitle1.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCare.AddCell(tblPlanOfCareTitle1);
        PdfPCell tblPlanOfCareTitle7 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Time, ProgressiveReport.font10B));
        tblPlanOfCareTitle7.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCare.AddCell(tblPlanOfCareTitle7);
        PdfPCell tblPlanOfCareTitle2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Weight, ProgressiveReport.font10B));
        tblPlanOfCareTitle2.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCare.AddCell(tblPlanOfCareTitle2);
        PdfPCell tblPlanOfCareTitle3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Height, ProgressiveReport.font10B));
        tblPlanOfCareTitle3.HorizontalAlignment = Element.ALIGN_CENTER;

        tblPlanOfCare.AddCell(tblPlanOfCareTitle3);
        PdfPCell tblPlanOfCareTitle4 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pulse, ProgressiveReport.font10B));
        tblPlanOfCareTitle4.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCare.AddCell(tblPlanOfCareTitle4);
        PdfPCell tblPlanOfCareTitle5 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BP, ProgressiveReport.font10B));
        tblPlanOfCareTitle5.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCare.AddCell(tblPlanOfCareTitle5);
        PdfPCell tblPlanOfCareTitle6 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Signature, ProgressiveReport.font10B));
        tblPlanOfCareTitle6.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCare.AddCell(tblPlanOfCareTitle6);

        int iColumnCountPOC;
        if (dsRCA.Tables[0].Rows.Count > 0)
        {
            for (iColumnCountPOC = 0; iColumnCountPOC < 4; iColumnCountPOC++)
            {
                string timeFormat = string.Empty;
                if (dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_modified_on"].ToString() != null && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_modified_on"].ToString() != "")
                {
                    DateTime dtDate = Convert.ToDateTime(dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_modified_on"]);
                    string strDate = dtDate.ToString("MM/dd/yyyy");

                    if (strDate != "01/01/1900")
                    {
                        timeFormat = String.Format("{0:t}", dtDate);
                        PdfPCell tblPlanOfCareDate = new PdfPCell(new Phrase(strDate, ProgressiveReport.font10));
                        tblPlanOfCareDate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblPlanOfCare.AddCell(tblPlanOfCareDate);
                    }
                    else
                    {
                        PdfPCell tblPlanOfCareDate = new PdfPCell(new Phrase(" ", ProgressiveReport.font10));
                        tblPlanOfCareDate.HorizontalAlignment = Element.ALIGN_CENTER;
                        tblPlanOfCare.AddCell(tblPlanOfCareDate);
                    }
                }
                else
                {
                    PdfPCell tblPlanOfCareDate = new PdfPCell(new Phrase("", ProgressiveReport.font10B));
                    tblPlanOfCareDate.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblPlanOfCare.AddCell(tblPlanOfCareDate);
                }
                PdfPCell tblPlanOfCareTime = new PdfPCell();
                if (timeFormat != "")
                {
                    tblPlanOfCareTime = new PdfPCell(new Phrase(timeFormat, ProgressiveReport.font10));
                }
                tblPlanOfCare.AddCell(tblPlanOfCareTime);

                if (dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_weight_value"].ToString() != null && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_weight_value"].ToString() != "")
                {
                    string strWeight = dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_weight_value"].ToString();
                    PdfPCell tblPlanOfCareWeight = new PdfPCell(new Phrase(strWeight, ProgressiveReport.font10));
                    tblPlanOfCareWeight.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblPlanOfCare.AddCell(tblPlanOfCareWeight);
                }
                else
                {
                    PdfPCell tblPlanOfCareWeight = new PdfPCell(new Phrase("", ProgressiveReport.font10));
                    tblPlanOfCareWeight.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblPlanOfCare.AddCell(tblPlanOfCareWeight);
                }
                PdfPCell tblPlanOfCareResp = new PdfPCell();
                if (dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_height_value"].ToString() != null && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_height_value"].ToString() != "")
                {
                    string strHeight = dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_height_value"].ToString();
                    tblPlanOfCareResp = new PdfPCell(new Phrase(strHeight, ProgressiveReport.font10));
                }
                tblPlanOfCareResp.HorizontalAlignment = Element.ALIGN_CENTER;
                tblPlanOfCare.AddCell(tblPlanOfCareResp);

                if (dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_pulse_value"].ToString() != null && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_pulse_value"].ToString() != "")
                {
                    string strPulse = dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_pulse_value"].ToString();
                    PdfPCell tblPlanOfCareWeight = new PdfPCell(new Phrase(strPulse, ProgressiveReport.font10));
                    tblPlanOfCareWeight.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblPlanOfCare.AddCell(tblPlanOfCareWeight);
                }
                else
                {
                    PdfPCell tblPlanOfCareWeight = new PdfPCell(new Phrase("", ProgressiveReport.font10));
                    tblPlanOfCareWeight.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblPlanOfCare.AddCell(tblPlanOfCareWeight);
                }
                if (dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_BP_value"].ToString() != null && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_BP_value"].ToString() != "")
                {
                    string strBP = dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_BP_value"].ToString();
                    PdfPCell tblPlanOfCareWeight = new PdfPCell(new Phrase(strBP, ProgressiveReport.font10));
                    tblPlanOfCareWeight.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblPlanOfCare.AddCell(tblPlanOfCareWeight);
                }
                else
                {
                    PdfPCell tblPlanOfCareWeight = new PdfPCell(new Phrase(" ", ProgressiveReport.font10));
                    tblPlanOfCareWeight.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblPlanOfCare.AddCell(tblPlanOfCareWeight);
                }
                PdfPCell tblPlanOfCareSignature = new PdfPCell(new Phrase("", ProgressiveReport.font10B));
                tblPlanOfCareSignature.HorizontalAlignment = Element.ALIGN_CENTER;
                tblPlanOfCare.AddCell(tblPlanOfCareSignature);
            }
        }
        else
        {
            tblPlanOfCare = null;
        }
        return tblPlanOfCare;
    }

    public PdfPTable PrintResidentCareAssessmentP3Common(DataSet dsAssessmentDetails, Document doc, int iCarePlanId)
    {
        string exception = string.Empty;
        string assessmentDate = string.Empty;
        int assessmentValue = 0;
        string userName = string.Empty;
        string userType = string.Empty;
        string completedOn = string.Empty;
        Common.Residents resident;
        PdfPTable AssessmentTable = new PdfPTable(3);
        AssessmentTable.WidthPercentage = 100f;
        float[] wthHead = new float[] { 1f, 1f, 1f };
        AssessmentTable.SetWidths(wthHead);
        AssessmentTable.SpacingBefore = 5f;
        try
        {
            resident = new Common.Residents();
            if (Session["ResidentStatus"] != null && Session["ResidentStatus"].ToString() == "I")
            {
                resident = DAL.Residents.GetInActiveResidentById(Convert.ToInt32(Session["ResidentId"]));
            }
            else
            {
                resident = DAL.Residents.GetResidentById(Convert.ToInt32(Session["ResidentId"]));
            }
            string residentnamefooter = resident.LastName + " " + resident.FirstName;
            string suitenofooter = resident.SuiteNo;
            string reportname = "Resident Care Assessment";


            if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
            {
                if (iCarePlanId == 0)
                {
                    dsAssessmentDetails = DAL.PlanOfCare.GetPlanOfCare(Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_id"]));
                }
                else
                {
                    dsAssessmentDetails = DAL.PlanOfCare.GetPlanOfCare(iCarePlanId);
                }
                if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
                {
                    userName = dsAssessmentDetails.Tables[0].Rows[0]["As_fd_last_name"].ToString() + ", " + dsAssessmentDetails.Tables[0].Rows[0]["As_fd_first_name"].ToString();
                    userType = dsAssessmentDetails.Tables[0].Rows[0]["As_fd_user_type"].ToString();
                    if (dsAssessmentDetails.Tables[0].Rows[0]["fd_modified_on"] != null && dsAssessmentDetails.Tables[0].Rows[0]["fd_modified_on"] != "")
                    {
                        DateTime de = Convert.ToDateTime(dsAssessmentDetails.Tables[0].Rows[0]["fd_modified_on"]);
                        completedOn = de.ToString("MMMM dd, yyyy");
                    }
                }
                Font tableFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.NORMAL, BaseColor.BLACK);
                Font fontHDBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                Font fontBoldTextSubtitle = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                Font fontBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                Font fontLargeBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                string fontpath = Server.MapPath(".");
                BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
                Font fontBoldTextOP = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);

                iTextSharp.text.Font fontFooter = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.ITALIC, BaseColor.DARK_GRAY);
                iTextSharp.text.Font fontGeneralText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
                iTextSharp.text.Font fontBoldHeadText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                iTextSharp.text.Font fontCellHeader = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                string modify = userName + ", " + userType + ", " + completedOn;

                doc = new Document(PageSize.A4, 20, 20, 25, 15);
                System.IO.MemoryStream mstream = new System.IO.MemoryStream();
                PdfWriter writer = PdfWriter.GetInstance(doc, mstream);

                writer.PageEvent = new pdfHeaderFooterAssessment(residentnamefooter, suitenofooter, reportname, modify);
                doc.Open();
                PdfPTable tblHeader = new PdfPTable(4);
                tblHeader.WidthPercentage = 100f;
                float[] headerWidth = new float[] { 1f, 1f, 1f, 0.32f };
                tblHeader.SetWidths(headerWidth);
                tblHeader.SpacingBefore = 5f;

                PdfPCell hdCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentName + " : ", fontBoldText));
                hdCell1.Border = 0;
                tblHeader.AddCell(hdCell1);

                PdfPCell hdCell2 = new PdfPCell(new Phrase(resident.LastName + ", " + resident.FirstName, fontBoldText));

                hdCell2.Border = 0;
                hdCell2.PaddingLeft = -100;
                hdCell2.HorizontalAlignment = Element.ALIGN_LEFT;
                tblHeader.AddCell(hdCell2);

                PdfPCell hdCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suite + " # : " + resident.SuiteNo, fontBoldText));
                hdCell3.Border = 0;
                hdCell3.Colspan = 2;
                hdCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(hdCell3);
                assessmentValue = 0;
                string assessmentId = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_id"]);
                PdfPCell cellAssDate;
                if (assessmentId != null && assessmentId != "" && assessmentId != "0")
                {
                    assessmentValue = Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_id"]);
                    assessmentDate = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_date"]);
                }

                cellAssDate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + " : ", fontBoldText));
                cellAssDate.Border = 0;
                cellAssDate.Colspan = 3;
                cellAssDate.PaddingRight = -12;
                cellAssDate.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(cellAssDate);

                cellAssDate = new PdfPCell(new Phrase(assessmentDate, fontBoldText));
                cellAssDate.Border = 0;
                cellAssDate.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(cellAssDate);

                if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
                {
                    doc.Add(tblHeader);
                    float[] wthAssessed = new float[] { 8f, 1f };


                    PdfPCell spaceCell1 = new PdfPCell(new Phrase(""));
                    spaceCell1.Colspan = 2;
                    spaceCell1.FixedHeight = 8;
                    spaceCell1.Border = 0;

                    PdfPCell BlaContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Continent, tableFont));
                    PdfPCell BlaOCCInContinent = new PdfPCell(new Phrase("Occasionally Incontinent", tableFont));
                    PdfPCell BlaInContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InContinent, tableFont));
                    PdfPCell Independent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    PdfPCell Supervised = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervised, tableFont));
                    PdfPCell HomeAMCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Home, tableFont));
                    PdfPCell AgencyAMCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
                    PdfPCell Assisted = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assisted, tableFont));

                    PdfPCell OSats = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sats, tableFont));
                    PdfPCell ForeWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ForeWheel, tableFont));
                    PdfPCell NA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    PdfPCell TwoWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TwoWheel, tableFont));
                    PdfPCell NoWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NoWheel, tableFont));
                    PdfPCell Yes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                    PdfPCell No = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                    PdfPCell NutIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    PdfPCell Elimination = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Elimination, fontHDBoldText));
                    PdfPCell DependentCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                    PdfPCell AM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AM, tableFont));
                    PdfPCell PM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PM, tableFont));
                    PdfPCell AMPM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BothAmPm, tableFont));
                    PdfPCell Pendant = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pendant, tableFont));

                    PdfPCell dependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                    PdfPCell na = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    Elimination.Colspan = 2;
                    Elimination.BackgroundColor = BaseColor.LIGHT_GRAY;
                    PdfPCell txtBlaComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtBlaComments.Colspan = 2;

                    PdfPTable tblAssessed = new PdfPTable(2);
                    tblAssessed.WidthPercentage = 100f;
                    tblAssessed.SetWidths(wthAssessed);

                    PdfPCell Assessed = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssessmentType, fontBoldTextSubtitle));
                    Assessed.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Assessed.HorizontalAlignment = Element.ALIGN_CENTER;
                    Assessed.Colspan = 2;
                    tblAssessed.AddCell(Assessed);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "7PA") != "" ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "2AU") != "" ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "6AN") != "" ||
                       getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "8AA") != "")
                    {

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "7PA") != "")
                        {
                            PdfPCell PreAdmin = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreAdmin, tableFont));
                            PreAdmin.Colspan = 2;
                            tblAssessed.AddCell(PreAdmin);
                            PdfPCell PreAdminOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "7PA") != "")
                            {
                                PreAdminOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "7PA"), fontBoldTextOP));
                            }

                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "2AU") != "")
                        {
                            PdfPCell CUpdate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Update1, tableFont));
                            CUpdate.Colspan = 2;
                            tblAssessed.AddCell(CUpdate);
                            PdfPCell CUpdateOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "2AU") != "")
                            {
                                CUpdateOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "2AU"), fontBoldTextOP));
                            }
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "6AN") != "")
                        {
                            PdfPCell SemiAnnualAssessment = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assessment5Month, tableFont));
                            SemiAnnualAssessment.Colspan = 2;
                            tblAssessed.AddCell(SemiAnnualAssessment);
                            PdfPCell SemiAnnualAssessmentOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "6AN") != "")
                            {
                                SemiAnnualAssessmentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "6AN"), fontBoldTextOP));
                            }
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "8AA") != "")
                        {
                            PdfPCell Admission = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Admission, tableFont));
                            Admission.Colspan = 2;
                            tblAssessed.AddCell(Admission);
                            PdfPCell AdmissionOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "8AA") != "")
                            {
                                AdmissionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_assessed"].ToString(), "8AA"), fontBoldTextOP));
                            }
                        }
                    }
                    else
                    {
                        PdfPCell assessed = new PdfPCell();
                        assessed.Colspan = 2;
                        tblAssessed.AddCell(assessed);
                    }
                    AssessmentTable.AddCell(tblAssessed);

                    PdfPTable tblBP = new PdfPTable(2);
                    tblBP.WidthPercentage = 100f;
                    tblBP.SetWidths(wthAssessed);

                    PdfPCell ModifyBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.VitalSign, fontBoldTextSubtitle));
                    ModifyBP.HorizontalAlignment = Element.ALIGN_CENTER;
                    ModifyBP.Colspan = 2;
                    ModifyBP.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblBP.AddCell(ModifyBP);

                    Phrase bpPhrase = new Phrase(Resources.Qola.UIverbiage.BP + ": ", fontBoldText);
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_systolic"].ToString()))
                    {
                        bpPhrase.Add(new Chunk(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_systolic"].ToString() + "/", tableFont));
                    }


                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_value"].ToString()))
                    {
                        bpPhrase.Add(new Chunk(dsAssessmentDetails.Tables[0].Rows[0]["fd_BP_value"].ToString(), tableFont));
                    }

                    PdfPCell ModifyBP1 = new PdfPCell(new Phrase(bpPhrase));
                    ModifyBP1.HorizontalAlignment = Element.ALIGN_LEFT;
                    ModifyBP1.Colspan = 2;
                    tblBP.AddCell(ModifyBP1);

                    Phrase pulse = new Phrase(Resources.Qola.UIverbiage.Pulse + ": ", fontBoldText);
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString()))
                    {
                        pulse.Add(new Chunk(dsAssessmentDetails.Tables[0].Rows[0]["fd_pulse_value"].ToString(), tableFont));
                    }
                    PdfPCell ModifyPulse1 = new PdfPCell(new Phrase(pulse));
                    ModifyPulse1.HorizontalAlignment = Element.ALIGN_LEFT;
                    ModifyPulse1.Colspan = 2;
                    tblBP.AddCell(ModifyPulse1);

                    Phrase weight = new Phrase(Resources.Qola.UIverbiage.WeightLBS + ": ", fontBoldText);

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString()))
                    {
                        weight.Add(new Chunk(dsAssessmentDetails.Tables[0].Rows[0]["fd_weight_value"].ToString(), tableFont));
                    }
                    PdfPCell ModifyWeight = new PdfPCell(new Phrase(weight));
                    ModifyWeight.HorizontalAlignment = Element.ALIGN_LEFT;
                    ModifyWeight.Colspan = 2;
                    tblBP.AddCell(ModifyWeight);

                    Phrase Height = new Phrase(Resources.Qola.UIverbiage.Height + ": ", fontBoldText);
                    string heightValue = "";
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString()))
                    {
                        heightValue = dsAssessmentDetails.Tables[0].Rows[0]["fd_height_value"].ToString();
                    }

                    if ((!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_measurement"].ToString())) && dsAssessmentDetails.Tables[0].Rows[0]["fd_height_measurement"].ToString() != "0")
                    {
                        string height = "";
                        int hMeasurement = Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_height_measurement"].ToString());
                        if (hMeasurement == 1)
                        {
                            height = Resources.Qola.UIverbiage.inches;
                            if (heightValue.IndexOf(".") > -1)
                            {
                                heightValue = heightValue.Replace(".", "'");
                                heightValue = heightValue.Insert(heightValue.Length, Convert.ToString("\""));
                            }
                        }
                        else
                        {
                            height = Resources.Qola.UIverbiage.cm;
                        }
                        Height.Add(new Chunk(heightValue, tableFont));
                    }
                    PdfPCell ModifyHeight = new PdfPCell(new Phrase(Height));
                    ModifyHeight.HorizontalAlignment = Element.ALIGN_LEFT;
                    ModifyHeight.Colspan = 2;
                    tblBP.AddCell(ModifyHeight);
                    AssessmentTable.AddCell(tblBP);

                    PdfPTable tblAllergy = new PdfPTable(1);
                    tblAllergy.WidthPercentage = 100f;
                    tblAllergy.SetWidths(new float[] { 1f });

                    PdfPCell Allergies = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Allergies, fontBoldTextSubtitle));
                    Allergies.HorizontalAlignment = Element.ALIGN_CENTER;
                    Allergies.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblAllergy.AddCell(Allergies);

                    var pharseAllergies = new Phrase();
                    pharseAllergies.Add(new Chunk(PrintMedicalAllergies(resident.ID), tableFont));
                    pharseAllergies.Add(new Chunk(PrintDietAllergies(resident.ID), tableFont));
                    PdfPCell allergiesValue = new PdfPCell(new Phrase(pharseAllergies));
                    tblAllergy.AddCell(allergiesValue);

                    AssessmentTable.AddCell(tblAllergy);

                    PdfPTable AMCare = new PdfPTable(2);
                    AMCare.WidthPercentage = 100f;
                    AMCare.SetWidths(wthAssessed);

                    PdfPCell PersonalHygine = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PersonalHygiene, fontHDBoldText));
                    PersonalHygine.HorizontalAlignment = Element.ALIGN_CENTER;
                    PersonalHygine.Colspan = 3;
                    PersonalHygine.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(PersonalHygine);

                    PdfPCell amCareCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AMcare, fontBoldTextSubtitle));
                    amCareCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    amCareCell.Colspan = 2;
                    amCareCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    amCareCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AMCare.AddCell(amCareCell);

                    string AMCareSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AI") != "")
                    {
                        AMCareSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AS") != "")
                    {
                        if (AMCareSelected != "")
                        {
                            AMCareSelected += ", ";
                        }
                        AMCareSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "3AA") != "")
                    {
                        if (AMCareSelected != "")
                        {
                            AMCareSelected += ", ";
                        }
                        AMCareSelected += Resources.Qola.UIverbiage.Assisted;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7AD") != "")
                    {
                        if (AMCareSelected != "")
                        {
                            AMCareSelected += ", ";
                        }
                        AMCareSelected += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "69AS4") != "")
                    {
                        if (AMCareSelected != "")
                        {
                            AMCareSelected += ", ";
                        }
                        AMCareSelected += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "70ASD4") != "")
                    {
                        if (AMCareSelected != "")
                        {
                            AMCareSelected += ", ";
                        }
                        AMCareSelected += Resources.Qola.UIverbiage.SL4D;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "71AP") != "")
                    {
                        if (AMCareSelected != "")
                        {
                            AMCareSelected += ", ";
                        }
                        AMCareSelected += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    var pharse1 = new Phrase();
                    pharse1.Add(new Chunk(Resources.Qola.UIverbiage.AMcare + ": ", fontBoldText));
                    pharse1.Add(new Chunk(AMCareSelected, tableFont));
                    PdfPCell amCare = new PdfPCell(new Phrase(pharse1));
                    amCare.Colspan = 2;
                    AMCare.AddCell(amCare);

                    string amCareAssistedBy = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "1AH") != "")
                    {
                        amCareAssistedBy = Resources.Qola.UIverbiage.Home;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "2AA") != "")
                    {
                        amCareAssistedBy = Resources.Qola.UIverbiage.Agency;
                    }
                    string agencyName = string.Empty;
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_AM_agency_name"].ToString()))
                    {
                        agencyName = dsAssessmentDetails.Tables[0].Rows[0]["fd_AM_agency_name"].ToString();
                    }

                    var pharse2 = new Phrase();
                    pharse2.Add(new Chunk(Resources.Qola.UIverbiage.Assistedby + ": ", fontBoldText));
                    pharse2.Add(new Chunk(amCareAssistedBy, tableFont));
                    PdfPCell amCareAssistedByCell = new PdfPCell(new Phrase(pharse2));
                    amCareAssistedByCell.Colspan = 2;
                    AMCare.AddCell(amCareAssistedByCell);

                    var pharse3 = new Phrase();
                    pharse3.Add(new Chunk(Resources.Qola.UIverbiage.Agencyname + ": ", fontBoldText));
                    pharse3.Add(new Chunk(agencyName, tableFont));
                    PdfPCell amCareAgemcy = new PdfPCell(new Phrase(pharse3));
                    amCareAgemcy.Colspan = 2;
                    AMCare.AddCell(amCareAgemcy);

                    string preferredTime = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "32AP") != "")
                    {
                        preferredTime = Resources.Qola.UIverbiage.AllMorningHours;
                    }

                    Phrase AMPreferredTime = new Phrase();
                    AMPreferredTime.Add(new Chunk(Resources.Qola.UIverbiage.PreferredTime, fontBoldText));
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_am_split_time"].ToString()))
                    {
                        string[] amTime = dsAssessmentDetails.Tables[0].Rows[0]["fd_am_split_time"].ToString().Split('-');
                        string AmTimeValue = amTime[0] + ":" + amTime[1] + " " + amTime[2];
                        AMPreferredTime.Add(new Chunk(": " + AmTimeValue, tableFont));
                    }
                    PdfPCell AMPreferredTimeV = new PdfPCell(AMPreferredTime);
                    AMPreferredTimeV.HorizontalAlignment = Element.ALIGN_LEFT;
                    AMPreferredTimeV.Colspan = 2;
                    AMCare.AddCell(AMPreferredTimeV);

                    AssessmentTable.AddCell(AMCare);

                    PdfPTable PMCare = new PdfPTable(2);
                    PMCare.WidthPercentage = 100f;
                    PMCare.SetWidths(wthAssessed);

                    PdfPCell PMCareCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PMCare, fontBoldTextSubtitle));
                    PMCareCell.Colspan = 2;
                    PMCareCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    PMCareCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    PMCare.AddCell(PMCareCell);

                    string pMCareSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8PI") != "")
                    {
                        pMCareSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9PS") != "")
                    {
                        if (pMCareSelected != "")
                        {
                            pMCareSelected += ", ";
                        }
                        pMCareSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10PA") != "")
                    {
                        if (pMCareSelected != "")
                        {
                            pMCareSelected += ", ";
                        }
                        pMCareSelected += Resources.Qola.UIverbiage.Assisted;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11PD") != "")
                    {
                        if (pMCareSelected != "")
                        {
                            pMCareSelected += ", ";
                        }
                        pMCareSelected += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "72PS4") != "")
                    {
                        if (pMCareSelected != "")
                        {
                            pMCareSelected += ", ";
                        }
                        pMCareSelected = Resources.Qola.UIverbiage.SL4;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "73PSD4") != "")
                    {
                        if (pMCareSelected != "")
                        {
                            pMCareSelected += ", ";
                        }
                        pMCareSelected = Resources.Qola.UIverbiage.SL4D;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "74PP") != "")
                    {
                        if (pMCareSelected != "")
                        {
                            pMCareSelected += ", ";
                        }
                        pMCareSelected = Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    var pharse5 = new Phrase();
                    pharse5.Add(new Chunk(Resources.Qola.UIverbiage.PMCare + ": ", fontBoldText));
                    pharse5.Add(new Chunk(pMCareSelected, tableFont));
                    PdfPCell pmCare = new PdfPCell(new Phrase(pharse5));
                    pmCare.Colspan = 2;
                    PMCare.AddCell(pmCare);

                    string pmCareAssistedBy = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "28PH") != "")
                    {
                        pmCareAssistedBy = Resources.Qola.UIverbiage.Home;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "29PA") != "")
                    {
                        pmCareAssistedBy = Resources.Qola.UIverbiage.Agency;
                    }
                    string PmagencyName = string.Empty;
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_PM_agency_name"].ToString()))
                    {
                        PmagencyName = dsAssessmentDetails.Tables[0].Rows[0]["fd_PM_agency_name"].ToString();
                    }

                    var pharse6 = new Phrase();
                    pharse6.Add(new Chunk(Resources.Qola.UIverbiage.Assistedby + ": ", fontBoldText));
                    pharse6.Add(new Chunk(pmCareAssistedBy, tableFont));
                    PdfPCell pmCareAssistedByCell = new PdfPCell(new Phrase(pharse6));

                    pmCareAssistedByCell.Colspan = 2;
                    PMCare.AddCell(pmCareAssistedByCell);

                    var pharse7 = new Phrase();
                    pharse7.Add(new Chunk(Resources.Qola.UIverbiage.Agencyname + ": ", fontBoldText));
                    pharse7.Add(new Chunk(PmagencyName, tableFont));
                    PdfPCell pmCareAgemcy = new PdfPCell(new Phrase(pharse7));

                    pmCareAgemcy.Colspan = 2;
                    PMCare.AddCell(pmCareAgemcy);

                    Phrase PMPreferredTime = new Phrase(Resources.Qola.UIverbiage.PreferredTime, fontBoldText);

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_pm_split_time"].ToString()))
                    {
                        string[] pmTime = dsAssessmentDetails.Tables[0].Rows[0]["fd_pm_split_time"].ToString().Split('-');
                        string PmTimeValue = pmTime[0] + ":" + pmTime[1] + " " + pmTime[2];
                        PMPreferredTime.Add(new Chunk(": " + PmTimeValue, tableFont));
                    }



                    PdfPCell pmCarePreferredTime = new PdfPCell(new Phrase(PMPreferredTime));

                    pmCarePreferredTime.Colspan = 2;
                    PMCare.AddCell(pmCarePreferredTime);

                    AssessmentTable.AddCell(PMCare);

                    PdfPTable tblBathing = new PdfPTable(2);
                    tblBathing.WidthPercentage = 100f;
                    tblBathing.SetWidths(wthAssessed);

                    PdfPCell BathingCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bathing, fontBoldTextSubtitle));
                    BathingCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    BathingCell.Colspan = 2;
                    BathingCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblBathing.AddCell(BathingCell);

                    string BathingCareSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "30BN") != "")
                    {
                        if (BathingCareSelected != "")
                        {
                            BathingCareSelected += ", ";
                        }
                        BathingCareSelected += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "4BI") != "")
                    {
                        if (BathingCareSelected != "")
                        {
                            BathingCareSelected += ", ";
                        }
                        BathingCareSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "5BS") != "")
                    {
                        if (BathingCareSelected != "")
                        {
                            BathingCareSelected += ", ";
                        }
                        BathingCareSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "6BA") != "")
                    {
                        if (BathingCareSelected != "")
                        {
                            BathingCareSelected += ", ";
                        }
                        BathingCareSelected += Resources.Qola.UIverbiage.Assisted;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "31BD") != "")
                    {
                        if (BathingCareSelected != "")
                        {
                            BathingCareSelected += ", ";
                        }
                        BathingCareSelected += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "75BS4") != "")
                    {
                        BathingCareSelected += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "76BSD4") != "")
                    {
                        BathingCareSelected += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "77BP") != "")
                    {
                        BathingCareSelected += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (BathingCareSelected != "")
                    {
                        BathingCareSelected = BathingCareSelected.TrimEnd();
                        if (BathingCareSelected.EndsWith(","))
                        {
                            BathingCareSelected = BathingCareSelected.TrimEnd(',');
                        }
                    }
                    var pharse9 = new Phrase();
                    pharse9.Add(new Chunk(Resources.Qola.UIverbiage.Bathing + ": ", fontBoldText));
                    pharse9.Add(new Chunk(BathingCareSelected, tableFont));
                    PdfPCell bathing = new PdfPCell(new Phrase(pharse9));

                    bathing.Colspan = 2;
                    tblBathing.AddCell(bathing);

                    string bathingAssistedBy = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH") != "")
                    {
                        bathingAssistedBy = Resources.Qola.UIverbiage.Home;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "56BA") != "")
                    {
                        bathingAssistedBy = Resources.Qola.UIverbiage.Agency;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "55BH56BA") != "")
                    {
                        bathingAssistedBy = "Both";
                    }
                    string BathingAgencyName = string.Empty;
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bathing_agency_name"].ToString()))
                    {
                        BathingAgencyName = dsAssessmentDetails.Tables[0].Rows[0]["fd_bathing_agency_name"].ToString();
                    }
                    var pharse10 = new Phrase();
                    pharse10.Add(new Chunk(Resources.Qola.UIverbiage.Assistedby + ": ", fontBoldText));
                    pharse10.Add(new Chunk(bathingAssistedBy, tableFont));
                    PdfPCell bathingAssistedByCell = new PdfPCell(new Phrase(pharse10));

                    bathingAssistedByCell.Colspan = 2;
                    tblBathing.AddCell(bathingAssistedByCell);

                    var pharse11 = new Phrase();
                    pharse11.Add(new Chunk(Resources.Qola.UIverbiage.Agencyname + ": ", fontBoldText));
                    pharse11.Add(new Chunk(BathingAgencyName, tableFont));
                    PdfPCell batingAgemcy = new PdfPCell(new Phrase(pharse11));

                    batingAgemcy.Colspan = 2;
                    tblBathing.AddCell(batingAgemcy);

                    string bathingPreferredTime = string.Empty;

                    Phrase BathPreferredTime = new Phrase(Resources.Qola.UIverbiage.PreferredTime, fontBoldText);
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_bath_split_time"].ToString()))
                    {
                        string[] pmTime = dsAssessmentDetails.Tables[0].Rows[0]["fd_bath_split_time"].ToString().Split('-');
                        string PmTimeValue = pmTime[0] + ":" + pmTime[1] + " " + pmTime[2];
                        BathPreferredTime.Add(new Chunk(": " + PmTimeValue, tableFont));
                    }

                    PdfPCell bathingPreferredTimeCell = new PdfPCell(new Phrase(BathPreferredTime));

                    bathingPreferredTimeCell.Colspan = 2;
                    tblBathing.AddCell(bathingPreferredTimeCell);

                    string bathingDay = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "62PA") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "63PE") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.EveryDay;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "44PS") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Sunday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "45PM") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Monday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "46PT") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Tuesday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "47PW") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Wednesday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "48PH") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Thursday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "49PF") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Friday;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "50PA") != "")
                    {
                        if (bathingDay != "")
                        {
                            bathingDay += ", ";
                        }
                        bathingDay += Resources.Qola.UIverbiage.Saturday;
                    }
                    var pharse13 = new Phrase();
                    pharse13.Add(new Chunk(Resources.Qola.UIverbiage.PreferredDay + ": ", fontBoldText));
                    pharse13.Add(new Chunk(bathingDay, tableFont));
                    PdfPCell PreferredDay = new PdfPCell(new Phrase(pharse13));

                    PreferredDay.Colspan = 2;
                    tblBathing.AddCell(PreferredDay);

                    string preferedTYpe = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12PB") != "")
                    {
                        if (preferedTYpe != "")
                        {
                            preferedTYpe += ", ";
                        }
                        preferedTYpe += Resources.Qola.UIverbiage.Bath;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24PS") != "")
                    {
                        if (preferedTYpe != "")
                        {
                            preferedTYpe += ", ";
                        }
                        preferedTYpe += Resources.Qola.UIverbiage.Shower;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "35PP") != "")
                    {
                        if (preferedTYpe != "")
                        {
                            preferedTYpe += ", ";
                        }
                        preferedTYpe += Resources.Qola.UIverbiage.Sponge;
                    }
                    Phrase bathingPharse = new Phrase(Resources.Qola.UIverbiage.PreferredType, fontBoldText);
                    bathingPharse.Add(new Chunk(": " + preferedTYpe, tableFont));
                    PdfPCell PreferredType = new PdfPCell(new Phrase(bathingPharse));
                    PreferredType.Colspan = 2;
                    tblBathing.AddCell(PreferredType);

                    AssessmentTable.AddCell(tblBathing);

                    PdfPCell assistanceWith = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWith, fontHDBoldText));
                    assistanceWith.HorizontalAlignment = Element.ALIGN_CENTER;
                    assistanceWith.Colspan = 3;
                    assistanceWith.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(assistanceWith);

                    PdfPTable tblDressing = new PdfPTable(1);
                    tblDressing.WidthPercentage = 100f;
                    tblDressing.SetWidths(new float[] { 1f });


                    string dressingType = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15DA") != "")
                    {
                        dressingType += Resources.Qola.UIverbiage.AM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "16DP") != "")
                    {
                        if (dressingType != "")
                        {
                            dressingType += ", ";
                        }
                        dressingType += Resources.Qola.UIverbiage.PM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "17DB") != "")
                    {
                        if (dressingType != "")
                        {
                            dressingType += ", ";
                        }
                        dressingType += Resources.Qola.UIverbiage.BothAmPm;
                    }
                    if (dressingType != "")
                    {
                        dressingType = dressingType.TrimEnd();
                        if (dressingType.EndsWith(","))
                        {
                            dressingType = dressingType.TrimEnd(',');
                        }
                    }
                    var pharse14 = new Phrase();
                    pharse14.Add(new Chunk(Resources.Qola.UIverbiage.Dressing + ": ", fontBoldText));
                    pharse14.Add(new Chunk(dressingType, tableFont));
                    PdfPCell dressing = new PdfPCell(new Phrase(pharse14));

                    tblDressing.AddCell(dressing);

                    string dressingSelectedValue = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13DN") != "")
                    {
                        dressingSelectedValue += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "7DI") != "")
                    {
                        if (dressingSelectedValue != "")
                        {
                            dressingSelectedValue += ", ";
                        }
                        dressingSelectedValue += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "8DS") != "")
                    {
                        if (dressingSelectedValue != "")
                        {
                            dressingSelectedValue += ", ";
                        }
                        dressingSelectedValue += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "9DA") != "")
                    {
                        if (dressingSelectedValue != "")
                        {
                            dressingSelectedValue += ", ";
                        }
                        dressingSelectedValue += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14DD") != "")
                    {
                        if (dressingSelectedValue != "")
                        {
                            dressingSelectedValue += ", ";
                        }
                        dressingSelectedValue += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "78DS4") != "")
                    {
                        if (dressingSelectedValue != "")
                        {
                            dressingSelectedValue += ", ";
                        }
                        dressingSelectedValue += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "79DSD4") != "")
                    {
                        if (dressingSelectedValue != "")
                        {
                            dressingSelectedValue += ", ";
                        }
                        dressingSelectedValue += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "80DP") != "")
                    {
                        if (dressingSelectedValue != "")
                        {
                            dressingSelectedValue += ", ";
                        }
                        dressingSelectedValue += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (dressingSelectedValue != "")
                    {
                        dressingSelectedValue = dressingSelectedValue.TrimEnd();
                        if (dressingSelectedValue.EndsWith(","))
                        {
                            dressingSelectedValue = dressingSelectedValue.TrimEnd(',');
                        }
                    }

                    PdfPCell dressingValue = new PdfPCell(new Phrase(dressingSelectedValue, tableFont));
                    dressingValue.MinimumHeight = 15f;
                    tblDressing.AddCell(dressingValue);

                    dressingSelectedValue = string.Empty;
                    string oralHygieneType = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "18OA") != "")
                    {
                        oralHygieneType += Resources.Qola.UIverbiage.AM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "19OP") != "")
                    {
                        if (oralHygieneType != "")
                        {
                            oralHygieneType += ", ";
                        }
                        oralHygieneType += Resources.Qola.UIverbiage.PM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "20OB") != "")
                    {
                        if (oralHygieneType != "")
                        {
                            oralHygieneType += ", ";
                        }
                        oralHygieneType += Resources.Qola.UIverbiage.BothAmPm;
                    }
                    if (oralHygieneType != "")
                    {
                        oralHygieneType = oralHygieneType.TrimEnd();
                        if (oralHygieneType.EndsWith(","))
                        {
                            oralHygieneType = oralHygieneType.TrimEnd(',');
                        }
                    }
                    string sOralTeeth = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "105TO") != "")
                    {
                        if (sOralTeeth != "")
                        {
                            sOralTeeth += ", ";
                        }
                        sOralTeeth += Resources.Qola.UIverbiage.OwnTeeth;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "106TF") != "")
                    {
                        if (sOralTeeth != "")
                        {
                            sOralTeeth += ", ";
                        }
                        sOralTeeth += Resources.Qola.UIverbiage.Full;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "107TP") != "")
                    {
                        if (sOralTeeth != "")
                        {
                            sOralTeeth += ", ";
                        }
                        sOralTeeth += Resources.Qola.UIverbiage.Partial;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "108TU") != "")
                    {
                        if (sOralTeeth != "")
                        {
                            sOralTeeth += ", ";
                        }
                        sOralTeeth += Resources.Qola.UIverbiage.Upper;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "109TL") != "")
                    {
                        if (sOralTeeth != "")
                        {
                            sOralTeeth += ", ";
                        }
                        sOralTeeth += Resources.Qola.UIverbiage.Lower;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "110TN") != "")
                    {
                        if (sOralTeeth != "")
                        {
                            sOralTeeth += ", ";
                        }
                        sOralTeeth += Resources.Qola.UIverbiage.NoTeeth;
                    }

                    var pharse15 = new Phrase();
                    pharse15.Add(new Chunk(Resources.Qola.UIverbiage.OralHygiene + ": ", fontBoldText));
                    pharse15.Add(new Chunk(oralHygieneType, tableFont));
                    if (sOralTeeth != "")
                    {
                        pharse15.Add(new Chunk("\t" + "(" + sOralTeeth + ")", tableFont));
                    }
                    PdfPCell oralHygiene = new PdfPCell(new Phrase(pharse15));

                    tblDressing.AddCell(oralHygiene);

                    string oralHygieneSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "21ON") != "")
                    {
                        oralHygieneSelected += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "13OI") != "")
                    {
                        if (oralHygieneSelected != "")
                        {
                            oralHygieneSelected += ", ";
                        }
                        oralHygieneSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "14OS") != "")
                    {
                        if (oralHygieneSelected != "")
                        {
                            oralHygieneSelected += ", ";
                        }
                        oralHygieneSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "15OA") != "")
                    {
                        if (oralHygieneSelected != "")
                        {
                            oralHygieneSelected += ", ";
                        }
                        oralHygieneSelected += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "22OD") != "")
                    {
                        if (oralHygieneSelected != "")
                        {
                            oralHygieneSelected += ", ";
                        }
                        oralHygieneSelected += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "84OS4") != "")
                    {
                        if (oralHygieneSelected != "")
                        {
                            oralHygieneSelected += ", ";
                        }
                        oralHygieneSelected += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "85SD4") != "")
                    {
                        if (oralHygieneSelected != "")
                        {
                            oralHygieneSelected += ", ";
                        }
                        oralHygieneSelected += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "86OP") != "")
                    {
                        if (oralHygieneSelected != "")
                        {
                            oralHygieneSelected += ", ";
                        }
                        oralHygieneSelected += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (oralHygieneSelected != "")
                    {
                        oralHygieneSelected = oralHygieneSelected.TrimEnd();
                        if (oralHygieneSelected.EndsWith(","))
                        {
                            oralHygieneSelected = oralHygieneSelected.TrimEnd(',');
                        }
                    }

                    PdfPCell oralHygieneCell = new PdfPCell(new Phrase(oralHygieneSelected.ToString(), tableFont));
                    oralHygieneCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    oralHygieneCell.MinimumHeight = 15f;
                    tblDressing.AddCell(oralHygieneCell);

                    string shavingType = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "23SA") != "")
                    {
                        shavingType += Resources.Qola.UIverbiage.AM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "24SP") != "")
                    {
                        if (shavingType != "")
                        {
                            shavingType += ", ";
                        }
                        shavingType += Resources.Qola.UIverbiage.PM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "25SB") != "")
                    {
                        if (shavingType != "")
                        {
                            shavingType += ", ";
                        }
                        shavingType += Resources.Qola.UIverbiage.BothAmPm;
                    }
                    if (shavingType != "")
                    {
                        shavingType = shavingType.TrimEnd();
                        if (shavingType.EndsWith(","))
                        {
                            shavingType = shavingType.TrimEnd(',');
                        }
                    }
                    var pharse16 = new Phrase();
                    pharse16.Add(new Chunk(Resources.Qola.UIverbiage.Shaving + ": ", fontBoldText));
                    pharse16.Add(new Chunk(shavingType, tableFont));
                    PdfPCell shaving = new PdfPCell(new Phrase(pharse16));

                    tblDressing.AddCell(shaving);

                    string shavingSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "26SN") != "")
                    {
                        shavingSelected += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "10SI") != "")
                    {
                        if (shavingSelected != "")
                        {
                            shavingSelected += ", ";
                        }
                        shavingSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "11SS") != "")
                    {
                        if (shavingSelected != "")
                        {
                            shavingSelected += ", ";
                        }
                        shavingSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "12SA") != "")
                    {
                        if (shavingSelected != "")
                        {
                            shavingSelected += ", ";
                        }
                        shavingSelected += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "27SD") != "")
                    {
                        if (shavingSelected != "")
                        {
                            shavingSelected += ", ";
                        }
                        shavingSelected += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "81SS4") != "")
                    {
                        if (shavingSelected != "")
                        {
                            shavingSelected += ", ";
                        }
                        shavingSelected += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "82SSD4") != "")
                    {
                        if (shavingSelected != "")
                        {
                            shavingSelected += ", ";
                        }
                        shavingSelected += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "83SP") != "")
                    {
                        if (shavingSelected != "")
                        {
                            shavingSelected += ", ";
                        }
                        shavingSelected += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (shavingSelected != "")
                    {
                        shavingSelected = shavingSelected.TrimEnd();
                        if (shavingSelected.EndsWith(","))
                        {
                            shavingSelected = shavingSelected.TrimEnd(',');
                        }
                    }
                    PdfPCell shavingCell = new PdfPCell(new Phrase(shavingSelected.ToString(), tableFont));
                    shavingCell.MinimumHeight = 15f;
                    shavingCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblDressing.AddCell(shavingCell);



                    string footType = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "99FA") != "")
                    {
                        footType += Resources.Qola.UIverbiage.AM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "100FP") != "")
                    {
                        if (footType != "")
                        {
                            footType += ", ";
                        }
                        footType += Resources.Qola.UIverbiage.PM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "101FB") != "")
                    {
                        if (footType != "")
                        {
                            footType += ", ";
                        }
                        footType += Resources.Qola.UIverbiage.BothAmPm;
                    }
                    if (footType != "")
                    {
                        footType = footType.TrimEnd();
                        if (footType.EndsWith(","))
                        {
                            footType = footType.TrimEnd(',');
                        }
                    }
                    var footpharse = new Phrase();
                    footpharse.Add(new Chunk(Resources.Qola.UIverbiage.FootCare + ": ", fontBoldText));
                    footpharse.Add(new Chunk(footType, tableFont));
                    PdfPCell foot = new PdfPCell(new Phrase(footpharse));

                    tblDressing.AddCell(foot);

                    string footSelected = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "87FI") != "")
                    {
                        if (footSelected != "")
                        {
                            footSelected += ", ";
                        }
                        footSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "88FS") != "")
                    {
                        if (footSelected != "")
                        {
                            footSelected += ", ";
                        }
                        footSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "89FA") != "")
                    {
                        if (footSelected != "")
                        {
                            footSelected += ", ";
                        }
                        footSelected += Resources.Qola.UIverbiage.Assisted;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "90FS4") != "")
                    {
                        if (footSelected != "")
                        {
                            footSelected += ", ";
                        }
                        footSelected += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "91FSD4") != "")
                    {
                        if (footSelected != "")
                        {
                            footSelected += ", ";
                        }
                        footSelected += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "92FP") != "")
                    {
                        if (footSelected != "")
                        {
                            footSelected += ", ";
                        }
                        footSelected += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (footSelected != "")
                    {
                        footSelected = footSelected.TrimEnd();
                        if (footSelected.EndsWith(","))
                        {
                            footSelected = footSelected.TrimEnd(',');
                        }
                    }
                    PdfPCell footCell = new PdfPCell(new Phrase(footSelected.ToString(), tableFont));
                    footCell.MinimumHeight = 15f;
                    footCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblDressing.AddCell(footCell);

                    string nailType = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "102NA") != "")
                    {
                        nailType += Resources.Qola.UIverbiage.AM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "103NP") != "")
                    {
                        if (nailType != "")
                        {
                            nailType += ", ";
                        }
                        nailType += Resources.Qola.UIverbiage.PM;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "104NB") != "")
                    {
                        if (nailType != "")
                        {
                            nailType += ", ";
                        }
                        nailType += Resources.Qola.UIverbiage.BothAmPm;
                    }
                    if (nailType != "")
                    {
                        nailType = nailType.TrimEnd();
                        if (nailType.EndsWith(","))
                        {
                            nailType = nailType.TrimEnd(',');
                        }
                    }
                    var nailpharse = new Phrase();
                    nailpharse.Add(new Chunk(Resources.Qola.UIverbiage.NailCare + ": ", fontBoldText));
                    nailpharse.Add(new Chunk(nailType, tableFont));
                    PdfPCell nail = new PdfPCell(new Phrase(nailpharse));

                    tblDressing.AddCell(nail);

                    string nailSelected = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "93NI") != "")
                    {
                        if (nailSelected != "")
                        {
                            nailSelected += ", ";
                        }
                        nailSelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "94NS") != "")
                    {
                        if (nailSelected != "")
                        {
                            nailSelected += ", ";
                        }
                        nailSelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "95NA") != "")
                    {
                        if (nailSelected != "")
                        {
                            nailSelected += ", ";
                        }
                        nailSelected += Resources.Qola.UIverbiage.Assisted;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "96NS4") != "")
                    {
                        if (nailSelected != "")
                        {
                            nailSelected += ", ";
                        }
                        nailSelected += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "97NSD4") != "")
                    {
                        if (nailSelected != "")
                        {
                            nailSelected += ", ";
                        }
                        nailSelected += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "98SP") != "")
                    {
                        if (nailSelected != "")
                        {
                            nailSelected += ", ";
                        }
                        nailSelected += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (nailSelected != "")
                    {
                        nailSelected = nailSelected.TrimEnd();
                        if (nailSelected.EndsWith(","))
                        {
                            nailSelected = nailSelected.TrimEnd(',');
                        }
                    }
                    PdfPCell nailCell = new PdfPCell(new Phrase(nailSelected.ToString(), tableFont));
                    nailCell.MinimumHeight = 15f;
                    nailCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblDressing.AddCell(nailCell);

                    PdfPCell assistanceCell = new PdfPCell(tblDressing);
                    assistanceCell.Colspan = 3;
                    AssessmentTable.AddCell(assistanceCell);



                    PdfPCell mobility = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mobility, fontHDBoldText));
                    mobility.HorizontalAlignment = Element.ALIGN_CENTER;
                    mobility.Colspan = 3;
                    mobility.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(mobility);

                    PdfPTable tblMobility = new PdfPTable(3);
                    tblMobility.WidthPercentage = 100f;
                    tblMobility.SetWidths(new float[] { 1f, 1f, 1f });
                    string mobilitySelected = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MI") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MS") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MA") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MD") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "35MS4") != "")
                    {
                        mobilitySelected += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "35MSD4") != "")
                    {
                        mobilitySelected += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "36MP") != "")
                    {
                        mobilitySelected += Resources.Qola.UIverbiage.PrivateSupportive;
                    }

                    if (mobilitySelected != "")
                    {
                        mobilitySelected = mobilitySelected.TrimEnd();
                        if (mobilitySelected.EndsWith(","))
                        {
                            mobilitySelected = mobilitySelected.TrimEnd(',');
                        }
                    }

                    PdfPCell mobilityCell = new PdfPCell(new Phrase(mobilitySelected.ToString(), tableFont));
                    mobilityCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    mobilityCell.MinimumHeight = 15f;
                    mobilityCell.Colspan = 3;
                    tblMobility.AddCell(mobilityCell);

                    PdfPCell transfer = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Transfers, fontBoldTextSubtitle));
                    transfer.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    transfer.HorizontalAlignment = Element.ALIGN_LEFT;
                    transfer.Colspan = 2;
                    tblMobility.AddCell(transfer);

                    string MechanicalLift = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "30MN") != "")
                        MechanicalLift = Resources.Qola.UIverbiage.NA;
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "18TT") != "")
                        MechanicalLift = Resources.Qola.UIverbiage.SittoStand;
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "21TE") != "")
                        MechanicalLift = Resources.Qola.UIverbiage.FullMechanical;
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "52TO") != "")
                        MechanicalLift = Resources.Qola.UIverbiage.Other;

                    Phrase MechanicalLiftc = new Phrase(Resources.Qola.UIverbiage.MechanicalLift, fontBoldText);

                    PdfPCell mechancialLift = new PdfPCell(new Phrase(MechanicalLiftc));
                    mechancialLift.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    mechancialLift.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblMobility.AddCell(mechancialLift);

                    string transferSeleected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "29TD") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "14TS") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "15TA") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "16T1") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Person1;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "17T2") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Person2;
                    }
                    if (transferSeleected != "")
                    {
                        transferSeleected = transferSeleected.TrimEnd();
                        if (transferSeleected.EndsWith(","))
                        {
                            transferSeleected = transferSeleected.TrimEnd(',');
                        }
                    }
                    PdfPCell transferedCell = new PdfPCell(new Phrase(transferSeleected.ToString(), tableFont));
                    transferedCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    transferedCell.Colspan = 2;
                    transferedCell.MinimumHeight = 15f;
                    tblMobility.AddCell(transferedCell);
                    transferSeleected = "";

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "30MN") != "")
                    {
                        transferSeleected = Resources.Qola.UIverbiage.NA;
                    }
                    PdfPCell MechanicLiftCell = new PdfPCell(new Phrase(MechanicalLift.ToString(), tableFont));
                    MechanicLiftCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    MechanicLiftCell.FixedHeight = 10f;
                    tblMobility.AddCell(MechanicLiftCell);


                    PdfPCell Walker = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Walker, fontBoldTextSubtitle));
                    Walker.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Walker.HorizontalAlignment = Element.ALIGN_LEFT;
                    Walker.Colspan = 3;
                    tblMobility.AddCell(Walker);

                    string walker = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "31WN") != "")
                    {
                        walker = Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "1WI") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "2WS") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "3WA") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "37WS4") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "38WSD4") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.SL4D;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "39WP") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (walker != "")
                    {
                        walker = walker.TrimEnd();
                        if (walker.EndsWith(","))
                        {
                            walker = walker.TrimEnd(',');
                        }
                    }
                    PdfPCell walkerCell = new PdfPCell(new Phrase(walker, tableFont));
                    walkerCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    walkerCell.MinimumHeight = 15f;
                    walkerCell.Colspan = 3;
                    tblMobility.AddCell(walkerCell);

                    walker = "";
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString()))
                    {
                        walker = dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString() != "undefined" ? dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString() : "";
                    }
                    var pharse23 = new Phrase();
                    pharse23.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));
                    pharse23.Add(new Chunk(walker, tableFont));
                    PdfPCell walkerType = new PdfPCell(new Phrase(pharse23));
                    walkerType.MinimumHeight = 15f;
                    walkerType.HorizontalAlignment = Element.ALIGN_LEFT;
                    walkerType.Colspan = 3;
                    tblMobility.AddCell(walkerType);

                    PdfPCell WheelChair = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wheelchair, fontBoldTextSubtitle));
                    WheelChair.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    WheelChair.HorizontalAlignment = Element.ALIGN_LEFT;
                    WheelChair.Colspan = 3;
                    tblMobility.AddCell(WheelChair);

                    string wheel = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "32WCN") != "")
                    {
                        wheel = Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "5HS") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "6HA") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "40WS4") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "41WSD4") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "42WP") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (wheel != "")
                    {
                        wheel = wheel.TrimEnd();
                        if (wheel.EndsWith(","))
                        {
                            wheel = wheel.TrimEnd(',');
                        }
                    }
                    PdfPCell wheelchairCell = new PdfPCell(new Phrase(wheel, tableFont));
                    wheelchairCell.MinimumHeight = 15f;
                    wheelchairCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    wheelchairCell.Colspan = 3;
                    tblMobility.AddCell(wheelchairCell);

                    wheel = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22HM") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Manual;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Electric;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Transport;
                    }
                    var pharse17 = new Phrase();
                    pharse17.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));
                    pharse17.Add(new Chunk(wheel, tableFont));
                    PdfPCell wheelChairType = new PdfPCell(new Phrase(pharse17));

                    wheelChairType.HorizontalAlignment = Element.ALIGN_LEFT;
                    wheelChairType.Colspan = 3;
                    tblMobility.AddCell(wheelChairType);

                    PdfPCell Cane = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cane, fontBoldTextSubtitle));
                    Cane.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Cane.HorizontalAlignment = Element.ALIGN_LEFT;
                    Cane.Colspan = 3;
                    tblMobility.AddCell(Cane);

                    string cane = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "33CN") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "8CS") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "9CA") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "43CS4") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "44CSD4") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "45CP") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (cane != "")
                    {
                        cane = cane.TrimEnd();
                        if (cane.EndsWith(","))
                        {
                            cane = cane.TrimEnd(',');
                        }
                    }
                    PdfPCell caneType = new PdfPCell(new Phrase(cane, tableFont));
                    caneType.HorizontalAlignment = Element.ALIGN_LEFT;
                    caneType.MinimumHeight = 15f;
                    caneType.Colspan = 3;
                    tblMobility.AddCell(caneType);

                    cane = "";
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString()))
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane = dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString();
                    }

                    var pharse21 = new Phrase();
                    pharse21.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));
                    pharse21.Add(new Chunk(cane, tableFont));
                    PdfPCell caneCell = new PdfPCell(new Phrase(pharse21));

                    caneCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    caneCell.Colspan = 3;
                    tblMobility.AddCell(caneCell);

                    PdfPCell Scooter = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Scooter, fontBoldTextSubtitle));
                    Scooter.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Scooter.HorizontalAlignment = Element.ALIGN_LEFT;
                    Scooter.Colspan = 3;
                    tblMobility.AddCell(Scooter);
                    string scooter = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "34SN") != "")
                    {
                        scooter = Resources.Qola.UIverbiage.NA;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "10SI") != "")
                    {
                        if (scooter != "")
                        {
                            scooter += ", ";
                        }
                        scooter = Resources.Qola.UIverbiage.Independent;
                    }
                    PdfPCell scooterSelected = new PdfPCell(new Phrase(scooter, tableFont));
                    scooterSelected.HorizontalAlignment = Element.ALIGN_LEFT;
                    scooterSelected.Colspan = 3;
                    scooterSelected.MinimumHeight = 15F;
                    tblMobility.AddCell(scooterSelected);

                    scooter = "";
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString()))
                    {
                        scooter = dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString();
                    }

                    var pharse18 = new Phrase();
                    pharse18.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));

                    pharse18.Add(new Chunk(scooter, tableFont));
                    PdfPCell scooterValue = new PdfPCell(new Phrase(pharse18));

                    scooterValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    scooterValue.Colspan = 3;
                    tblMobility.AddCell(scooterValue);

                    PdfPCell mobiityCell = new PdfPCell(tblMobility);
                    mobiityCell.Colspan = 3;
                    AssessmentTable.AddCell(mobiityCell);

                    PdfPTable tblOTPT = new PdfPTable(2);
                    tblOTPT.WidthPercentage = 100f;
                    tblOTPT.SetWidths(new float[] { 1f, 1f });
                    string ptValue = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "10PY") != "")
                    {
                        ptValue = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "11PN") != "")
                    {
                        ptValue = Resources.Qola.UIverbiage.No;
                    }
                    var pharse19 = new Phrase();
                    pharse19.Add(new Chunk(Resources.Qola.UIverbiage.PT + ": ", fontBoldText));
                    pharse19.Add(new Chunk(ptValue, tableFont));
                    PdfPCell PT = new PdfPCell(new Phrase(pharse19));

                    tblOTPT.AddCell(PT);

                    string getfreq = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PT_frequency"]);
                    var pharse20 = new Phrase();
                    pharse20.Add(new Chunk(Resources.Qola.UIverbiage.Frequency + "/" + Resources.Qola.UIverbiage.Agency + ": ", fontBoldText));
                    pharse20.Add(new Chunk(getfreq, tableFont));
                    PdfPCell PTFrequency = new PdfPCell(new Phrase(pharse20));
                    tblOTPT.AddCell(PTFrequency);

                    string otValue = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "12OY") != "")
                    {
                        otValue = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "13ON") != "")
                    {
                        otValue = Resources.Qola.UIverbiage.No;
                    }

                    var pharse221 = new Phrase();
                    pharse221.Add(new Chunk(Resources.Qola.UIverbiage.OT + ": ", fontBoldText));
                    pharse221.Add(new Chunk(otValue, tableFont));
                    PdfPCell OT = new PdfPCell(new Phrase(pharse221));

                    tblOTPT.AddCell(OT);

                    string getfreq1 = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_frequency"]);
                    var pharse22 = new Phrase();
                    pharse22.Add(new Chunk(Resources.Qola.UIverbiage.Frequency + "/" + Resources.Qola.UIverbiage.Agency + ": ", fontBoldText));
                    pharse22.Add(new Chunk(getfreq1, tableFont));
                    PdfPCell OTFrequency = new PdfPCell(new Phrase(pharse22));
                    tblOTPT.AddCell(OTFrequency);

                    PdfPCell ptptCell = new PdfPCell(tblOTPT);
                    ptptCell.Colspan = 3;
                    AssessmentTable.AddCell(ptptCell);

                    PdfPCell SafetyPasd = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SafetyPad, fontHDBoldText));
                    SafetyPasd.Colspan = 3;
                    SafetyPasd.HorizontalAlignment = Element.ALIGN_CENTER;
                    SafetyPasd.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(SafetyPasd);
                    string safety = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "18SN") != "")
                    {
                        safety = Resources.Qola.UIverbiage.NA;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "1SS") != "")
                    {
                        safety = Resources.Qola.UIverbiage.SeatLapbelt;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "7SM") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.Mattressonfloor;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "8ST") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.TransferPole;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "9SB") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.TableTray;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "10SE") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.Recliner;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "11SW") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.Tiltwc;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "26SO") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.Other;
                    }
                    PdfPCell SafetyPasdCell = new PdfPCell(new Phrase(safety, tableFont));
                    SafetyPasdCell.MinimumHeight = 15f;
                    AssessmentTable.AddCell(SafetyPasdCell);

                    Phrase safetyPOthers = new Phrase(Resources.Qola.UIverbiage.Others + ": ", fontBoldText);
                    safetyPOthers.Add(new Chunk(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd_other"].ToString(), tableFont));
                    PdfPCell SafetyPasdOtherCell = new PdfPCell(safetyPOthers);
                    SafetyPasdOtherCell.MinimumHeight = 15f;
                    AssessmentTable.AddCell(SafetyPasdOtherCell);


                    safety = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "18SN") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.NA;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "4SI") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.HalfRailRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "5SL") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.HalfRailLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "25SLR") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.LeftAndRightHalfRails;
                    }

                    Phrase safetyP = new Phrase(Resources.Qola.UIverbiage.Rails + ": ", fontBoldText);
                    safetyP.Add(new Chunk(safety, tableFont));
                    PdfPCell SafetyPasdRailCell = new PdfPCell(safetyP);


                    safety = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "27SN") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.NA;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "28NR") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.HalfRailRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "29NL") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.HalfRailLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "30SF") != "")
                    {
                        if (safety != "")
                        {
                            safety += ", ";
                        }
                        safety = Resources.Qola.UIverbiage.LeftAndRightHalfRails;
                    }

                    string nights = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "6SN") != "")
                    {
                        nights = " - " + Resources.Qola.UIverbiage.NightOnly;
                    }



                    Phrase safetyNightP = new Phrase(Resources.Qola.UIverbiage.Rails + ": ", fontBoldText);
                    safetyNightP.Add(new Chunk(safety, tableFont));
                    safetyNightP.Add(new Chunk(nights, tableFont));
                    PdfPCell SafetyPasdNightRailCell = new PdfPCell(safetyNightP);
                    AssessmentTable.AddCell(SafetyPasdNightRailCell);

                    PdfPCell Escorting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EscortingToAndFromMeals, fontBoldText));
                    Escorting.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Escorting.HorizontalAlignment = Element.ALIGN_CENTER;
                    PdfPTable tblEscorting = new PdfPTable(4);
                    tblEscorting.WidthPercentage = 100f;
                    tblEscorting.SetWidths(new float[] { 1f, 1f, 1f, 1f });

                    tblEscorting.AddCell(Escorting);
                    string breakFast = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "19BY") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "20BN") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell BreakFast = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Breakfast + ": " + breakFast, tableFont));
                    tblEscorting.AddCell(BreakFast);

                    breakFast = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "21LY") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "22LN") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell Lunch = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Lunch + ": " + breakFast, tableFont));
                    tblEscorting.AddCell(Lunch);

                    breakFast = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "23DY") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_safety_pasd"].ToString(), "24DN") != "")
                    {
                        breakFast = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell Dinner = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dinner + ": " + breakFast, tableFont));
                    tblEscorting.AddCell(Dinner);

                    PdfPCell meals = new PdfPCell(tblEscorting);
                    meals.Colspan = 3;
                    AssessmentTable.AddCell(meals);

                    PdfPCell Behaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Behaviour, fontHDBoldText));
                    Behaviour.Colspan = 2;
                    Behaviour.BackgroundColor = BaseColor.LIGHT_GRAY;
                    Behaviour.HorizontalAlignment = Element.ALIGN_CENTER;
                    AssessmentTable.AddCell(Behaviour);

                    PdfPCell Cognitive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cognitivefunction, fontHDBoldText));
                    Cognitive.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(Cognitive);

                    PdfPTable tblBehaviour = new PdfPTable(2);
                    tblBehaviour.WidthPercentage = 100f;
                    tblBehaviour.SetWidths(wthAssessed);
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "1BN") != "")
                    {
                        PdfPCell BehConcerns = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NOConcerns, tableFont));
                        tblBehaviour.AddCell(BehConcerns);
                        PdfPCell BehConcernsOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "1BN") != "")
                        {
                            BehConcernsOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "1BN"), fontBoldTextOP));
                        }
                        tblBehaviour.AddCell(BehConcernsOP);
                    }

                    //if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") != "")
                    //{
                    //  PdfPCell BehWanders = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wanders, tableFont));
                    //  tblBehaviour.AddCell(BehWanders);
                    //  PdfPCell BehWandersOP = new PdfPCell();
                    //  if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") != "")
                    //  {
                    //    BehWandersOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW"), fontBoldTextOP));
                    //  }
                    //  tblBehaviour.AddCell(BehWandersOP);
                    //}
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "4BA") != "")
                    {
                        PdfPCell BehAgitated = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agitated, tableFont));
                        tblBehaviour.AddCell(BehAgitated);
                        PdfPCell BehAgitatedOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "4BA") != "")
                        {
                            BehAgitatedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "4BA"), fontBoldTextOP));
                        }
                        tblBehaviour.AddCell(BehAgitatedOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "15BG") != "")
                    {
                        PdfPCell BehAggressive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Aggressive, tableFont));
                        tblBehaviour.AddCell(BehAggressive);
                        PdfPCell BehAggressiveOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "15BG") != "")
                        {
                            BehAggressiveOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "15BG"), fontBoldTextOP));
                        }
                        tblBehaviour.AddCell(BehAggressiveOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "5BD") != "")
                    {
                        PdfPCell BehDepression = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DePressed, tableFont));
                        tblBehaviour.AddCell(BehDepression);
                        PdfPCell BehDepressionOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "5BD") != "")
                        {
                            BehDepressionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "5BD"), fontBoldTextOP));
                        }
                        tblBehaviour.AddCell(BehDepressionOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "25BU") != "")
                    {
                        PdfPCell BehSuicidal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suicidal, tableFont));
                        tblBehaviour.AddCell(BehSuicidal);
                        PdfPCell BehSuicidalOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "25BU") != "")
                        {
                            BehSuicidalOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "25BU"), fontBoldTextOP));
                        }
                        tblBehaviour.AddCell(BehSuicidalOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "26BX") != "")
                    {
                        PdfPCell BehAnxiousBehaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AnxiousBehaviour, tableFont));
                        tblBehaviour.AddCell(BehAnxiousBehaviour);
                        PdfPCell BehAnxiousBehaviourOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "26BX") != "")
                        {
                            BehAnxiousBehaviourOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "26BX"), fontBoldTextOP));
                        }
                        tblBehaviour.AddCell(BehAnxiousBehaviourOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "29AW") != "")
                    {
                        PdfPCell BehWithdrawn = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Withdrawn, tableFont));
                        tblBehaviour.AddCell(BehWithdrawn);
                        PdfPCell BehWithdrawnOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "29AW") != "")
                        {
                            BehWithdrawnOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "10BP"), fontBoldTextOP));

                        }
                        tblBehaviour.AddCell(BehWithdrawnOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "6BE") != "")
                    {
                        PdfPCell BehDemanding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Demanding, tableFont));
                        tblBehaviour.AddCell(BehDemanding);
                        PdfPCell BehDemandingOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "6BE") != "")
                        {
                            BehDemandingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "6BE"), fontBoldTextOP));
                        }
                        tblBehaviour.AddCell(BehDemandingOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "7BI") != "")
                    {
                        PdfPCell BehDisruptive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Disruptive, tableFont));
                        tblBehaviour.AddCell(BehDisruptive);
                        PdfPCell BehDisruptiveOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "7BI") != "")
                        {
                            BehDisruptiveOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "7BI"), fontBoldTextOP));
                        }
                        tblBehaviour.AddCell(BehDisruptiveOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "8BH") != "")
                    {
                        PdfPCell BehHoarding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Hoarding, tableFont));
                        tblBehaviour.AddCell(BehHoarding);
                        PdfPCell BehHoardingOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "8BH") != "")
                        {
                            BehHoardingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "8BH"), fontBoldTextOP));
                        }
                        tblBehaviour.AddCell(BehHoardingOP);
                    }

                    PdfPCell cel = new PdfPCell(tblBehaviour);
                    cel.MinimumHeight = 30;
                    AssessmentTable.AddCell(cel);

                    PdfPTable tblBehaviour1 = new PdfPTable(2);
                    tblBehaviour1.WidthPercentage = 100f;
                    tblBehaviour1.SetWidths(wthAssessed);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "23BW") != "")
                    {
                        PdfPCell sad = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sad, tableFont));
                        tblBehaviour1.AddCell(sad);
                        PdfPCell sadOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "23BW") != "")
                        {
                            sadOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "23BW"), fontBoldTextOP));
                        }
                        tblBehaviour1.AddCell(sadOP);
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "9BN") != "")
                    {
                        PdfPCell BehIneffectiveCoping = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IneffectiveCoping, tableFont));
                        tblBehaviour1.AddCell(BehIneffectiveCoping);
                        PdfPCell BehIneffectiveCopingOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "9BN") != "")
                        {
                            BehIneffectiveCopingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "9BN"), fontBoldTextOP));
                        }
                        tblBehaviour1.AddCell(BehIneffectiveCopingOP);
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "11BR") != "")
                    {
                        PdfPCell BehResistsTreatmentorRefusesCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResistsRefusesCareAndOrTreatments, tableFont));
                        tblBehaviour1.AddCell(BehResistsTreatmentorRefusesCare);
                        PdfPCell BehResistsTreatmentorRefusesCareOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "11BR") != "")
                        {
                            BehResistsTreatmentorRefusesCareOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "11BR"), fontBoldTextOP));

                        }
                        tblBehaviour1.AddCell(BehResistsTreatmentorRefusesCareOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "17BS") != "")
                    {
                        PdfPCell BehSuspicious = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suspicious, tableFont));
                        tblBehaviour1.AddCell(BehSuspicious);
                        PdfPCell BehSuspiciousOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "17BS") != "")
                        {
                            BehSuspiciousOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "17BS"), fontBoldTextOP));
                        }
                        tblBehaviour1.AddCell(BehSuspiciousOP);
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "18BT") != "")
                    {
                        PdfPCell BehIngestForeignItems = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IngestsForeignItems, tableFont));
                        tblBehaviour1.AddCell(BehIngestForeignItems);
                        PdfPCell BehIngestForeignItemsOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "18BT") != "")
                        {
                            BehIngestForeignItemsOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "18BT"), fontBoldTextOP));
                        }
                        tblBehaviour1.AddCell(BehIngestForeignItemsOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "19BP") != "")
                    {
                        PdfPCell BehInappropriateSexualBehaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InappropriateSexualBehaviour, tableFont));
                        tblBehaviour1.AddCell(BehInappropriateSexualBehaviour);
                        PdfPCell BehInappropriateSexualBehaviourOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "19BP") != "")
                        {
                            BehInappropriateSexualBehaviourOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "19BP"), fontBoldTextOP));
                        }
                        tblBehaviour1.AddCell(BehInappropriateSexualBehaviourOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "20BO") != "")
                    {
                        PdfPCell BehInappropriateSmoking = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InappropriateUnsafeSmoker, tableFont));
                        tblBehaviour1.AddCell(BehInappropriateSmoking);
                        PdfPCell BehInappropriateSmokingOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "20BO") != "")
                        {
                            BehInappropriateSmokingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "20BO"), fontBoldTextOP));
                        }
                        tblBehaviour1.AddCell(BehInappropriateSmokingOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "21BB") != "")
                    {
                        PdfPCell BehSubstanceAbuse = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SubstanceAbuse, tableFont));
                        tblBehaviour1.AddCell(BehSubstanceAbuse);
                        PdfPCell BehSubstanceAbuseOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "21BB") != "")
                        {
                            BehSubstanceAbuseOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "21BB"), fontBoldTextOP));
                        }
                        tblBehaviour1.AddCell(BehSubstanceAbuseOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "28BA") != "")
                    {
                        PdfPCell BehAlcoholAbuse = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AlcoholAbuse, tableFont));
                        tblBehaviour1.AddCell(BehAlcoholAbuse);
                        PdfPCell BehAlcoholAbuseOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "28BA") != "")
                        {
                            BehAlcoholAbuseOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "28BA"), fontBoldTextOP));
                        }
                        tblBehaviour1.AddCell(BehAlcoholAbuseOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "24BK") != "")
                    {
                        PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SeeksAttention, tableFont));
                        tblBehaviour1.AddCell(BehSeeksAttention);
                        PdfPCell BehSeeksAttentionOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "24BK") != "")
                        {
                            BehSeeksAttentionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "24BK"), fontBoldTextOP));
                        }
                        tblBehaviour1.AddCell(BehSeeksAttentionOP);
                    }

                    PdfPTable tblBehaviourAdditional = new PdfPTable(2);
                    tblBehaviourAdditional.WidthPercentage = 100f;
                    tblBehaviourAdditional.SetWidths(new float[] { 1f, 1f });


                    PdfPTable tblBehaviourRails = new PdfPTable(2);
                    tblBehaviourRails.WidthPercentage = 100f;
                    tblBehaviourRails.SetWidths(wthAssessed);

                    PdfPCell railHeaderCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RiskOfHarmtoSelforOther, fontBoldTextSubtitle));
                    railHeaderCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    railHeaderCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    railHeaderCell.Colspan = 2;
                    tblBehaviourRails.AddCell(railHeaderCell);
                    //if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "30RS") != ""
                    //    || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "31RO") != ""
                    //   || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "32RN") != "")
                    //{
                    //    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "30RS") != "")
                    //    {
                    //        PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Self, tableFont));
                    //        tblBehaviourRails.AddCell(BehSeeksAttention);
                    //        PdfPCell BehSeeksAttentionOP = new PdfPCell();
                    //        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "30RS") != "")
                    //        {
                    //            BehSeeksAttentionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "30RS"), fontBoldTextOP));
                    //        }
                    //        tblBehaviourRails.AddCell(BehSeeksAttentionOP);
                    //    }
                    //    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "31RO") != "")
                    //    {
                    //        PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Others, tableFont));
                    //        tblBehaviourRails.AddCell(BehSeeksAttention);
                    //        PdfPCell BehSeeksAttentionOP = new PdfPCell();
                    //        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "31RO") != "")
                    //        {
                    //            BehSeeksAttentionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "31RO"), fontBoldTextOP));
                    //        }
                    //        tblBehaviourRails.AddCell(BehSeeksAttentionOP);
                    //    }
                    //    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "32RN") != "")
                    //    {
                    //        PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NOConcerns, tableFont));
                    //        tblBehaviourRails.AddCell(BehSeeksAttention);
                    //        PdfPCell BehSeeksAttentionOP = new PdfPCell();
                    //        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "32RN") != "")
                    //        {
                    //            BehSeeksAttentionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "32RN"), fontBoldTextOP));
                    //        }
                    //        tblBehaviourRails.AddCell(BehSeeksAttentionOP);
                    //    }
                    //}
                    //if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "30RHY") != ""
                    //      || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "31RHN") != "" 
                    //      || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "30RS") != "" 
                    //      || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "31RO") != "" 
                    //      || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "32RN") != "")
                    //{
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "30RHY") != ""
                        || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "30RS") != ""
                        || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "31RO") != "")
                    {
                        PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                        tblBehaviourRails.AddCell(BehSeeksAttention);
                        PdfPCell BehSeeksAttentionOP = new PdfPCell();
                        //if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "30RHY") != "" 
                        //    || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "30RS") != "" 
                        //    || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "31RO") != "")
                        //{
                        BehSeeksAttentionOP = new PdfPCell(new Phrase("P", fontBoldTextOP));
                        //}
                        tblBehaviourRails.AddCell(BehSeeksAttentionOP);
                    }
                    //if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "31RHN") != "" 
                    //    || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "32RN") != "")
                    else
                    {
                        PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                        tblBehaviourRails.AddCell(BehSeeksAttention);
                        PdfPCell BehSeeksAttentionOP = new PdfPCell();
                        //if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "31RHN") != "" 
                        //    || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "32RN") != "")
                        //{
                        BehSeeksAttentionOP = new PdfPCell(new Phrase("P", fontBoldTextOP));
                        //}
                        tblBehaviourRails.AddCell(BehSeeksAttentionOP);
                    }
                    //}
                    //else
                    //{
                    //  PdfPCell BehSeeksAttention = new PdfPCell();
                    //  BehSeeksAttention.Colspan = 2;
                    //  BehSeeksAttention.MinimumHeight = 20f;
                    //  tblBehaviourRails.AddCell(BehSeeksAttention);
                    //}
                    tblBehaviourAdditional.AddCell(tblBehaviourRails);



                    PdfPTable tblBehaviourSmoker = new PdfPTable(2);
                    tblBehaviourSmoker.WidthPercentage = 100f;
                    tblBehaviourSmoker.SetWidths(wthAssessed);

                    PdfPCell somkerHeaderCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Smoker, fontBoldTextSubtitle));
                    somkerHeaderCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    somkerHeaderCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    somkerHeaderCell.Colspan = 2;
                    tblBehaviourSmoker.AddCell(somkerHeaderCell);
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "33SY") != ""
                        || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "34SN") != "")
                    {
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "33SY") != "")
                        {
                            PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Intact, tableFont));
                            tblBehaviourSmoker.AddCell(BehSeeksAttention);
                            PdfPCell BehSeeksAttentionOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "33SY") != "")
                            {
                                BehSeeksAttentionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "33SY"), fontBoldTextOP));
                            }
                            tblBehaviourSmoker.AddCell(BehSeeksAttentionOP);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "34SN") != "")
                        {
                            PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                            tblBehaviourSmoker.AddCell(BehSeeksAttention);
                            PdfPCell BehSeeksAttentionOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "34SN") != "")
                            {
                                BehSeeksAttentionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "34SN"), fontBoldTextOP));
                            }
                            tblBehaviourSmoker.AddCell(BehSeeksAttentionOP);
                        }
                    }
                    else
                    {
                        PdfPCell BehSeeksAttention = new PdfPCell();
                        BehSeeksAttention.Colspan = 2;
                        BehSeeksAttention.MinimumHeight = 20f;
                        tblBehaviourSmoker.AddCell(BehSeeksAttention);
                    }
                    tblBehaviourAdditional.AddCell(tblBehaviourSmoker);


                    PdfPTable tblBehaviourAdditional1 = new PdfPTable(2);
                    tblBehaviourAdditional1.WidthPercentage = 100f;
                    tblBehaviourAdditional1.SetWidths(new float[] { 1f, 1f });

                    PdfPTable tblBehaviourStatus = new PdfPTable(2);
                    tblBehaviourStatus.WidthPercentage = 100f;
                    tblBehaviourStatus.SetWidths(wthAssessed);

                    PdfPCell StatusHeaderCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CognitiveStatus, fontBoldTextSubtitle));
                    StatusHeaderCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    StatusHeaderCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    StatusHeaderCell.Colspan = 2;
                    tblBehaviourStatus.AddCell(StatusHeaderCell);
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "35CY") != ""
                        || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "36CI") != "")
                    {
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "35CY") != "")
                        {
                            PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                            tblBehaviourStatus.AddCell(BehSeeksAttention);
                            PdfPCell BehSeeksAttentionOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "35CY") != "")
                            {
                                BehSeeksAttentionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "35CY"), fontBoldTextOP));
                            }
                            tblBehaviourStatus.AddCell(BehSeeksAttentionOP);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "36CI") != "")
                        {
                            PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Impaired, tableFont));
                            tblBehaviourStatus.AddCell(BehSeeksAttention);
                            PdfPCell BehSeeksAttentionOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "36CI") != "")
                            {
                                BehSeeksAttentionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "36CI"), fontBoldTextOP));
                            }
                            tblBehaviourStatus.AddCell(BehSeeksAttentionOP);
                        }
                    }
                    else
                    {
                        PdfPCell BehSeeksAttention = new PdfPCell();
                        BehSeeksAttention.Colspan = 2;
                        BehSeeksAttention.MinimumHeight = 20f;
                        tblBehaviourStatus.AddCell(BehSeeksAttention);
                    }
                    tblBehaviourAdditional1.AddCell(tblBehaviourStatus);


                    // Behaviour -- Risk Of Wandering
                    PdfPTable tblBehaviourRiskWander = new PdfPTable(2);
                    tblBehaviourRiskWander.WidthPercentage = 100f;
                    tblBehaviourRiskWander.SetWidths(wthAssessed);

                    PdfPCell RiskWanderHeaderCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.RiskOfWandering, fontBoldTextSubtitle));
                    RiskWanderHeaderCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    RiskWanderHeaderCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    RiskWanderHeaderCell.Colspan = 2;
                    tblBehaviourRiskWander.AddCell(RiskWanderHeaderCell);
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "37RWY") != ""
                        //|| getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "38RWN") != "" 
                        || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") != "")
                    {
                        //  if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "37RWY") != "" 
                        //      || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") != "")
                        //{
                        PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                        tblBehaviourRiskWander.AddCell(BehSeeksAttention);
                        PdfPCell BehSeeksAttentionOP = new PdfPCell();
                        //if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "37RWY") != "" 
                        //  || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") != "")
                        //{
                        BehSeeksAttentionOP = new PdfPCell(new Phrase("P", fontBoldTextOP));
                        //}
                        tblBehaviourRiskWander.AddCell(BehSeeksAttentionOP);
                        //}
                        //  if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "38RWN") != "" || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") == "")
                        //{
                        //  PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                        //  tblBehaviourRiskWander.AddCell(BehSeeksAttention);
                        //  PdfPCell BehSeeksAttentionOP = new PdfPCell();
                        //  if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "38RWN") != "" || getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour"].ToString(), "3BW") == "")
                        //  {
                        //    BehSeeksAttentionOP = new PdfPCell(new Phrase("P", fontBoldTextOP));
                        //  }
                        //  tblBehaviourRiskWander.AddCell(BehSeeksAttentionOP);
                        //}
                    }
                    else
                    {
                        //PdfPCell BehSeeksAttention = new PdfPCell();
                        //BehSeeksAttention.Colspan = 2;
                        //BehSeeksAttention.MinimumHeight = 20f;
                        //tblBehaviourRiskWander.AddCell(BehSeeksAttention);
                        PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                        tblBehaviourRiskWander.AddCell(BehSeeksAttention);
                        PdfPCell BehSeeksAttentionOP = new PdfPCell();
                        BehSeeksAttentionOP = new PdfPCell(new Phrase("P", fontBoldTextOP));
                        tblBehaviourRiskWander.AddCell(BehSeeksAttentionOP);
                    }
                    tblBehaviourAdditional1.AddCell(tblBehaviourRiskWander);


                    PdfPCell RiskRow = new PdfPCell(tblBehaviourAdditional);
                    RiskRow.Colspan = 2;
                    PdfPCell RiskRow1 = new PdfPCell(tblBehaviourAdditional1);
                    RiskRow1.Colspan = 2;



                    string txtbehaviournotes = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_behaviour_comments"].ToString());
                    var behaviournotespharse = new Phrase();
                    behaviournotespharse.Add(new Chunk(Resources.Qola.UIverbiage.OtherMentalPhysicalHealthInfo + ": ", fontBoldText));
                    behaviournotespharse.Add(new Chunk(txtbehaviournotes, tableFont));
                    PdfPCell txtbehaviournotesOP = new PdfPCell(new Phrase(behaviournotespharse));
                    txtbehaviournotesOP.Colspan = 3;
                    txtbehaviournotesOP.MinimumHeight = 40f;
                    tblBehaviour1.AddCell(txtbehaviournotes);
                    AssessmentTable.AddCell(tblBehaviour1);


                    PdfPTable tblCognitivefunction = new PdfPTable(2);
                    tblCognitivefunction.WidthPercentage = 100f;
                    tblCognitivefunction.SetWidths(wthAssessed);


                    PdfPCell Cognitivefunction1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cognitivefunction, fontBoldTextSubtitle));
                    Cognitivefunction1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Cognitivefunction1.HorizontalAlignment = Element.ALIGN_CENTER;

                    Cognitivefunction1.Colspan = 2;
                    tblCognitivefunction.AddCell(Cognitivefunction1);
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "1CU") != "")
                    {
                        PdfPCell CogUnimpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unimpaired, tableFont));
                        tblCognitivefunction.AddCell(CogUnimpaired);
                        PdfPCell CogUnimpairedOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "1CU") != "")
                        {
                            CogUnimpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "1CU"), fontBoldTextOP));
                        }
                        tblCognitivefunction.AddCell(CogUnimpairedOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "2CF") != "")
                    {
                        PdfPCell CogForgetful = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Forgetful, tableFont));
                        tblCognitivefunction.AddCell(CogForgetful);
                        PdfPCell CogForgetfulOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "2CF") != "")
                        {
                            CogForgetfulOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "2CF"), fontBoldTextOP));
                        }
                        tblCognitivefunction.AddCell(CogForgetfulOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "3CJ") != "")
                    {
                        PdfPCell CogJudgementPoor = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Judgementpoor, tableFont));
                        tblCognitivefunction.AddCell(CogJudgementPoor);
                        PdfPCell CogJudgementPoorOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "3CJ") != "")
                        {
                            CogJudgementPoorOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "3CJ"), fontBoldTextOP));
                        }
                        tblCognitivefunction.AddCell(CogJudgementPoorOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "4CC") != "")
                    {
                        PdfPCell CogConfused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Confused, tableFont));
                        tblCognitivefunction.AddCell(CogConfused);
                        PdfPCell CogConfusedOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "4CC") != "")
                        {
                            CogConfusedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "4CC"), fontBoldTextOP));
                        }
                        tblCognitivefunction.AddCell(CogConfusedOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "5CS") != "")
                    {

                        PdfPCell CogShorttermloss = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Shorttermloss, tableFont));
                        tblCognitivefunction.AddCell(CogShorttermloss);
                        PdfPCell CogShorttermlossOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "5CS") != "")
                        {
                            CogShorttermlossOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "5CS"), fontBoldTextOP));
                        }
                        tblCognitivefunction.AddCell(CogShorttermlossOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "6CI") != "")
                    {
                        PdfPCell CogSignificantImpairment = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Significantimpairment, tableFont));
                        tblCognitivefunction.AddCell(CogSignificantImpairment);
                        PdfPCell CogSignificantImpairmentOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "6CI") != "")
                        {
                            CogSignificantImpairmentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_cognitive_function"].ToString(), "6CI"), fontBoldTextOP));
                        }
                        tblCognitivefunction.AddCell(CogSignificantImpairmentOP);
                    }

                    PdfPCell emptycell1 = new PdfPCell();
                    emptycell1.Colspan = 2;
                    emptycell1.FixedHeight = 20f;
                    tblCognitivefunction.AddCell(emptycell1);


                    PdfPCell MemoryandOrientation = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Orientation, fontHDBoldText));
                    MemoryandOrientation.Colspan = 2;
                    MemoryandOrientation.BackgroundColor = BaseColor.LIGHT_GRAY;
                    tblCognitivefunction.AddCell(MemoryandOrientation);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "31MOD") != ""
                        )
                    {

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP") != "")
                        {
                            PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Person, tableFont));
                            tblCognitivefunction.AddCell(OriPerson);
                            PdfPCell OriPersonOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP") != "")
                            {
                                OriPersonOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "1MOP"), fontBoldTextOP));
                            }
                            tblCognitivefunction.AddCell(OriPersonOP);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL") != "")
                        {
                            PdfPCell OriPlace = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Place, tableFont));
                            tblCognitivefunction.AddCell(OriPlace);
                            PdfPCell OriPlaceOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL") != "")
                            {
                                OriPlaceOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "2MOL"), fontBoldTextOP));
                            }
                            tblCognitivefunction.AddCell(OriPlaceOP);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT") != "")
                        {
                            PdfPCell OriTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Time, tableFont));
                            tblCognitivefunction.AddCell(OriTime);
                            PdfPCell OriTimeOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT") != "")
                            {
                                OriTimeOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "3MOT"), fontBoldTextOP));
                            }
                            tblCognitivefunction.AddCell(OriTimeOP);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "31MOD") != "")
                        {
                            PdfPCell OriTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DementiaCare, tableFont));
                            tblCognitivefunction.AddCell(OriTime);
                            PdfPCell OriTimeOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "31MOD") != "")
                            {
                                OriTimeOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_memory"].ToString(), "31MOD"), fontBoldTextOP));
                            }
                            tblCognitivefunction.AddCell(OriTimeOP);
                        }
                    }
                    else
                    {
                        PdfPCell orientationempty = new PdfPCell();
                        orientationempty.Colspan = 2;
                        orientationempty.FixedHeight = 20f;
                        tblCognitivefunction.AddCell(orientationempty);
                    }

                    PdfPCell cognitiveCell = new PdfPCell(tblCognitivefunction);
                    cognitiveCell.Rowspan = 3;
                    AssessmentTable.AddCell(cognitiveCell);
                    AssessmentTable.AddCell(RiskRow);
                    AssessmentTable.AddCell(RiskRow1);
                    AssessmentTable.AddCell(txtbehaviournotesOP);

                    PdfPCell NutritionCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Nutrition, fontHDBoldText));
                    NutritionCell.Colspan = 3;
                    NutritionCell.MinimumHeight = 20f;
                    NutritionCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    NutritionCell.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(NutritionCell);

                    PdfPTable tblNutrition = new PdfPTable(1);
                    tblNutrition.WidthPercentage = 100f;
                    tblNutrition.SetWidths(new float[] { 1f });

                    PdfPCell Stautus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NutritionalStatus, fontBoldTextSubtitle));
                    Stautus.HorizontalAlignment = Element.ALIGN_CENTER;
                    Stautus.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(Stautus);

                    string nutrition = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "10SI") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "11SS") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "12SA") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "13SD") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "15TS4") != "")
                    {
                        nutrition += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "16SD4") != "")
                    {
                        nutrition += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "17TP") != "")
                    {
                        nutrition += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (nutrition != "")
                    {
                        nutrition = nutrition.TrimEnd();
                        if (nutrition.EndsWith(","))
                        {
                            nutrition = nutrition.TrimEnd(',');
                        }
                    }

                    PdfPCell StautusCell = new PdfPCell(new Phrase(nutrition, tableFont));
                    StautusCell.MinimumHeight = 15f;
                    tblNutrition.AddCell(StautusCell);
                    nutrition = "";

                    PdfPCell RiskCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Risk, fontBoldTextSubtitle));
                    RiskCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    RiskCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(RiskCell);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "11NN") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.NA;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "3NS") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Swallowing;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "4NH") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Chokingrisk;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutritional"].ToString(), "2NC") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.DifficultyChewing;
                    }
                    if (nutrition != "")
                    {
                        nutrition = nutrition.TrimEnd();
                        if (nutrition.EndsWith(","))
                        {
                            nutrition = nutrition.TrimEnd(',');
                        }
                    }
                    PdfPCell riskValue = new PdfPCell(new Phrase(nutrition, tableFont));
                    riskValue.MinimumHeight = 20f;
                    tblNutrition.AddCell(riskValue);
                    var phrase13 = new Phrase();
                    phrase13.Add(new Chunk(Resources.Qola.UIverbiage.AssistiveDevices + ": ", fontBoldText));
                    phrase13.Add(new Chunk(dsAssessmentDetails.Tables[0].Rows[0]["fd_risk_assistive_device"].ToString(), tableFont));
                    PdfPCell riskAssistive = new PdfPCell(new Phrase(phrase13));
                    tblNutrition.AddCell(riskAssistive);

                    nutrition = "";
                    string Texture = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "25TR") != "")
                        Texture = Resources.Qola.UIverbiage.DietReg;
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "26TS") != "")
                        Texture = Resources.Qola.UIverbiage.Soft;
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "27TM") != "")
                        Texture = Resources.Qola.UIverbiage.DietMinced;
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "28TP") != "")
                        Texture = Resources.Qola.UIverbiage.DietPureed;
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "29TF") != "")
                        Texture = Resources.Qola.UIverbiage.ThickenFluids;
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "30TO") != "")
                        Texture = Resources.Qola.UIverbiage.Other;


                    PdfPCell Texturev = new PdfPCell(new Phrase(Texture, tableFont));
                    Texturev.HorizontalAlignment = Element.ALIGN_LEFT;
                    Texturev.FixedHeight = 15f;

                    PdfPCell RiskTexture = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Texture, fontBoldTextSubtitle));
                    RiskTexture.HorizontalAlignment = Element.ALIGN_CENTER;
                    RiskTexture.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(RiskTexture);

                    tblNutrition.AddCell(Texturev);

                    AssessmentTable.AddCell(tblNutrition);
                    tblNutrition = new PdfPTable(1);
                    tblNutrition.WidthPercentage = 100f;
                    tblNutrition.SetWidths(new float[] { 1f });
                    PdfPCell diet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Diet, fontBoldTextSubtitle));
                    diet.HorizontalAlignment = Element.ALIGN_CENTER;
                    diet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(diet);

                    string dietValue = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "32DR") != "")
                        dietValue += Resources.Qola.UIverbiage.RegularDiet;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "33DV") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.VegetarianDiet;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "18DL") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.LowSodium;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "19DD") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.Diabetic;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "20LF") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.LowFat;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "21DC") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.LowCholesterol;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "22DP") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.LowPotassium;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "23DG") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.GlutenFree;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "24DV") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.LowVitaminK;
                    }
                    Phrase dietPharse = new Phrase();

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "2NC") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.Other;
                    }
                    dietPharse = new Phrase(dietValue, tableFont);
                    if (dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet_other"].ToString() != "")
                    {
                        Chunk otherChunk = new Chunk("\n" + Resources.Qola.UIverbiage.Other, fontBoldText);
                        dietPharse.Add(otherChunk);
                        dietPharse.Add(new Chunk(":\n" + dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet_other"].ToString(), tableFont));
                    }

                    PdfPCell dietValueCell = new PdfPCell(dietPharse);
                    tblNutrition.AddCell(dietValueCell);
                    AssessmentTable.AddCell(tblNutrition);

                    tblNutrition = new PdfPTable(1);
                    tblNutrition.WidthPercentage = 100f;
                    tblNutrition.SetWidths(new float[] { 1f });

                    PdfPCell allergies = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AllergiesSensitivities, fontBoldTextSubtitle));
                    allergies.HorizontalAlignment = Element.ALIGN_CENTER;
                    allergies.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(allergies);
                    PdfPCell allergiesNoteValue = new PdfPCell(new Phrase(PrintDietAllergies(resident.ID), tableFont));
                    allergiesNoteValue.MinimumHeight = 15f;
                    tblNutrition.AddCell(allergiesNoteValue);

                    PdfPCell appietite = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Appetite, fontBoldTextSubtitle));
                    appietite.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    appietite.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblNutrition.AddCell(appietite);

                    nutrition = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "1AG") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Good;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "2AF") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Fair;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "3AP") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Poor;
                    }
                    PdfPCell appietiteValue = new PdfPCell(new Phrase(nutrition, tableFont));
                    tblNutrition.AddCell(appietiteValue);

                    AssessmentTable.AddCell(tblNutrition);
                    PdfPCell Meals = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Meals, fontBoldTextSubtitle));
                    Meals.HorizontalAlignment = Element.ALIGN_LEFT;
                    Meals.Colspan = 3;
                    Meals.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AssessmentTable.AddCell(Meals);

                    PdfPTable tblMeals = new PdfPTable(1);
                    tblDressing.WidthPercentage = 100f;
                    tblDressing.SetWidths(new float[] { 1f });

                    string mealSelectedValue = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "13BN") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "14BM") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.MainDiningRoom;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "15BO") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.Onunit;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "16BT") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.TrayService;
                    }

                    var pharse461 = new Phrase();
                    pharse461.Add(new Chunk(Resources.Qola.UIverbiage.Breakfast + ": ", fontBoldText));
                    pharse461.Add(new Chunk(mealSelectedValue, tableFont));
                    PdfPCell mealsValue = new PdfPCell(new Phrase(pharse461));

                    tblMeals.AddCell(mealsValue);
                    mealSelectedValue = "";

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "17LN") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "18LM") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.MainDiningRoom;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "19LO") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.Onunit;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "20LT") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.TrayService;
                    }
                    var pharse47 = new Phrase();
                    pharse47.Add(new Chunk(Resources.Qola.UIverbiage.Lunch + ": ", fontBoldText));
                    pharse47.Add(new Chunk(mealSelectedValue, tableFont));
                    PdfPCell lunchValue = new PdfPCell(new Phrase(pharse47));

                    tblMeals.AddCell(lunchValue);
                    mealSelectedValue = "";

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "21DN") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "22DM") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.MainDiningRoom;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "23DO") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.Onunit;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_eating"].ToString(), "24DT") != "")
                    {
                        if (mealSelectedValue != "")
                        {
                            mealSelectedValue += ", ";
                        }
                        mealSelectedValue += Resources.Qola.UIverbiage.TrayService;
                    }

                    var pharse48 = new Phrase();
                    pharse48.Add(new Chunk(Resources.Qola.UIverbiage.Supper + ": ", fontBoldText));
                    pharse48.Add(new Chunk(mealSelectedValue, tableFont));
                    PdfPCell dinnerValue = new PdfPCell(new Phrase(pharse48));

                    tblMeals.AddCell(dinnerValue);
                    PdfPCell mealsCell = new PdfPCell(tblMeals);
                    mealsCell.Colspan = 3;
                    AssessmentTable.AddCell(mealsCell);

                    PdfPCell EliminationCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Elimination, fontBoldHeadText));
                    EliminationCell.Colspan = 3;
                    EliminationCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    EliminationCell.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(EliminationCell);

                    PdfPTable tblElimination = new PdfPTable(2);
                    tblElimination.WidthPercentage = 100f;
                    tblElimination.SetWidths(wthAssessed);

                    PdfPCell bladder = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bladder, fontBoldTextSubtitle));
                    bladder.HorizontalAlignment = Element.ALIGN_CENTER;
                    bladder.Colspan = 2;
                    bladder.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblElimination.AddCell(bladder);
                    string elimination = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC") != "")
                    {
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC") != "")
                        {
                            tblElimination.AddCell(BlaContinent);
                            PdfPCell BlaContinentOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC") != "")
                            {
                                BlaContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC"), fontBoldTextOP));
                            }
                            tblElimination.AddCell(BlaContinentOP);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI") != "")
                        {
                            PdfPCell BlaIncontinence = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Incontinence, tableFont));
                            tblElimination.AddCell(BlaIncontinence);
                            PdfPCell BlaInContinentOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI") != "")
                            {
                                BlaInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI"), fontBoldTextOP));
                            }
                            tblElimination.AddCell(BlaInContinentOP);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO") != "")
                        {
                            tblElimination.AddCell(BlaOCCInContinent);
                            PdfPCell BlaOCCInContinentOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO") != "")
                            {
                                BlaOCCInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO"), fontBoldTextOP));
                            }
                            tblElimination.AddCell(BlaOCCInContinentOP);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA") != "")
                        {
                            PdfPCell BlaCatheter = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Catheter, tableFont));
                            tblElimination.AddCell(BlaCatheter);
                            PdfPCell BlaCatheterOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA") != "")
                            {
                                BlaCatheterOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA"), fontBoldTextOP));
                            }
                            tblElimination.AddCell(BlaCatheterOP);
                        }
                    }
                    else
                    {
                        PdfPCell BlaCatheter = new PdfPCell();
                        BlaCatheter.Colspan = 2;
                        tblElimination.AddCell(BlaCatheter);
                    }

                    AssessmentTable.AddCell(tblElimination);

                    tblElimination = new PdfPTable(2);
                    tblElimination.WidthPercentage = 100f;
                    tblElimination.SetWidths(wthAssessed);

                    PdfPCell bowel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bowel, fontBoldTextSubtitle));
                    bowel.Colspan = 2;
                    bowel.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblElimination.AddCell(bowel);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1BC") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2BI") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BN") != "" ||
                        getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3BO") != "")
                    {
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1BC") != "")
                        {
                            tblElimination.AddCell(BlaContinent);
                            PdfPCell BowContinentOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1BC") != "")
                            {
                                BowContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1BC"), fontBoldTextOP));
                            }
                            tblElimination.AddCell(BowContinentOP);
                        }

                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2BI") != "")
                        {
                            PdfPCell BowIncontinence = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Incontinence, tableFont));
                            tblElimination.AddCell(BowIncontinence);
                            PdfPCell BowInContinentOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2BI") != "")
                            {
                                BowInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2BI"), fontBoldTextOP));
                            }
                            tblElimination.AddCell(BowInContinentOP);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BN") != "")
                        {
                            tblElimination.AddCell(BlaOCCInContinent);
                            PdfPCell BowOCCInContinentOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BN") != "")
                            {
                                BowOCCInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BN"), fontBoldTextOP));
                            }
                            tblElimination.AddCell(BowOCCInContinentOP);
                        }
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3BO") != "")
                        {
                            PdfPCell Ostomy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Ostomy, tableFont));
                            tblElimination.AddCell(Ostomy);
                            PdfPCell OstomyOP = new PdfPCell();
                            if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3BO") != "")
                            {
                                OstomyOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3BO"), fontBoldTextOP));
                            }
                            tblElimination.AddCell(OstomyOP);
                        }
                    }
                    else
                    {
                        PdfPCell BowelCatheter = new PdfPCell();
                        BowelCatheter.Colspan = 2;
                        tblElimination.AddCell(BowelCatheter);
                    }
                    AssessmentTable.AddCell(tblElimination);

                    tblElimination = new PdfPTable(2);
                    tblElimination.WidthPercentage = 100f;
                    tblElimination.SetWidths(wthAssessed);

                    PdfPCell ContinenceProducts = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ContinenceProducts, fontBoldTextSubtitle));
                    ContinenceProducts.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    ContinenceProducts.Colspan = 2;
                    tblElimination.AddCell(ContinenceProducts);

                    var getvalue = dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_Name"].ToString();
                    var pharse24 = new Phrase();
                    pharse24.Add(new Chunk(Resources.Qola.UIverbiage.Name + "/" + Resources.Qola.UIverbiage.Code + ": ", fontBoldText));
                    pharse24.Add(new Chunk(getvalue, tableFont));
                    PdfPCell nameCode = new PdfPCell(new Phrase(pharse24));
                    nameCode.Colspan = 2;
                    tblElimination.AddCell(nameCode);
                    string continenceSelectedValues = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "16BS") != "")
                    {
                        continenceSelectedValues = Resources.Qola.UIverbiage.SSmall;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "17BM") != "")
                    {
                        if (continenceSelectedValues != "")
                        {
                            continenceSelectedValues += ", ";
                        }
                        continenceSelectedValues += Resources.Qola.UIverbiage.MMedium;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "18BL") != "")
                    {
                        if (continenceSelectedValues != "")
                        {
                            continenceSelectedValues += ", ";
                        }
                        continenceSelectedValues += Resources.Qola.UIverbiage.LLarge;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "19BX") != "")
                    {
                        if (continenceSelectedValues != "")
                        {
                            continenceSelectedValues += ", ";
                        }
                        continenceSelectedValues += Resources.Qola.UIverbiage.XLExtraLarge;
                    }

                    var phrase11 = new Phrase();
                    phrase11.Add(new Chunk(Resources.Qola.UIverbiage.ContinenceProducts + ": ", fontBoldText));
                    phrase11.Add(new Chunk(continenceSelectedValues, tableFont));
                    PdfPCell continenceSelected = new PdfPCell(new Phrase(phrase11));

                    continenceSelected.Colspan = 2;
                    tblElimination.AddCell(continenceSelected);

                    var phrase12 = new Phrase();
                    phrase12.Add(new Chunk(Resources.Qola.UIverbiage.Supplier + ": ", fontBoldText));
                    phrase12.Add(new Chunk(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_supplier"].ToString(), tableFont));
                    PdfPCell continenceSupplier = new PdfPCell(new Phrase(phrase12));

                    continenceSupplier.Colspan = 2;
                    tblElimination.AddCell(continenceSupplier);

                    AssessmentTable.AddCell(tblElimination);

                    string newt1 = dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_completed_by"].ToString();
                    var pharse51 = new Phrase();
                    pharse51.Add(new Chunk(Resources.Qola.UIverbiage.Continence + " " + Resources.Qola.UIverbiage.AssessmentCompletedBy + ": ", fontBoldText));
                    pharse51.Add(new Chunk(newt1, tableFont));
                    PdfPCell Completedby = new PdfPCell(new Phrase(pharse51));

                    Completedby.Colspan = 2;
                    AssessmentTable.AddCell(Completedby);

                    PdfPCell CompletedDate = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_date"].ToString(), tableFont));
                    AssessmentTable.AddCell(CompletedDate);

                    PdfPCell Toileting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Toileting, fontHDBoldText));
                    Toileting.BackgroundColor = BaseColor.LIGHT_GRAY;
                    Toileting.HorizontalAlignment = Element.ALIGN_CENTER;
                    Toileting.Colspan = 3;
                    AssessmentTable.AddCell(Toileting);
                    string toileting = string.Empty;

                    PdfPTable tbltoilet = new PdfPTable(1);
                    tbltoilet.WidthPercentage = 100f;
                    tbltoilet.SetWidths(new float[] { 1f });

                    char indepentCheck = 'Y';

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "1TI") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.Independent;
                        indepentCheck = 'N';
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "3TN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "2TA") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.Assistance;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "4T1") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.OnePersonAssist;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "5T2") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.TwoPersonAssist;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "6TT") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.ToiletRoutine;
                    }
                    PdfPCell toiletCell = new PdfPCell(new Phrase(toileting, tableFont));
                    tbltoilet.AddCell(toiletCell);
                    AssessmentTable.AddCell(tbltoilet);

                    tbltoilet = new PdfPTable(1);
                    tbltoilet.WidthPercentage = 100f;
                    tbltoilet.SetWidths(new float[] { 1f });


                    PdfPCell bathRoomCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bathroom, tableFont));
                    tbltoilet.AddCell(bathRoomCell);
                    PdfPCell CommodeCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Commode, tableFont));
                    tbltoilet.AddCell(CommodeCell);
                    PdfPCell BedpanUrinalCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BedpanUrinal, tableFont));
                    tbltoilet.AddCell(BedpanUrinalCell);

                    PdfPCell toiletCellTable1 = new PdfPCell(tbltoilet);
                    AssessmentTable.AddCell(toiletCellTable1);


                    tbltoilet = new PdfPTable(1);
                    tbltoilet.WidthPercentage = 100f;
                    tbltoilet.SetWidths(new float[] { 1f });
                    toileting = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "7BD") != "")
                    {
                        toileting += Resources.Qola.UIverbiage.D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "8BE") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.E;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "9BN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.N;
                    }
                    if (indepentCheck == 'N')
                        toileting = "N/A";
                    PdfPCell bathRoom = new PdfPCell(new Phrase(toileting, tableFont));
                    bathRoom.MinimumHeight = 13f;
                    tbltoilet.AddCell(bathRoom);

                    toileting = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "10CD") != "")
                    {
                        toileting += Resources.Qola.UIverbiage.D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "11CE") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.E;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "12CN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.N;
                    }
                    if (indepentCheck == 'N')
                        toileting = "N/A";
                    PdfPCell commode = new PdfPCell(new Phrase(toileting, tableFont));
                    commode.MinimumHeight = 13f;
                    tbltoilet.AddCell(commode);
                    toileting = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "13UD") != "")
                    {
                        toileting += Resources.Qola.UIverbiage.D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "14UE") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.E;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "15UN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.N;
                    }
                    if (indepentCheck == 'N')
                        toileting = "N/A";
                    PdfPCell bedPan = new PdfPCell(new Phrase(toileting, tableFont));
                    bedPan.MinimumHeight = 13f;
                    tbltoilet.AddCell(bedPan);

                    PdfPCell toiletCellTable = new PdfPCell(tbltoilet);
                    toiletCellTable.Colspan = 3;
                    AssessmentTable.AddCell(toiletCellTable);

                    PdfPTable tblMedication = new PdfPTable(1);
                    tblMedication.WidthPercentage = 100f;
                    tblMedication.SetWidths(new float[] { 1f });

                    PdfPCell medication = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Medication1, fontHDBoldText));
                    medication.BackgroundColor = BaseColor.LIGHT_GRAY;
                    medication.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblMedication.AddCell(medication);
                    string Assistance = String.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "9AA") != "")
                    {
                        if (Assistance != "")
                        {
                            Assistance += ", ";
                        }
                        Assistance = Resources.Qola.UIverbiage.AB;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "10AS") != "")
                    {
                        if (Assistance != "")
                        {
                            Assistance += ", ";
                        }
                        Assistance = Resources.Qola.UIverbiage.SK;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "11AM") != "")
                    {
                        Assistance = Resources.Qola.UIverbiage.MB;
                    }
                    if (Assistance != "")
                    {
                        Assistance = Assistance.TrimEnd();
                        if (Assistance.EndsWith(","))
                        {
                            Assistance = Assistance.TrimEnd(',');
                        }
                    }
                    string Administration = String.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "12AO") != "")
                    {
                        if (Administration != "")
                        {
                            Administration += ", ";
                        }
                        Administration = Resources.Qola.UIverbiage.AdministrationON;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "13AQ") != "")
                    {
                        if (Administration != "")
                        {
                            Administration += ", ";
                        }
                        Administration = Resources.Qola.UIverbiage.QC;
                    }
                    if (Administration != "")
                    {
                        Administration = Administration.TrimEnd();
                        if (Administration.EndsWith(","))
                        {
                            Administration = Administration.TrimEnd(',');
                        }
                    }


                    string medicationSelected = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "1MS") != "")
                    {
                        if (medicationSelected != "")
                        {
                            medicationSelected += ", ";
                        }
                        medicationSelected += Resources.Qola.UIverbiage.Self;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "2ML") != "")
                    {
                        if (medicationSelected != "")
                        {
                            medicationSelected += ", ";
                        }
                        medicationSelected += Resources.Qola.UIverbiage.Home;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "3MA") != "")
                    {
                        if (medicationSelected != "")
                        {
                            medicationSelected += ", ";
                        }
                        medicationSelected += Resources.Qola.UIverbiage.Agency;
                    }
                    if (medicationSelected != "")
                    {
                        medicationSelected = medicationSelected.TrimEnd();
                        if (medicationSelected.EndsWith(", "))
                        {
                            medicationSelected = medicationSelected.TrimEnd(',');
                        }
                    }
                    var pharse46 = new Phrase();

                    if (Administration != "")
                    {
                        pharse46.Add(new Chunk(Resources.Qola.UIverbiage.Administration + ": ", fontBoldText));
                        pharse46.Add(new Chunk(Administration + "  ", tableFont));
                    }
                    else if (Assistance != "")
                    {
                        pharse46.Add(new Chunk(Resources.Qola.UIverbiage.Assistance + ": ", fontBoldText));
                        pharse46.Add(new Chunk(Assistance + "  ", tableFont));
                    }

                    PdfPCell medicationAdminCell = new PdfPCell(new Phrase(pharse46));

                    tblMedication.AddCell(medicationAdminCell);

                    Phrase completedBy = new Phrase(Resources.Qola.UIverbiage.CompletedBy + ":  ", fontBoldText);
                    if (medicationSelected != "")
                    {
                        completedBy.Add(new Chunk(medicationSelected, tableFont));
                    }
                    PdfPCell medicationCompletedCell = new PdfPCell(new Phrase(completedBy));

                    tblMedication.AddCell(medicationCompletedCell);

                    if (medicationSelected != "")
                    {
                        var pharse45 = new Phrase();
                        string new3 = dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_Pharmacy"].ToString();
                        pharse45.Add(new Chunk(Resources.Qola.UIverbiage.Pharmacy + ": ", fontBoldText));
                        pharse45.Add(new Chunk(new3, tableFont));
                        PdfPCell txtMedPharmacyprovider = new PdfPCell(new Phrase(pharse45));
                        medicationSelected = "";
                        tblMedication.AddCell(txtMedPharmacyprovider);
                    }
                    PdfPCell medicationCell = new PdfPCell(tblMedication);
                    medicationCell.Colspan = 3;
                    AssessmentTable.AddCell(medicationCell);

                    PdfPCell sensory = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SensoryAbilities, fontHDBoldText));
                    sensory.BackgroundColor = BaseColor.LIGHT_GRAY;
                    sensory.HorizontalAlignment = Element.ALIGN_CENTER;
                    sensory.Colspan = 3;
                    AssessmentTable.AddCell(sensory);
                    string sensorySelectedValues = string.Empty;

                    PdfPTable tblSensor = new PdfPTable(1);
                    tblSensor.WidthPercentage = 100f;
                    tblSensor.SetWidths(new float[] { 1f });

                    PdfPCell vision = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Vision, fontBoldTextSubtitle));
                    vision.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSensor.AddCell(vision);

                    string sensorSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "12VU") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Unimpaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "2VI") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Impaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "8VIL") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "9VIR") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "3VB") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Blind;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "6VL") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.BlindLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "7VR") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.BlindRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "4VG") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Glasses;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "5VC") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ContactLens;
                    }
                    if (sensorSelected != "")
                    {
                        sensorSelected = sensorSelected.TrimEnd();
                        if (sensorSelected.EndsWith(","))
                        {
                            sensorSelected = sensorSelected.TrimEnd(',');
                        }
                    }
                    PdfPCell visionCell = new PdfPCell(new Phrase(sensorSelected, tableFont));
                    visionCell.MinimumHeight = 55f;
                    tblSensor.AddCell(visionCell);

                    AssessmentTable.AddCell(tblSensor);

                    tblSensor = new PdfPTable(1);
                    tblSensor.WidthPercentage = 100f;
                    tblSensor.SetWidths(new float[] { 1f });

                    PdfPCell hear = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Hearing, fontBoldTextSubtitle));
                    hear.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSensor.AddCell(hear);

                    sensorSelected = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "14HU") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Unimpaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "2HI") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Impaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "9HM") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "10HP") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "3HD") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Deaf;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "11HE") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.DeafLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "12HA") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.DeafRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "15HH") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.HearingAid;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "4HL") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.HearingAidLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "5HR") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.HearingAidRight;
                    }
                    if (sensorSelected != "")
                    {
                        sensorSelected = sensorSelected.TrimEnd();
                        if (sensorSelected.EndsWith(","))
                        {
                            sensorSelected = sensorSelected.TrimEnd(',');
                        }
                    }
                    PdfPCell hearingCell = new PdfPCell(new Phrase(sensorSelected, tableFont));
                    hearingCell.MinimumHeight = 15f;
                    tblSensor.AddCell(hearingCell);

                    AssessmentTable.AddCell(tblSensor);
                    AssessmentTable.AddCell(new PdfPCell());

                    PdfPCell communication = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Communication + "/" + Resources.Qola.UIverbiage.Speech, fontHDBoldText));
                    communication.Colspan = 3;
                    communication.HorizontalAlignment = Element.ALIGN_CENTER;
                    communication.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(communication);

                    PdfPTable tblCommunication = new PdfPTable(2);
                    tblCommunication.WidthPercentage = 100f;
                    tblCommunication.SetWidths(wthAssessed);


                    PdfPCell txtLanguageSpoken = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Language, fontBoldText));
                    txtLanguageSpoken.Colspan = 2;
                    tblCommunication.AddCell(txtLanguageSpoken);
                    PdfPCell txtLanguageSpokenOP = new PdfPCell();
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString()))
                    {
                        txtLanguageSpokenOP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Spoken + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString(), tableFont));
                        txtLanguageSpokenOP.Colspan = 2;
                        txtLanguageSpokenOP.FixedHeight = 15;
                    }
                    tblCommunication.AddCell(txtLanguageSpokenOP);
                    AssessmentTable.AddCell(tblCommunication);

                    tblCommunication = new PdfPTable(2);
                    tblCommunication.WidthPercentage = 100f;
                    tblCommunication.SetWidths(wthAssessed);



                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "10SU") != "")
                    {
                        tblCommunication.AddCell(new Phrase(Resources.Qola.UIverbiage.Unimpaired, tableFont));
                        PdfPCell UnimpairedOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "10SU") != "")
                        {
                            UnimpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "10SU"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(UnimpairedOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL") != "")
                    {
                        PdfPCell ImpairedAbility = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ImpairedAbilityToCommunicateAndUnderstand, tableFont));
                        tblCommunication.AddCell(ImpairedAbility);
                        PdfPCell ImpairedAbilityOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL") != "")
                        {
                            ImpairedAbilityOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(ImpairedAbilityOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD") != "")
                    {
                        PdfPCell Difficultyincommunicating = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficultyincommunicating, tableFont));
                        tblCommunication.AddCell(Difficultyincommunicating);
                        PdfPCell DifficultyincommunicatingOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD") != "")
                        {
                            DifficultyincommunicatingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(DifficultyincommunicatingOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI") != "")
                    {
                        PdfPCell Difficultyinunderstanding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficultyinunderstanding, tableFont));
                        tblCommunication.AddCell(Difficultyinunderstanding);
                        PdfPCell DifficultyinunderstandingOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI") != "")
                        {
                            DifficultyinunderstandingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(DifficultyinunderstandingOP);
                    }

                    AssessmentTable.AddCell(tblCommunication);

                    tblCommunication = new PdfPTable(2);
                    tblCommunication.WidthPercentage = 100f;
                    tblCommunication.SetWidths(wthAssessed);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU") != "")
                    {
                        PdfPCell SpeUnderstandsInstruction = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Languagebarrier, tableFont));
                        tblCommunication.AddCell(SpeUnderstandsInstruction);
                        PdfPCell SpeUnderstandsInstructionOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU") != "")
                        {
                            SpeUnderstandsInstructionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(SpeUnderstandsInstructionOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS") != "")
                    {
                        PdfPCell SpeSpeechUnimpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.UnderstandsInstruction, tableFont));
                        tblCommunication.AddCell(SpeSpeechUnimpaired);
                        PdfPCell SpeSpeechUnimpairedOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS") != "")
                        {
                            SpeSpeechUnimpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(SpeSpeechUnimpairedOP);
                    }

                    string txtSpeCommentcy = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication_comments"].ToString());
                    var pharse40 = new Phrase();
                    pharse40.Add(new Chunk(Resources.Qola.UIverbiage.Other + ": ", fontBoldText));
                    pharse40.Add(new Chunk(txtSpeCommentcy, tableFont));
                    PdfPCell txtSpeCommentsOP = new PdfPCell(new Phrase(pharse40));

                    txtSpeCommentsOP.Colspan = 2;
                    tblCommunication.AddCell(txtSpeCommentsOP);

                    AssessmentTable.AddCell(tblCommunication);

                    PdfPTable tblWoundCare = new PdfPTable(1);
                    tblWoundCare.SetWidths(new float[] { 1f });
                    tblWoundCare.WidthPercentage = 100f;

                    PdfPCell woundCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Woundcare, fontHDBoldText));
                    woundCare.BackgroundColor = BaseColor.LIGHT_GRAY;
                    woundCare.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblWoundCare.AddCell(woundCare);
                    string woundCareSelecetd = string.Empty;
                    char WoundYesCheck = 'N';
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "Y") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "N") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.No;
                        WoundYesCheck = 'Y';
                    }

                    var pharse41 = new Phrase();
                    pharse41.Add(new Chunk(Resources.Qola.UIverbiage.Woundcare + ": ", fontBoldTextSubtitle));
                    pharse41.Add(new Chunk(woundCareSelecetd, tableFont));
                    PdfPCell woundCareCell = new PdfPCell(new Phrase(pharse41));

                    tblWoundCare.AddCell(woundCareCell);

                    woundCareSelecetd = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "1WH") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Home;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "2WA") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Agency;
                    }
                    if (WoundYesCheck == 'Y')
                        woundCareSelecetd = "N/A";
                    var pharse38 = new Phrase();
                    pharse38.Add(new Chunk(Resources.Qola.UIverbiage.Assistedby + ": ", fontBoldText));
                    pharse38.Add(new Chunk(woundCareSelecetd, tableFont));
                    PdfPCell woundCareAssisstedBy = new PdfPCell(new Phrase(pharse38));

                    tblWoundCare.AddCell(woundCareAssisstedBy);


                    string getwondercareagency = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_agency"].ToString());
                    if (WoundYesCheck == 'Y')
                        getwondercareagency = "N/A";
                    var pharse39 = new Phrase();
                    pharse39.Add(new Chunk(Resources.Qola.UIverbiage.Agencyname + ": ", fontBoldText));
                    pharse39.Add(new Chunk(getwondercareagency, tableFont));
                    PdfPCell woundCareAgency = new PdfPCell(new Phrase(pharse39));

                    tblWoundCare.AddCell(woundCareAgency);

                    woundCareSelecetd = "";
                    PdfPCell skinCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SkinCare, fontBoldTextSubtitle));
                    skinCare.BackgroundColor = BaseColor.LIGHT_GRAY;
                    skinCare.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblWoundCare.AddCell(skinCare);
                    char woundCareNoCheck = 'N';

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "67SN") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.No;
                        woundCareNoCheck = 'Y';
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "68SY") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Yes;
                    }
                    var pharse37 = new Phrase();
                    pharse37.Add(new Chunk(Resources.Qola.UIverbiage.SkinCare + ": ", fontBoldText));
                    pharse37.Add(new Chunk(woundCareSelecetd, tableFont));
                    PdfPCell skinCareCell = new PdfPCell(new Phrase(pharse37));

                    tblWoundCare.AddCell(skinCareCell);

                    string new1 = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_skincare_treatment"].ToString());
                    if (woundCareNoCheck == 'Y')
                        new1 = "N/A";
                    var pharse42 = new Phrase();
                    pharse42.Add(new Chunk(Resources.Qola.UIverbiage.SpecialTreatements + ": ", fontBoldText));
                    pharse42.Add(new Chunk(new1, tableFont));
                    PdfPCell skinCareTreatmentCell = new PdfPCell(new Phrase(pharse42));

                    tblWoundCare.AddCell(skinCareTreatmentCell);

                    PdfPCell woundCareTableCell = new PdfPCell(tblWoundCare);
                    woundCareTableCell.Colspan = 3;
                    AssessmentTable.AddCell(woundCareTableCell);

                    PdfPCell specialNeeds = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialNeeds, fontHDBoldText));
                    specialNeeds.Colspan = 3;
                    specialNeeds.HorizontalAlignment = Element.ALIGN_CENTER;
                    specialNeeds.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(specialNeeds);

                    PdfPTable oxygenTable = new PdfPTable(2);
                    oxygenTable.WidthPercentage = 100f;
                    oxygenTable.SetWidths(new float[] { 1f, 1f });

                    PdfPTable tblSpecialNeeds = new PdfPTable(1);
                    tblSpecialNeeds.WidthPercentage = 100f;
                    tblSpecialNeeds.SetWidths(new float[] { 1f });
                    PdfPCell oxygen = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.O2Oxygen, fontBoldTextSubtitle));
                    oxygen.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSpecialNeeds.AddCell(oxygen);

                    string speaiclNeedSelected = string.Empty;
                    char speaiclNeedNoCheck = 'N';
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7ON") != "")
                    {
                        speaiclNeedSelected = Resources.Qola.UIverbiage.NA;
                        speaiclNeedNoCheck = 'Y';
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "1OI") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "2OS") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "3OA") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9OD") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Dependent;
                    }

                    var pharse28 = new Phrase();
                    pharse28.Add(new Chunk(Resources.Qola.UIverbiage.O2Oxygen + ": ", fontBoldTextSubtitle));
                    pharse28.Add(new Chunk(speaiclNeedSelected, tableFont));
                    PdfPCell oxySelect = new PdfPCell(new Phrase(pharse28));

                    tblSpecialNeeds.AddCell(oxySelect);

                    Phrase o2Supplier = new Phrase(Resources.Qola.UIverbiage.Supplier, fontBoldText);


                    speaiclNeedSelected = ": ";
                    if (speaiclNeedNoCheck == 'Y')
                        speaiclNeedSelected += "N/A";
                    else
                        speaiclNeedSelected += dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_supplier"].ToString();

                    o2Supplier.Add(new Chunk(speaiclNeedSelected, tableFont));


                    PdfPCell oxySupplier = new PdfPCell(new Phrase(o2Supplier));
                    tblSpecialNeeds.AddCell(oxySupplier);


                    string o2Rate = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_rate"].ToString());
                    if (speaiclNeedNoCheck == 'Y')
                        o2Rate += "N/A";
                    var o2Ratepharse = new Phrase();
                    o2Ratepharse.Add(new Chunk(Resources.Qola.UIverbiage.Rate + " (" + Resources.Qola.UIverbiage.Lmin + ")" + ": ", fontBoldText));
                    o2Ratepharse.Add(new Chunk(o2Rate, tableFont));
                    PdfPCell txtRateOP = new PdfPCell(new Phrase(o2Ratepharse));

                    tblSpecialNeeds.AddCell(txtRateOP);
                    oxygenTable.AddCell(tblSpecialNeeds);

                    Phrase OxygenOther = new Phrase(Resources.Qola.UIverbiage.Others, fontBoldText);

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_O2_note"].ToString()))
                    {
                        OxygenOther.Add(new Chunk(":\n" + dsAssessmentDetails.Tables[0].Rows[0]["fd_O2_note"].ToString(), tableFont));
                    }
                    PdfPCell specislNeedO2Other = new PdfPCell(new Phrase(OxygenOther));
                    oxygenTable.AddCell(specislNeedO2Other);


                    PdfPCell oxyCell = new PdfPCell(oxygenTable);
                    oxyCell.Colspan = 3;
                    AssessmentTable.AddCell(oxyCell);


                    oxygenTable = new PdfPTable(2);
                    oxygenTable.WidthPercentage = 100f;
                    oxygenTable.SetWidths(new float[] { 1f, 1f });

                    tblSpecialNeeds = new PdfPTable(1);
                    tblSpecialNeeds.WidthPercentage = 100f;
                    tblSpecialNeeds.SetWidths(new float[] { 1f });
                    PdfPCell cpap = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CPAP, fontBoldTextSubtitle));
                    cpap.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSpecialNeeds.AddCell(cpap);
                    speaiclNeedSelected = "";
                    char CPAPCheckNA = 'N';
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9CN") != "")
                    {
                        speaiclNeedSelected = Resources.Qola.UIverbiage.NA;
                        CPAPCheckNA = 'Y';
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "4CI") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "5CS") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "6CA") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "17CD") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "13CS4") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "15CSD4") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "16CP") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (speaiclNeedSelected != "")
                    {
                        speaiclNeedSelected = speaiclNeedSelected.TrimEnd();
                        if (speaiclNeedSelected.EndsWith(","))
                        {
                            speaiclNeedSelected = speaiclNeedSelected.TrimEnd(',');
                        }
                    }
                    var pharse35 = new Phrase();
                    pharse35.Add(new Chunk(Resources.Qola.UIverbiage.CPAP + ": ", fontBoldText));
                    pharse35.Add(new Chunk(speaiclNeedSelected, tableFont));
                    PdfPCell cpapSelect = new PdfPCell(new Phrase(pharse35));

                    tblSpecialNeeds.AddCell(cpapSelect);

                    string gettxtspneed = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_other"].ToString());
                    if (CPAPCheckNA == 'Y')
                        gettxtspneed = "N/A";
                    var pharse36 = new Phrase();
                    pharse36.Add(new Chunk(Resources.Qola.UIverbiage.Supplier + ": ", fontBoldText));
                    pharse36.Add(new Chunk(gettxtspneed, tableFont));
                    PdfPCell txtSPNeedOtherOP = new PdfPCell(new Phrase(pharse36));

                    tblSpecialNeeds.AddCell(txtSPNeedOtherOP);

                    oxygenTable.AddCell(tblSpecialNeeds);


                    Phrase CpAPOther = new Phrase(Resources.Qola.UIverbiage.Others, fontBoldText);

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_comments"].ToString()))
                    {
                        CpAPOther.Add(new Chunk(":\n" + dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_comments"].ToString(), tableFont));
                    }
                    PdfPCell specislNeedOther = new PdfPCell(new Phrase(CpAPOther));
                    oxygenTable.AddCell(specislNeedOther);
                    PdfPCell cpapCell1 = new PdfPCell(oxygenTable);
                    cpapCell1.Colspan = 3;
                    AssessmentTable.AddCell(cpapCell1);


                    PdfPCell specialEquipement = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialEquipment, fontBoldHeadText));
                    specialEquipement.Colspan = 3;
                    specialEquipement.HorizontalAlignment = Element.ALIGN_CENTER;
                    specialEquipement.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(specialEquipement);

                    PdfPTable tblSpecialEquipment = new PdfPTable(2);
                    tblSpecialEquipment.WidthPercentage = 100f;
                    tblSpecialEquipment.SetWidths(wthAssessed);
                    PdfPCell specialEquipements = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialEquipment, fontBoldTextSubtitle));
                    specialEquipements.HorizontalAlignment = Element.ALIGN_CENTER;
                    specialEquipements.Colspan = 2;
                    specialEquipements.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSpecialEquipment.AddCell(specialEquipements);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "1SEN") != "")
                    {
                        tblSpecialEquipment.AddCell(NA);
                        PdfPCell NAOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "1SEN") != "")
                        {
                            NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "1SEN"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(NAOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "2SP") != "")
                    {
                        tblSpecialEquipment.AddCell(Pendant);
                        PdfPCell PendantOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "2SP") != "")
                        {
                            PendantOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "2SP"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(PendantOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "3SET") != "")
                    {
                        PdfPCell Stocking = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TEDstocking, tableFont));
                        tblSpecialEquipment.AddCell(Stocking);
                        PdfPCell StockingOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "3SET") != "")
                        {
                            StockingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "3SET"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(StockingOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "4SES") != "")
                    {
                        PdfPCell SupportBrace = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supportbrace, tableFont));
                        tblSpecialEquipment.AddCell(SupportBrace);
                        PdfPCell SupportBraceOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "4SES") != "")
                        {
                            SupportBraceOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "4SES"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(SupportBraceOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "5SEO") != "")
                    {
                        PdfPCell Prosthesis = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Prosthesis, tableFont));
                        tblSpecialEquipment.AddCell(Prosthesis);
                        PdfPCell ProsthesisOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "5SEO") != "")
                        {
                            ProsthesisOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "5SEO"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(ProsthesisOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "6SEO") != "")
                    {
                        PdfPCell SEOther = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, tableFont));
                        tblSpecialEquipment.AddCell(SEOther);
                        PdfPCell SEOtherOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "6SEO") != "")
                        {
                            SEOtherOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "6SEO"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(SEOtherOP);
                    }


                    var EquipmentOther = new Phrase();

                    EquipmentOther.Add(new Chunk(Resources.Qola.UIverbiage.Other + ": ", fontBoldText));
                    EquipmentOther.Add(new Chunk(Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_others"].ToString()), tableFont));
                    PdfPCell specialother = new PdfPCell(new Phrase(EquipmentOther));
                    specialother.Colspan = 2;
                    tblSpecialEquipment.AddCell(specialother);

                    string specialsDetails = string.Empty;
                    var pharse43 = new Phrase();
                    pharse43.Add(new Chunk(Resources.Qola.UIverbiage.Details + ": ", fontBoldText));
                    pharse43.Add(new Chunk(Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_details"].ToString()), tableFont));
                    PdfPCell specialDetails = new PdfPCell(new Phrase(pharse43));
                    specialDetails.Colspan = 2;
                    tblSpecialEquipment.AddCell(specialDetails);
                    PdfPCell speCell = new PdfPCell(tblSpecialEquipment);
                    speCell.Colspan = 3;
                    AssessmentTable.AddCell(speCell);

                    PdfPTable tblFamily = new PdfPTable(1);
                    tblFamily.WidthPercentage = 100f;
                    tblFamily.SetWidths(new float[] { 1f });

                    PdfPCell FamilySuupot = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilySuport, fontHDBoldText));
                    FamilySuupot.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    FamilySuupot.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblFamily.AddCell(FamilySuupot);
                    string Family = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "Y") != "")
                    {
                        Family = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "N") != "")
                    {
                        Family = Resources.Qola.UIverbiage.No;
                    }

                    var pharse34 = new Phrase();
                    pharse34.Add(new Chunk(Resources.Qola.UIverbiage.ResidentFamilymeetingtobearranged + ": ", fontBoldText));
                    pharse34.Add(new Chunk(Family, tableFont));
                    PdfPCell ResidentFamilymeetingtobearranged1 = new PdfPCell(new Phrase(pharse34));

                    tblFamily.AddCell(ResidentFamilymeetingtobearranged1);
                    Family = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "4IN") != "")
                    {
                        Family = Resources.Qola.UIverbiage.Never;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "1ID") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.daily;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "2IW") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.Weekly;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "3IM") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.Monthly;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "9FA") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.Annually;
                    }

                    var pharse33 = new Phrase();
                    pharse33.Add(new Chunk(Resources.Qola.UIverbiage.FamilyInvolement + ": ", fontBoldText));
                    pharse33.Add(new Chunk(Family, tableFont));
                    PdfPCell Familyinvolvement = new PdfPCell(new Phrase(pharse33));

                    tblFamily.AddCell(Familyinvolvement);


                    PdfPCell familyTableCell = new PdfPCell(tblFamily);
                    familyTableCell.Colspan = 3;
                    AssessmentTable.AddCell(familyTableCell);

                    PdfPTable tblImmunization = new PdfPTable(2);
                    tblImmunization.WidthPercentage = 100f;
                    tblImmunization.SetWidths(new float[] { 2f, 1f });

                    PdfPCell Immunization = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Immunization, fontHDBoldText));
                    Immunization.BackgroundColor = BaseColor.LIGHT_GRAY;
                    Immunization.HorizontalAlignment = Element.ALIGN_CENTER;
                    Immunization.Colspan = 2;
                    tblImmunization.AddCell(Immunization);
                    string immunization = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "5MU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "20MY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_mantoux"].ToString();
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "40MN") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell mantoux = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mantoux, tableFont));
                    tblImmunization.AddCell(mantoux);
                    PdfPCell mantouxValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(mantouxValue);
                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "7CU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "21CY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_chest_Xray"].ToString();
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "41CN") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell xRay = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ChestXRay, tableFont));
                    tblImmunization.AddCell(xRay);
                    PdfPCell xRayValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(xRayValue);

                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22PY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_pheumovax"].ToString();
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "42PN") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell Pneumovax = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pneumonia, tableFont));
                    tblImmunization.AddCell(Pneumovax);

                    PdfPCell PneumovaxValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(PneumovaxValue);

                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "3FU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22FY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_flu_vaccine"].ToString();
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "43FN") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell FluVaccine = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FluVaccine, tableFont));
                    tblImmunization.AddCell(FluVaccine);

                    PdfPCell FluVaccineValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(FluVaccineValue);

                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "23TY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_tetanus"].ToString();
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "44TN") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell Tetanus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tetanus, tableFont));
                    tblImmunization.AddCell(Tetanus);

                    PdfPCell TetanusValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(TetanusValue);

                    PdfPCell immunizationTableCell = new PdfPCell(tblImmunization);
                    immunizationTableCell.Colspan = 3;
                    AssessmentTable.AddCell(immunizationTableCell);

                    PdfPCell infection = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InfectiousDiseases, fontBoldTextSubtitle));
                    infection.HorizontalAlignment = Element.ALIGN_CENTER;
                    infection.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    infection.Colspan = 3;
                    AssessmentTable.AddCell(infection);
                    string infectionSelected = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "29MY") != "")
                    {
                        infectionSelected = Resources.Qola.UIverbiage.Yes;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "45MN") != "")
                    {
                        infectionSelected = Resources.Qola.UIverbiage.No;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "11MU") != "")
                    {
                        if (infectionSelected != "")
                        {
                            infectionSelected += ", ";
                        }
                        infectionSelected += Resources.Qola.UIverbiage.Unknow;
                    }



                    var MRSAvalue = new Phrase();
                    MRSAvalue.Add(new Chunk(Resources.Qola.UIverbiage.MRSA + ": ", fontBoldText));
                    MRSAvalue.Add(new Chunk(infectionSelected, tableFont));
                    PdfPCell infectionValue = new PdfPCell(new Phrase(MRSAvalue));
                    AssessmentTable.AddCell(infectionValue);



                    string getdiag = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_diagnosed"].ToString());

                    string getresol = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_resolved"].ToString());
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "29RU") != "" && getresol == "")
                    {
                        getresol = Resources.Qola.UIverbiage.Unknow;
                    }

                    var pharse30 = new Phrase();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "25IU") != "" && getdiag == "")
                    {
                        getdiag = Resources.Qola.UIverbiage.Unknow;
                    }

                    pharse30.Add(new Chunk(Resources.Qola.UIverbiage.Diagnosed + ": ", fontBoldText));

                    if (infectionSelected == Resources.Qola.UIverbiage.No)
                    {
                        getdiag = Resources.Qola.UIverbiage.NA;
                    }
                    pharse30.Add(new Chunk(getdiag, tableFont));

                    PdfPCell diagnosed = new PdfPCell(new Phrase(pharse30));

                    AssessmentTable.AddCell(diagnosed);

                    var pharse31 = new Phrase();
                    pharse31.Add(new Chunk(Resources.Qola.UIverbiage.Resolved + ": ", fontBoldText));
                    if (infectionSelected == Resources.Qola.UIverbiage.No)
                    {
                        getresol = Resources.Qola.UIverbiage.NA;
                    }
                    pharse31.Add(new Chunk(getresol, tableFont));
                    PdfPCell resolved = new PdfPCell(new Phrase(pharse31));
                    AssessmentTable.AddCell(resolved);

                    string VREinfectionSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "30VY") != "")
                    {
                        VREinfectionSelected = Resources.Qola.UIverbiage.Yes;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "46MN") != "")
                    {
                        VREinfectionSelected = Resources.Qola.UIverbiage.No;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "31VU") != "")
                    {
                        if (VREinfectionSelected != "")
                        {
                            VREinfectionSelected += ", ";
                        }
                        VREinfectionSelected += Resources.Qola.UIverbiage.Unknow;
                    }
                    var VREvalue = new Phrase();
                    VREvalue.Add(new Chunk(Resources.Qola.UIverbiage.VRE + ": ", fontBoldText));
                    VREvalue.Add(new Chunk(VREinfectionSelected, tableFont));
                    PdfPCell VREinfectionValue = new PdfPCell(new Phrase(VREvalue));
                    AssessmentTable.AddCell(VREinfectionValue);

                    string vrediag = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_VRE_diagnosed"].ToString());

                    string vreresol = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_VRE_resolved"].ToString());
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "37VRU") != "" && vreresol == "")
                    {
                        vreresol = Resources.Qola.UIverbiage.Unknow;
                    }

                    if (VREinfectionSelected == Resources.Qola.UIverbiage.No)
                    {
                        vreresol = Resources.Qola.UIverbiage.NA;
                    }
                    var VREdiagnosed = new Phrase();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "36VDU") != "" && vrediag == "")
                    {
                        vrediag = Resources.Qola.UIverbiage.Unknow;
                    }

                    if (VREinfectionSelected == Resources.Qola.UIverbiage.No)
                    {
                        vrediag = Resources.Qola.UIverbiage.NA;
                    }
                    VREdiagnosed.Add(new Chunk(Resources.Qola.UIverbiage.Diagnosed + ": ", fontBoldText));
                    VREdiagnosed.Add(new Chunk(vrediag, tableFont));
                    PdfPCell vrediagnose = new PdfPCell(new Phrase(VREdiagnosed));
                    AssessmentTable.AddCell(vrediagnose);

                    var VREresolved = new Phrase();
                    VREresolved.Add(new Chunk(Resources.Qola.UIverbiage.Resolved + ": ", fontBoldText));
                    VREresolved.Add(new Chunk(vreresol, tableFont));
                    PdfPCell vreresolve = new PdfPCell(new Phrase(VREresolved));
                    AssessmentTable.AddCell(vreresolve);

                    string cdiffinfectionSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "32CY") != "")
                    {
                        cdiffinfectionSelected = Resources.Qola.UIverbiage.Yes;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "47CN") != "")
                    {
                        cdiffinfectionSelected = Resources.Qola.UIverbiage.No;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "33CU") != "")
                    {
                        if (cdiffinfectionSelected != "")
                        {
                            cdiffinfectionSelected += ", ";
                        }
                        cdiffinfectionSelected += Resources.Qola.UIverbiage.Unknow;
                    }
                    var cdiffvalue = new Phrase();
                    cdiffvalue.Add(new Chunk(Resources.Qola.UIverbiage.CDiff + ": ", fontBoldText));
                    cdiffvalue.Add(new Chunk(cdiffinfectionSelected, tableFont));
                    PdfPCell cdiffinfectionValue = new PdfPCell(new Phrase(cdiffvalue));
                    AssessmentTable.AddCell(cdiffinfectionValue);

                    string cdiffdiag = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_Cdiff_diagnosed"].ToString());
                    string cdiffresol = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_Cdiff_resolved"].ToString());
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "39CRU") != "" && cdiffresol == "")
                    {
                        cdiffresol = Resources.Qola.UIverbiage.Unknow;
                    }

                    if (cdiffinfectionSelected == Resources.Qola.UIverbiage.No)
                    {
                        cdiffresol = Resources.Qola.UIverbiage.NA;
                    }

                    var cdiffdiagnosed = new Phrase();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "38CDU") != "" && cdiffdiag == "")
                    {
                        cdiffdiag = Resources.Qola.UIverbiage.Unknow;
                    }

                    if (cdiffinfectionSelected == Resources.Qola.UIverbiage.No)
                    {
                        cdiffdiag = Resources.Qola.UIverbiage.NA;
                    }
                    cdiffdiagnosed.Add(new Chunk(Resources.Qola.UIverbiage.Diagnosed + ": ", fontBoldText));
                    cdiffdiagnosed.Add(new Chunk(cdiffdiag, tableFont));
                    PdfPCell diffdiagnosed = new PdfPCell(new Phrase(cdiffdiagnosed));
                    AssessmentTable.AddCell(diffdiagnosed);

                    var cdiffresolved = new Phrase();
                    cdiffresolved.Add(new Chunk(Resources.Qola.UIverbiage.Resolved + ": ", fontBoldText));
                    cdiffresolved.Add(new Chunk(cdiffresol, tableFont));
                    PdfPCell diffresolved = new PdfPCell(new Phrase(cdiffresolved));
                    AssessmentTable.AddCell(diffresolved);
                    string otherNote = string.Empty;
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_infection_others"].ToString()))
                    {
                        otherNote = dsAssessmentDetails.Tables[0].Rows[0]["fd_infection_others"].ToString();
                    }
                    var otherValue = new Phrase();
                    otherValue.Add(new Chunk(Resources.Qola.UIverbiage.Other + ": ", fontBoldText));
                    otherValue.Add(new Chunk(otherNote, tableFont));
                    PdfPCell OtherCellValue = new PdfPCell(new Phrase(otherValue));
                    AssessmentTable.AddCell(OtherCellValue);


                    string otherDiagnosedDate = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_other_diagnosed"].ToString());
                    string otherResolvedDate = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_other_resolved"].ToString());
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "60IOD") != "" && otherDiagnosedDate == "")
                    {
                        otherDiagnosedDate = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "60IOD") == "" && otherDiagnosedDate == "" && otherNote == "")
                    {
                        otherDiagnosedDate = Resources.Qola.UIverbiage.NA;
                    }
                    var otherDiagnosed = new Phrase();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "61IOR") != "" && otherResolvedDate == "")
                    {
                        otherResolvedDate = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "61IOR") == "" && otherResolvedDate == "" && otherNote == "")
                    {
                        otherResolvedDate = Resources.Qola.UIverbiage.NA;
                    }
                    otherDiagnosed.Add(new Chunk(Resources.Qola.UIverbiage.Diagnosed + ": ", fontBoldText));
                    otherDiagnosed.Add(new Chunk(otherDiagnosedDate, tableFont));

                    PdfPCell POtherDiagnosedCell = new PdfPCell(new Phrase(otherDiagnosed));
                    AssessmentTable.AddCell(POtherDiagnosedCell);

                    var otherResolved = new Phrase();
                    otherResolved.Add(new Chunk(Resources.Qola.UIverbiage.Resolved + ": ", fontBoldText));
                    otherResolved.Add(new Chunk(otherResolvedDate, tableFont));
                    PdfPCell otherResolvedCell = new PdfPCell(new Phrase(otherResolved));
                    AssessmentTable.AddCell(otherResolvedCell);

                    doc.Add(AssessmentTable);

                }

            }
        }
        catch (Exception ex)
        {
            Log.Write("Progressive Report PrintResidentCareAssessmentP3 | " + ex.Message.ToString());
        }
        return AssessmentTable;
    }

    public PdfPTable EmptyPrint(DataSet dsAssessmentDetails, Document doc, int iCarePlanId)
    {
        string exception = string.Empty;
        string assessmentDate = string.Empty;
        int assessmentValue = 0;
        string userName = string.Empty;
        string userType = string.Empty;
        string completedOn = string.Empty;
        Common.Residents resident;
        PdfPTable AssessmentTable = new PdfPTable(3);
        AssessmentTable.WidthPercentage = 100f;
        float[] wthHead = new float[] { 1f, 1f, 1f };
        AssessmentTable.SetWidths(wthHead);
        AssessmentTable.SpacingBefore = 5f;
        try
        {
            resident = new Common.Residents();
            if (Session["ResidentStatus"] != null && Session["ResidentStatus"].ToString() == "I")
            {
                resident = DAL.Residents.GetInActiveResidentById(Convert.ToInt32(Session["ResidentId"]));
            }
            else
            {
                resident = DAL.Residents.GetResidentById(Convert.ToInt32(Session["ResidentId"]));
            }
            string residentnamefooter = resident.LastName + " " + resident.FirstName;
            string suitenofooter = resident.SuiteNo;
            string reportname = "Resident Care Assessment";


            if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
            {
                if (iCarePlanId == 0)
                {
                    dsAssessmentDetails = DAL.PlanOfCare.GetPlanOfCare(Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_id"]));
                }
                else
                {
                    dsAssessmentDetails = DAL.PlanOfCare.GetPlanOfCare(iCarePlanId);
                }
                if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
                {
                    userName = dsAssessmentDetails.Tables[0].Rows[0]["As_fd_last_name"].ToString() + ", " + dsAssessmentDetails.Tables[0].Rows[0]["As_fd_first_name"].ToString();
                    userType = dsAssessmentDetails.Tables[0].Rows[0]["As_fd_user_type"].ToString();
                    DateTime de = Convert.ToDateTime(dsAssessmentDetails.Tables[0].Rows[0]["fd_modified_on"]);
                    completedOn = de.ToString("MMMM dd, yyyy");
                }
                Font tableFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.NORMAL, BaseColor.BLACK);
                Font fontHDBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                Font fontBoldTextSubtitle = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 9, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                Font fontBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 8, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                Font fontLargeBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                string fontpath = Server.MapPath(".");
                BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
                Font fontBoldTextOP = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);

                iTextSharp.text.Font fontFooter = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.ITALIC, BaseColor.DARK_GRAY);
                iTextSharp.text.Font fontGeneralText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 11, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
                iTextSharp.text.Font fontBoldHeadText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 12, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                iTextSharp.text.Font fontCellHeader = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
                string modify = userName + ", " + userType + ", " + completedOn;

                doc = new Document(PageSize.A4, 20, 20, 25, 15);
                System.IO.MemoryStream mstream = new System.IO.MemoryStream();
                PdfWriter writer = PdfWriter.GetInstance(doc, mstream);

                writer.PageEvent = new pdfHeaderFooterAssessment(residentnamefooter, suitenofooter, reportname, modify);
                doc.Open();
                PdfPTable tblHeader = new PdfPTable(4);
                tblHeader.WidthPercentage = 100f;
                float[] headerWidth = new float[] { 1f, 1f, 1f, 0.32f };
                tblHeader.SetWidths(headerWidth);
                tblHeader.SpacingBefore = 5f;


                PdfPCell hdCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentName + " : ", fontBoldText));
                hdCell1.Border = 0;
                tblHeader.AddCell(hdCell1);

                PdfPCell hdCell2 = new PdfPCell(new Phrase(resident.LastName + ", " + resident.FirstName, fontBoldText));

                hdCell2.Border = 0;
                hdCell2.PaddingLeft = -100;
                hdCell2.HorizontalAlignment = Element.ALIGN_LEFT;
                tblHeader.AddCell(hdCell2);

                PdfPCell hdCell3 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suite + " # : " + resident.SuiteNo, fontBoldText));
                hdCell3.Border = 0;
                hdCell3.Colspan = 2;
                hdCell3.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(hdCell3);

                assessmentValue = Convert.ToInt32(dsAssessmentDetails.Tables[0].Rows[0]["fd_id"]);
                PdfPCell cellAssDate;
                if (assessmentValue != 0)
                {
                    assessmentDate = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_date"]);
                }

                cellAssDate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + " : ", fontBoldText));
                cellAssDate.Border = 0;
                cellAssDate.Colspan = 3;
                cellAssDate.PaddingRight = -12;
                cellAssDate.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(cellAssDate);

                cellAssDate = new PdfPCell(new Phrase(assessmentDate, fontBoldText));
                cellAssDate.Border = 0;
                cellAssDate.HorizontalAlignment = Element.ALIGN_RIGHT;
                tblHeader.AddCell(cellAssDate);

                if (dsAssessmentDetails.Tables[0].Rows.Count > 0)
                {
                    doc.Add(tblHeader);
                    float[] wthAssessed = new float[] { 8f, 1f };


                    PdfPCell spaceCell1 = new PdfPCell(new Phrase(""));
                    spaceCell1.Colspan = 2;
                    spaceCell1.FixedHeight = 8;
                    spaceCell1.Border = 0;

                    PdfPCell BlaContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Continent, tableFont));
                    PdfPCell BlaOCCInContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OCCInContinent, tableFont));
                    PdfPCell BlaInContinent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InContinent, tableFont));
                    PdfPCell Independent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    PdfPCell Supervised = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervised, tableFont));
                    PdfPCell HomeAMCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Home, tableFont));
                    PdfPCell AgencyAMCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agency, tableFont));
                    PdfPCell Assisted = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assisted, tableFont));

                    PdfPCell OSats = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sats, tableFont));
                    PdfPCell ForeWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ForeWheel, tableFont));
                    PdfPCell NA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    PdfPCell TwoWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TwoWheel, tableFont));
                    PdfPCell NoWheel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NoWheel, tableFont));
                    PdfPCell Yes = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                    PdfPCell No = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                    PdfPCell NutIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    PdfPCell Elimination = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Elimination, fontHDBoldText));
                    PdfPCell DependentCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                    PdfPCell AM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AM, tableFont));
                    PdfPCell PM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PM, tableFont));
                    PdfPCell AMPM = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BothAmPm, tableFont));
                    PdfPCell Pendant = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pendant, tableFont));

                    PdfPCell dependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                    PdfPCell na = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NA, tableFont));
                    Elimination.Colspan = 2;
                    Elimination.BackgroundColor = BaseColor.LIGHT_GRAY;
                    PdfPCell txtBlaComments = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Comments, tableFont));
                    txtBlaComments.Colspan = 2;


                    PdfPTable tblBP = new PdfPTable(2);
                    tblBP.WidthPercentage = 100f;
                    tblBP.SetWidths(wthAssessed);


                    PdfPCell ModifyBP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.VitalSign, fontBoldTextSubtitle));
                    ModifyBP.HorizontalAlignment = Element.ALIGN_CENTER;
                    ModifyBP.Colspan = 3;
                    ModifyBP.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(ModifyBP);


                    Phrase bpPhrase = new Phrase(Resources.Qola.UIverbiage.BP + ": ", fontBoldText);
                    PdfPCell ModifyBP1 = new PdfPCell(new Phrase(bpPhrase));
                    ModifyBP1.HorizontalAlignment = Element.ALIGN_LEFT;
                    ModifyBP1.Colspan = 2;
                    tblBP.AddCell(ModifyBP1);
                    AssessmentTable.AddCell(tblBP);

                    PdfPTable tblPulse = new PdfPTable(2);
                    tblPulse.WidthPercentage = 100f;
                    tblPulse.SetWidths(wthAssessed);

                    Phrase pulse = new Phrase(Resources.Qola.UIverbiage.Pulse + ": ", fontBoldText);

                    PdfPCell ModifyPulse1 = new PdfPCell(new Phrase(pulse));
                    ModifyPulse1.HorizontalAlignment = Element.ALIGN_LEFT;
                    ModifyPulse1.Colspan = 2;
                    tblPulse.AddCell(ModifyPulse1);
                    AssessmentTable.AddCell(tblPulse);


                    PdfPTable tblWeight = new PdfPTable(2);
                    tblWeight.WidthPercentage = 100f;
                    tblWeight.SetWidths(wthAssessed);


                    Phrase weight = new Phrase(Resources.Qola.UIverbiage.WeightLBS + ": ", fontBoldText);

                    PdfPCell ModifyWeight = new PdfPCell(new Phrase(weight));
                    ModifyWeight.HorizontalAlignment = Element.ALIGN_LEFT;
                    ModifyWeight.Colspan = 2;
                    tblWeight.AddCell(ModifyWeight);
                    AssessmentTable.AddCell(tblWeight);

                    PdfPTable AMCare = new PdfPTable(4);
                    AMCare.WidthPercentage = 100f;
                    AMCare.SetWidths(new float[] { 1f, .2f, 1f, .2f });

                    PdfPCell PersonalHygine = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PersonalHygiene, fontHDBoldText));
                    PersonalHygine.HorizontalAlignment = Element.ALIGN_CENTER;
                    PersonalHygine.Colspan = 3;
                    PersonalHygine.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(PersonalHygine);

                    PdfPCell amCareCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AMcare, fontBoldTextSubtitle));
                    amCareCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    amCareCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    amCareCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AssessmentTable.AddCell(amCareCell);

                    PdfPCell PMCareCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PMCare, fontBoldTextSubtitle));
                    PMCareCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    PMCareCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AssessmentTable.AddCell(PMCareCell);


                    PdfPCell BathingCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bathing, fontBoldTextSubtitle));
                    BathingCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    BathingCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AssessmentTable.AddCell(BathingCell);

                    PdfPCell AMIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    AMCare.AddCell(AMIndependent);
                    PdfPCell AMIndependentOP = new PdfPCell();
                    AMCare.AddCell(AMIndependentOP);

                    PdfPCell AMSupervised = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervised, tableFont));
                    AMCare.AddCell(AMSupervised);
                    PdfPCell SupervisedOP = new PdfPCell();
                    AMCare.AddCell(SupervisedOP);

                    PdfPCell AMAssisted = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assisted, tableFont));
                    AMCare.AddCell(AMAssisted);
                    PdfPCell AMAssistedOP = new PdfPCell();
                    AMCare.AddCell(AMAssistedOP);

                    PdfPCell AMdependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                    AMCare.AddCell(AMdependent);
                    PdfPCell AMdependentOP = new PdfPCell();
                    AMCare.AddCell(AMdependentOP);

                    PdfPCell AMSL4 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SL4, tableFont));
                    AMCare.AddCell(AMSL4);
                    PdfPCell AMSL4OP = new PdfPCell();
                    AMCare.AddCell(AMSL4OP);


                    PdfPCell AMSL4D = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SL4D, tableFont));
                    AMCare.AddCell(AMSL4D);
                    PdfPCell AMSL4DOP = new PdfPCell();
                    AMCare.AddCell(AMSL4DOP);


                    PdfPCell AMPrivateSupportive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PrivateSupportive, tableFont));
                    AMCare.AddCell(AMPrivateSupportive);
                    PdfPCell AMPrivateSupportiveOP = new PdfPCell();
                    AMCare.AddCell(AMPrivateSupportiveOP);

                    PdfPCell AMEmptyCell = new PdfPCell();
                    AMEmptyCell.Colspan = 2;
                    AMCare.AddCell(AMEmptyCell);

                    var pharse2 = new Phrase();
                    pharse2.Add(new Chunk(Resources.Qola.UIverbiage.Assistedby + ": ", fontBoldText));
                    PdfPCell amCareAssistedByCell = new PdfPCell(new Phrase(pharse2));
                    amCareAssistedByCell.Colspan = 4;
                    AMCare.AddCell(amCareAssistedByCell);

                    var pharse3 = new Phrase();
                    pharse3.Add(new Chunk(Resources.Qola.UIverbiage.Agencyname + ": ", fontBoldText));
                    PdfPCell amCareAgemcy = new PdfPCell(new Phrase(pharse3));
                    amCareAgemcy.Colspan = 4;
                    AMCare.AddCell(amCareAgemcy);


                    var pharse4 = new Phrase();
                    pharse4.Add(new Chunk(Resources.Qola.UIverbiage.PreferredTime + ": ", fontBoldText));
                    PdfPCell amCarePreferredTime = new PdfPCell(new Phrase(pharse4));
                    amCarePreferredTime.Colspan = 4;
                    AMCare.AddCell(amCarePreferredTime);

                    PdfPTable tblAmBathType = new PdfPTable(6);
                    tblAmBathType.WidthPercentage = 100f;
                    tblAmBathType.SetWidths(new float[] { 1f, .2f, 1f, .2f, 1f, .2f });

                    PdfPCell AMBath = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bath, tableFont));
                    tblAmBathType.AddCell(AMBath);
                    PdfPCell AMBathOP = new PdfPCell();
                    tblAmBathType.AddCell(AMBathOP);

                    PdfPCell AMShower = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Shower, tableFont));
                    tblAmBathType.AddCell(AMShower);
                    PdfPCell AMShowerOP = new PdfPCell();
                    tblAmBathType.AddCell(AMShowerOP);

                    PdfPCell AMSponge = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sponge, tableFont));
                    tblAmBathType.AddCell(AMSponge);
                    PdfPCell AMSpongeOP = new PdfPCell();
                    tblAmBathType.AddCell(AMSpongeOP);

                    PdfPCell AMBathTypeCell = new PdfPCell(tblAmBathType);
                    AMBathTypeCell.Colspan = 4;
                    AMCare.AddCell(AMBathTypeCell);

                    AssessmentTable.AddCell(AMCare);
                    AssessmentTable.AddCell(AMCare);
                    AssessmentTable.AddCell(AMCare);

                    PdfPCell amEmptyCell = new PdfPCell();
                    AMEmptyCell.Border = 0;
                    AMEmptyCell.BorderWidthLeft = .5f;
                    AMEmptyCell.BorderWidthRight = .5f;
                    AMEmptyCell.BorderWidthBottom = .5f;
                    AssessmentTable.AddCell(amEmptyCell);
                    AssessmentTable.AddCell(amEmptyCell);

                    PdfPCell preferredDays = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PreferredDay + ":", tableFont));

                    AssessmentTable.AddCell(preferredDays);

                    PdfPCell assistanceWith = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWith, fontHDBoldText));
                    assistanceWith.HorizontalAlignment = Element.ALIGN_CENTER;
                    assistanceWith.Colspan = 3;
                    assistanceWith.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(assistanceWith);


                    var Dressingphrase = new Phrase();
                    Dressingphrase.Add(new Chunk(Resources.Qola.UIverbiage.Dressing + ": ", fontBoldText));

                    PdfPCell assistanceWithvalue = new PdfPCell(new Phrase(Dressingphrase));
                    assistanceWithvalue.Colspan = 3;
                    AssessmentTable.AddCell(assistanceWithvalue);


                    PdfPTable tblDressing = new PdfPTable(14);
                    tblDressing.WidthPercentage = 100f;
                    tblDressing.SetWidths(new float[] { 1f, .2f, 1f, .2f, 1f, .2f, 1f, .2f, 1f, .2f, 1f, .2f, 1f, .2f });

                    PdfPCell AssistanceIndependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    tblDressing.AddCell(AssistanceIndependent);
                    PdfPCell AssistanceIndependentOP = new PdfPCell();
                    tblDressing.AddCell(AssistanceIndependentOP);

                    PdfPCell AssistanceSupervised = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervised, tableFont));
                    tblDressing.AddCell(AssistanceSupervised);
                    PdfPCell AssistanceSupervisedOP = new PdfPCell();
                    tblDressing.AddCell(AssistanceSupervisedOP);

                    PdfPCell AssistanceAssisted = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assisted, tableFont));
                    tblDressing.AddCell(AssistanceAssisted);
                    PdfPCell AssistanceAssistedOP = new PdfPCell();
                    tblDressing.AddCell(AssistanceAssistedOP);

                    PdfPCell AssistanceDependent = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                    tblDressing.AddCell(AssistanceDependent);
                    PdfPCell AssistanceDependentOP = new PdfPCell();
                    tblDressing.AddCell(AssistanceDependentOP);

                    PdfPCell AssistanceSL4 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SL4, tableFont));
                    tblDressing.AddCell(AssistanceSL4);
                    PdfPCell AssistanceSL4OP = new PdfPCell();
                    tblDressing.AddCell(AssistanceSL4OP);

                    PdfPCell AssistanceSL4D = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SL4D, tableFont));
                    tblDressing.AddCell(AssistanceSL4D);
                    PdfPCell AssistanceSL4DOP = new PdfPCell();
                    tblDressing.AddCell(AssistanceSL4DOP);

                    PdfPCell AssistancePrivateSupportive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PrivateSupportive, tableFont));
                    tblDressing.AddCell(AssistancePrivateSupportive);
                    PdfPCell AssistancePrivateSupportiveOP = new PdfPCell();
                    tblDressing.AddCell(AssistancePrivateSupportiveOP);



                    assistanceWithvalue.AddElement(tblDressing);
                    AssessmentTable.AddCell(assistanceWithvalue);

                    PdfPTable tblDressingTime = new PdfPTable(4);
                    tblDressingTime.WidthPercentage = 100f;
                    tblDressingTime.SetWidths(new float[] { 1f, .2f, 1f, .2f });

                    PdfPCell AMDressing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AM, tableFont));
                    tblDressingTime.AddCell(AMDressing);
                    PdfPCell AMDressingOP = new PdfPCell();
                    tblDressingTime.AddCell(AMDressingOP);

                    PdfPCell PMDressing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PM, tableFont));
                    tblDressingTime.AddCell(PMDressing);
                    PdfPCell PMDressingOP = new PdfPCell();
                    tblDressingTime.AddCell(PMDressingOP);

                    PdfPCell DressingTimeCell = new PdfPCell(tblDressingTime);
                    DressingTimeCell.Colspan = 14;
                    tblDressing.AddCell(DressingTimeCell);

                    AssessmentTable.AddCell(tblDressing);
                    AssessmentTable.AddCell(tblDressing);
                    AssessmentTable.AddCell(tblDressing);

                    PdfPCell mobility = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mobility, fontHDBoldText));
                    mobility.HorizontalAlignment = Element.ALIGN_CENTER;
                    mobility.Colspan = 3;
                    mobility.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(mobility);

                    PdfPTable tblMobility = new PdfPTable(3);
                    tblMobility.WidthPercentage = 100f;
                    tblMobility.SetWidths(new float[] { 1f, 1f, 1f });
                    string mobilitySelected = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MI") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MS") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MA") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "0MD") != "")
                    {
                        if (mobilitySelected != "")
                        {
                            mobilitySelected += ", ";
                        }
                        mobilitySelected += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "35MS4") != "")
                    {
                        mobilitySelected += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "35MSD4") != "")
                    {
                        mobilitySelected += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "36MP") != "")
                    {
                        mobilitySelected += Resources.Qola.UIverbiage.PrivateSupportive;
                    }

                    if (mobilitySelected != "")
                    {
                        mobilitySelected = mobilitySelected.TrimEnd();
                        if (mobilitySelected.EndsWith(","))
                        {
                            mobilitySelected = mobilitySelected.TrimEnd(',');
                        }
                    }

                    PdfPCell mobilityCell = new PdfPCell(new Phrase(mobilitySelected.ToString(), tableFont));
                    mobilityCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    mobilityCell.MinimumHeight = 15f;
                    mobilityCell.Colspan = 3;
                    tblMobility.AddCell(mobilityCell);

                    PdfPCell transfer = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Transfers, fontBoldTextSubtitle));
                    transfer.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    transfer.HorizontalAlignment = Element.ALIGN_LEFT;
                    transfer.Colspan = 2;
                    tblMobility.AddCell(transfer);

                    string MechanicalLift = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "30MN") != "")
                        MechanicalLift = Resources.Qola.UIverbiage.NA;
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "18TT") != "")
                        MechanicalLift = Resources.Qola.UIverbiage.SittoStand;
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "21TE") != "")
                        MechanicalLift = Resources.Qola.UIverbiage.FullMechanical;
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "52TO") != "")
                        MechanicalLift = Resources.Qola.UIverbiage.Other;

                    Phrase MechanicalLiftc = new Phrase(Resources.Qola.UIverbiage.MechanicalLift, fontBoldText);

                    PdfPCell mechancialLift = new PdfPCell(new Phrase(MechanicalLiftc));
                    mechancialLift.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    mechancialLift.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblMobility.AddCell(mechancialLift);

                    string transferSeleected = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "13TI") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "29TD") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "14TS") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "15TA") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "16T1") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Person1;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "17T2") != "")
                    {
                        if (transferSeleected != "")
                        {
                            transferSeleected += ", ";
                        }
                        transferSeleected += Resources.Qola.UIverbiage.Person2;
                    }
                    if (transferSeleected != "")
                    {
                        transferSeleected = transferSeleected.TrimEnd();
                        if (transferSeleected.EndsWith(","))
                        {
                            transferSeleected = transferSeleected.TrimEnd(',');
                        }
                    }
                    PdfPCell transferedCell = new PdfPCell(new Phrase(transferSeleected.ToString(), tableFont));
                    transferedCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    transferedCell.Colspan = 2;
                    transferedCell.MinimumHeight = 15f;
                    tblMobility.AddCell(transferedCell);
                    transferSeleected = "";

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "30MN") != "")
                    {
                        transferSeleected = Resources.Qola.UIverbiage.NA;
                    }
                    PdfPCell MechanicLiftCell = new PdfPCell(new Phrase(MechanicalLift.ToString(), tableFont));
                    MechanicLiftCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    MechanicLiftCell.FixedHeight = 10f;
                    tblMobility.AddCell(MechanicLiftCell);


                    PdfPCell Walker = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Walker, fontBoldTextSubtitle));
                    Walker.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Walker.HorizontalAlignment = Element.ALIGN_LEFT;
                    Walker.Colspan = 3;
                    tblMobility.AddCell(Walker);

                    string walker = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "31WN") != "")
                    {
                        walker = Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "1WI") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "2WS") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "3WA") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "37WS4") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "38WSD4") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.SL4D;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "39WP") != "")
                    {
                        if (walker != "")
                        {
                            walker += ", ";
                        }
                        walker += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (walker != "")
                    {
                        walker = walker.TrimEnd();
                        if (walker.EndsWith(","))
                        {
                            walker = walker.TrimEnd(',');
                        }
                    }
                    PdfPCell walkerCell = new PdfPCell(new Phrase(walker, tableFont));
                    walkerCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    walkerCell.MinimumHeight = 15f;
                    walkerCell.Colspan = 3;
                    tblMobility.AddCell(walkerCell);

                    walker = "";
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString()))
                    {
                        walker = dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString() != "undefined" ? dsAssessmentDetails.Tables[0].Rows[0]["fd_walker_type"].ToString() : "";
                    }
                    var pharse23 = new Phrase();
                    pharse23.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));
                    pharse23.Add(new Chunk(walker, tableFont));
                    PdfPCell walkerType = new PdfPCell(new Phrase(pharse23));
                    walkerType.MinimumHeight = 15f;
                    walkerType.HorizontalAlignment = Element.ALIGN_LEFT;
                    walkerType.Colspan = 3;
                    tblMobility.AddCell(walkerType);

                    PdfPCell WheelChair = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wheelchair, fontBoldTextSubtitle));
                    WheelChair.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    WheelChair.HorizontalAlignment = Element.ALIGN_LEFT;
                    WheelChair.Colspan = 3;
                    tblMobility.AddCell(WheelChair);

                    string wheel = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "32WCN") != "")
                    {
                        wheel = Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "4HI") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "5HS") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "6HA") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "40WS4") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "41WSD4") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "42WP") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (wheel != "")
                    {
                        wheel = wheel.TrimEnd();
                        if (wheel.EndsWith(","))
                        {
                            wheel = wheel.TrimEnd(',');
                        }
                    }
                    PdfPCell wheelchairCell = new PdfPCell(new Phrase(wheel, tableFont));
                    wheelchairCell.MinimumHeight = 15f;
                    wheelchairCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    wheelchairCell.Colspan = 3;
                    tblMobility.AddCell(wheelchairCell);

                    wheel = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "22HM") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Manual;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "23HE") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Electric;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "26HP") != "")
                    {
                        if (wheel != "")
                        {
                            wheel += ", ";
                        }
                        wheel += Resources.Qola.UIverbiage.Transport;
                    }
                    var pharse17 = new Phrase();
                    pharse17.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));
                    pharse17.Add(new Chunk(wheel, tableFont));
                    PdfPCell wheelChairType = new PdfPCell(new Phrase(pharse17));

                    wheelChairType.HorizontalAlignment = Element.ALIGN_LEFT;
                    wheelChairType.Colspan = 3;
                    tblMobility.AddCell(wheelChairType);

                    PdfPCell Cane = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cane, fontBoldTextSubtitle));
                    Cane.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Cane.HorizontalAlignment = Element.ALIGN_LEFT;
                    Cane.Colspan = 3;
                    tblMobility.AddCell(Cane);

                    string cane = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "33CN") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "7CI") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "8CS") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "9CA") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "43CS4") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "44CSD4") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "45CP") != "")
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (cane != "")
                    {
                        cane = cane.TrimEnd();
                        if (cane.EndsWith(","))
                        {
                            cane = cane.TrimEnd(',');
                        }
                    }
                    PdfPCell caneType = new PdfPCell(new Phrase(cane, tableFont));
                    caneType.HorizontalAlignment = Element.ALIGN_LEFT;
                    caneType.MinimumHeight = 15f;
                    caneType.Colspan = 3;
                    tblMobility.AddCell(caneType);

                    cane = "";
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString()))
                    {
                        if (cane != "")
                        {
                            cane += ", ";
                        }
                        cane = dsAssessmentDetails.Tables[0].Rows[0]["fd_cane_type"].ToString();
                    }

                    var pharse21 = new Phrase();
                    pharse21.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));
                    pharse21.Add(new Chunk(cane, tableFont));
                    PdfPCell caneCell = new PdfPCell(new Phrase(pharse21));

                    caneCell.HorizontalAlignment = Element.ALIGN_LEFT;
                    caneCell.Colspan = 3;
                    tblMobility.AddCell(caneCell);

                    PdfPCell Scooter = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Scooter, fontBoldTextSubtitle));
                    Scooter.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Scooter.HorizontalAlignment = Element.ALIGN_LEFT;
                    Scooter.Colspan = 3;
                    tblMobility.AddCell(Scooter);
                    string scooter = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "34SN") != "")
                    {
                        scooter = Resources.Qola.UIverbiage.NA;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_mobility"].ToString(), "10SI") != "")
                    {
                        if (scooter != "")
                        {
                            scooter += ", ";
                        }
                        scooter = Resources.Qola.UIverbiage.Independent;
                    }
                    PdfPCell scooterSelected = new PdfPCell(new Phrase(scooter, tableFont));
                    scooterSelected.HorizontalAlignment = Element.ALIGN_LEFT;
                    scooterSelected.Colspan = 3;
                    scooterSelected.MinimumHeight = 15F;
                    tblMobility.AddCell(scooterSelected);

                    scooter = "";
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString()))
                    {
                        scooter = dsAssessmentDetails.Tables[0].Rows[0]["fd_scooter_type"].ToString();
                    }

                    var pharse18 = new Phrase();
                    pharse18.Add(new Chunk(Resources.Qola.UIverbiage.Type + ": ", fontBoldText));

                    pharse18.Add(new Chunk(scooter, tableFont));
                    PdfPCell scooterValue = new PdfPCell(new Phrase(pharse18));

                    scooterValue.HorizontalAlignment = Element.ALIGN_LEFT;
                    scooterValue.Colspan = 3;
                    tblMobility.AddCell(scooterValue);

                    PdfPCell mobiityCell = new PdfPCell(tblMobility);
                    mobiityCell.Colspan = 3;
                    AssessmentTable.AddCell(mobiityCell);

                    PdfPTable tblOTPT = new PdfPTable(2);
                    tblOTPT.WidthPercentage = 100f;
                    tblOTPT.SetWidths(new float[] { 1f, 1f });
                    string ptValue = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "10PY") != "")
                    {
                        ptValue = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "11PN") != "")
                    {
                        ptValue = Resources.Qola.UIverbiage.No;
                    }
                    var pharse19 = new Phrase();
                    pharse19.Add(new Chunk(Resources.Qola.UIverbiage.PT + ": ", fontBoldText));
                    pharse19.Add(new Chunk(ptValue, tableFont));
                    PdfPCell PT = new PdfPCell(new Phrase(pharse19));

                    tblOTPT.AddCell(PT);

                    string getfreq = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_PT_frequency"]);
                    var pharse20 = new Phrase();
                    pharse20.Add(new Chunk(Resources.Qola.UIverbiage.Frequency + "/" + Resources.Qola.UIverbiage.Agency + ": ", fontBoldText));
                    pharse20.Add(new Chunk(getfreq, tableFont));
                    PdfPCell PTFrequency = new PdfPCell(new Phrase(pharse20));

                    tblOTPT.AddCell(PTFrequency);

                    string otValue = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "12OY") != "")
                    {
                        otValue = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_PT"].ToString(), "13ON") != "")
                    {
                        otValue = Resources.Qola.UIverbiage.No;
                    }

                    var pharse221 = new Phrase();
                    pharse221.Add(new Chunk(Resources.Qola.UIverbiage.OT + ": ", fontBoldText));
                    pharse221.Add(new Chunk(otValue, tableFont));
                    PdfPCell OT = new PdfPCell(new Phrase(pharse221));

                    tblOTPT.AddCell(OT);

                    string getfreq1 = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_OT_frequency"]);
                    var pharse22 = new Phrase();
                    pharse22.Add(new Chunk(Resources.Qola.UIverbiage.Frequency + "/" + Resources.Qola.UIverbiage.Agency + ": ", fontBoldText));
                    pharse22.Add(new Chunk(getfreq1, tableFont));
                    PdfPCell OTFrequency = new PdfPCell(new Phrase(pharse22));

                    tblOTPT.AddCell(OTFrequency);

                    PdfPCell ptptCell = new PdfPCell(tblOTPT);
                    ptptCell.Colspan = 3;
                    AssessmentTable.AddCell(ptptCell);

                    PdfPCell SafetyPasd = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SafetyPad, fontHDBoldText));
                    SafetyPasd.Colspan = 3;
                    SafetyPasd.BackgroundColor = BaseColor.LIGHT_GRAY;
                    SafetyPasd.HorizontalAlignment = Element.ALIGN_CENTER;
                    AssessmentTable.AddCell(SafetyPasd);

                    PdfPCell SafetyPasd1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SafetyPad, fontHDBoldText));
                    SafetyPasd1.Colspan = 2;
                    SafetyPasd1.BackgroundColor = BaseColor.LIGHT_GRAY;
                    SafetyPasd1.HorizontalAlignment = Element.ALIGN_CENTER;
                    AssessmentTable.AddCell(SafetyPasd1);

                    PdfPCell Rails = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Rails, fontHDBoldText));
                    Rails.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(Rails);

                    PdfPTable tblSafetyPasd = new PdfPTable(2);
                    tblSafetyPasd.WidthPercentage = 100f;
                    tblSafetyPasd.SetWidths(wthAssessed);

                    PdfPCell SeatLapbelt = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SeatLapbelt, tableFont));
                    tblSafetyPasd.AddCell(SeatLapbelt);
                    PdfPCell SeatLapbeltOP = new PdfPCell();
                    tblSafetyPasd.AddCell(SeatLapbeltOP);

                    PdfPCell Mattressonfloor = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mattressonfloor, tableFont));
                    tblSafetyPasd.AddCell(Mattressonfloor);
                    PdfPCell MattressonfloorOP = new PdfPCell();
                    tblSafetyPasd.AddCell(MattressonfloorOP);

                    PdfPCell TransferPole = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TransferPole, tableFont));
                    tblSafetyPasd.AddCell(TransferPole);
                    PdfPCell TransferPoleOP = new PdfPCell();
                    tblSafetyPasd.AddCell(TransferPoleOP);
                    AssessmentTable.AddCell(tblSafetyPasd);

                    PdfPTable tblSafetyPasd1 = new PdfPTable(2);
                    tblSafetyPasd1.WidthPercentage = 100f;
                    tblSafetyPasd1.SetWidths(wthAssessed);

                    PdfPCell TableTray = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TableTray, tableFont));
                    tblSafetyPasd1.AddCell(TableTray);
                    PdfPCell TableTrayOP = new PdfPCell();
                    tblSafetyPasd1.AddCell(TableTrayOP);

                    PdfPCell Recliner = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Recliner, tableFont));
                    tblSafetyPasd1.AddCell(Recliner);
                    PdfPCell ReclinerOP = new PdfPCell();
                    tblSafetyPasd1.AddCell(ReclinerOP);

                    PdfPCell Tiltwc = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tiltwc, tableFont));
                    tblSafetyPasd1.AddCell(Tiltwc);
                    PdfPCell TiltwcOP = new PdfPCell();
                    tblSafetyPasd1.AddCell(TiltwcOP);
                    AssessmentTable.AddCell(tblSafetyPasd1);

                    PdfPTable tblRails = new PdfPTable(2);
                    tblRails.WidthPercentage = 100f;
                    tblRails.SetWidths(wthAssessed);

                    PdfPCell HalfRailRight = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.HalfRailRight, tableFont));
                    tblRails.AddCell(HalfRailRight);
                    PdfPCell HalfRailRightOP = new PdfPCell();
                    tblRails.AddCell(HalfRailRightOP);

                    PdfPCell HalfRailLeft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.HalfRailLeft, tableFont));
                    tblRails.AddCell(HalfRailLeft);
                    PdfPCell HalfRailLeftOP = new PdfPCell();
                    tblRails.AddCell(HalfRailLeftOP);

                    PdfPCell LeftAndRightHalfRails = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.LeftAndRightHalfRails, tableFont));
                    tblRails.AddCell(LeftAndRightHalfRails);
                    PdfPCell LeftAndRightHalfRailsOP = new PdfPCell();
                    tblRails.AddCell(LeftAndRightHalfRailsOP);
                    AssessmentTable.AddCell(tblRails);

                    PdfPCell Behaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Behaviour, fontHDBoldText));
                    Behaviour.Colspan = 2;
                    Behaviour.BackgroundColor = BaseColor.LIGHT_GRAY;
                    Behaviour.HorizontalAlignment = Element.ALIGN_CENTER;
                    AssessmentTable.AddCell(Behaviour);

                    PdfPCell Cognitive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cognitivefunction, fontHDBoldText));
                    Cognitive.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(Cognitive);

                    PdfPTable tblBehaviour = new PdfPTable(2);
                    tblBehaviour.WidthPercentage = 100f;
                    tblBehaviour.SetWidths(wthAssessed);

                    PdfPCell BehNoConcerns = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NOConcerns, tableFont));
                    tblBehaviour.AddCell(BehNoConcerns);
                    PdfPCell BehNoConcernsOP = new PdfPCell();
                    tblBehaviour.AddCell(BehNoConcernsOP);

                    PdfPCell BehWanders = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Wanders, tableFont));
                    tblBehaviour.AddCell(BehWanders);
                    PdfPCell BehWandersOP = new PdfPCell();
                    tblBehaviour.AddCell(BehWandersOP);

                    PdfPCell BehAgitated = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Agitated, tableFont));
                    tblBehaviour.AddCell(BehAgitated);
                    PdfPCell BehAgitatedOP = new PdfPCell();
                    tblBehaviour.AddCell(BehAgitatedOP);

                    PdfPCell BehAggressive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Aggressive, tableFont));
                    tblBehaviour.AddCell(BehAggressive);
                    PdfPCell BehAggressiveOP = new PdfPCell();
                    tblBehaviour.AddCell(BehAggressiveOP);

                    PdfPCell BehDepression = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DePressed, tableFont));
                    tblBehaviour.AddCell(BehDepression);
                    PdfPCell BehDepressionOP = new PdfPCell();
                    tblBehaviour.AddCell(BehDepressionOP);

                    PdfPCell BehSuicidal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suicidal, tableFont));
                    tblBehaviour.AddCell(BehSuicidal);
                    PdfPCell BehSuicidalOP = new PdfPCell();
                    tblBehaviour.AddCell(BehSuicidalOP);

                    PdfPCell BehAnxiousBehaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AnxiousBehaviour, tableFont));
                    tblBehaviour.AddCell(BehAnxiousBehaviour);
                    PdfPCell BehAnxiousBehaviourOP = new PdfPCell();
                    tblBehaviour.AddCell(BehAnxiousBehaviourOP);

                    PdfPCell BehWithdrawn = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Withdrawn, tableFont));
                    tblBehaviour.AddCell(BehWithdrawn);
                    PdfPCell BehWithdrawnOP = new PdfPCell();
                    tblBehaviour.AddCell(BehWithdrawnOP);

                    PdfPCell BehDemanding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Demanding, tableFont));
                    tblBehaviour.AddCell(BehDemanding);
                    PdfPCell BehDemandingOP = new PdfPCell();
                    tblBehaviour.AddCell(BehDemandingOP);

                    PdfPCell BehDisruptive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Disruptive, tableFont));
                    tblBehaviour.AddCell(BehDisruptive);
                    PdfPCell BehDisruptiveOP = new PdfPCell();
                    tblBehaviour.AddCell(BehDisruptiveOP);

                    PdfPCell BehHoarding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Hoarding, tableFont));
                    tblBehaviour.AddCell(BehHoarding);
                    PdfPCell BehHoardingOP = new PdfPCell();
                    tblBehaviour.AddCell(BehHoardingOP);

                    PdfPCell cel = new PdfPCell(tblBehaviour);
                    AssessmentTable.AddCell(cel);

                    PdfPTable tblBehaviour1 = new PdfPTable(2);
                    tblBehaviour1.WidthPercentage = 100f;
                    tblBehaviour1.SetWidths(wthAssessed);

                    PdfPCell sad = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Sad, tableFont));
                    tblBehaviour1.AddCell(sad);
                    PdfPCell sadOP = new PdfPCell();
                    tblBehaviour1.AddCell(sadOP);

                    PdfPCell BehIneffectiveCoping = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IneffectiveCoping, tableFont));
                    tblBehaviour1.AddCell(BehIneffectiveCoping);
                    PdfPCell BehIneffectiveCopingOP = new PdfPCell();
                    tblBehaviour1.AddCell(BehIneffectiveCopingOP);

                    PdfPCell BehResistsTreatmentorRefusesCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResistsRefusesCareAndOrTreatments, tableFont));
                    tblBehaviour1.AddCell(BehResistsTreatmentorRefusesCare);
                    PdfPCell BehResistsTreatmentorRefusesCareOP = new PdfPCell();
                    tblBehaviour1.AddCell(BehResistsTreatmentorRefusesCareOP);

                    PdfPCell BehSuspicious = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Suspicious, tableFont));
                    tblBehaviour1.AddCell(BehSuspicious);
                    PdfPCell BehSuspiciousOP = new PdfPCell();
                    tblBehaviour1.AddCell(BehSuspiciousOP);

                    PdfPCell BehIngestForeignItems = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.IngestsForeignItems, tableFont));
                    tblBehaviour1.AddCell(BehIngestForeignItems);
                    PdfPCell BehIngestForeignItemsOP = new PdfPCell();
                    tblBehaviour1.AddCell(BehIngestForeignItemsOP);

                    PdfPCell BehInappropriateSexualBehaviour = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InappropriateSexualBehaviour, tableFont));
                    tblBehaviour1.AddCell(BehInappropriateSexualBehaviour);
                    PdfPCell BehInappropriateSexualBehaviourOP = new PdfPCell();
                    tblBehaviour1.AddCell(BehInappropriateSexualBehaviourOP);

                    PdfPCell BehInappropriateSmoking = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InappropriateUnsafeSmoker, tableFont));
                    tblBehaviour1.AddCell(BehInappropriateSmoking);
                    PdfPCell BehInappropriateSmokingOP = new PdfPCell();
                    tblBehaviour1.AddCell(BehInappropriateSmokingOP);

                    PdfPCell BehSubstanceAbuse = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SubstanceAbuse, tableFont));
                    tblBehaviour1.AddCell(BehSubstanceAbuse);
                    PdfPCell BehSubstanceAbuseOP = new PdfPCell();
                    tblBehaviour1.AddCell(BehSubstanceAbuseOP);

                    PdfPCell BehAlcoholAbuse = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AlcoholAbuse, tableFont));
                    tblBehaviour1.AddCell(BehAlcoholAbuse);
                    PdfPCell BehAlcoholAbuseOP = new PdfPCell();
                    tblBehaviour1.AddCell(BehAlcoholAbuseOP);

                    PdfPCell BehSeeksAttention = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SeeksAttention, tableFont));
                    tblBehaviour1.AddCell(BehSeeksAttention);
                    PdfPCell BehSeeksAttentionOP = new PdfPCell();
                    tblBehaviour1.AddCell(BehSeeksAttentionOP);

                    PdfPCell celbehaviour = new PdfPCell(tblBehaviour1);
                    AssessmentTable.AddCell(celbehaviour);

                    PdfPTable tblCognitivefunction = new PdfPTable(2);
                    tblCognitivefunction.WidthPercentage = 100f;
                    tblCognitivefunction.SetWidths(wthAssessed);

                    PdfPCell Cognitivefunction1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Cognitivefunction, fontBoldTextSubtitle));
                    Cognitivefunction1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Cognitivefunction1.HorizontalAlignment = Element.ALIGN_CENTER;

                    Cognitivefunction1.Colspan = 2;
                    tblCognitivefunction.AddCell(Cognitivefunction1);

                    PdfPCell CogUnimpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Unimpaired, tableFont));
                    tblCognitivefunction.AddCell(CogUnimpaired);
                    PdfPCell CogUnimpairedOP = new PdfPCell();
                    tblCognitivefunction.AddCell(CogUnimpairedOP);

                    PdfPCell CogForgetful = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Forgetful, tableFont));
                    tblCognitivefunction.AddCell(CogForgetful);
                    PdfPCell CogForgetfulOP = new PdfPCell();
                    tblCognitivefunction.AddCell(CogForgetfulOP);

                    PdfPCell CogJudgementPoor = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Judgementpoor, tableFont));
                    tblCognitivefunction.AddCell(CogJudgementPoor);
                    PdfPCell CogJudgementPoorOP = new PdfPCell();
                    tblCognitivefunction.AddCell(CogJudgementPoorOP);

                    PdfPCell CogConfused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Confused, tableFont));
                    tblCognitivefunction.AddCell(CogConfused);
                    PdfPCell CogConfusedOP = new PdfPCell();
                    tblCognitivefunction.AddCell(CogConfusedOP);

                    PdfPCell CogShorttermloss = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Shorttermloss, tableFont));
                    tblCognitivefunction.AddCell(CogShorttermloss);
                    PdfPCell CogShorttermlossOP = new PdfPCell();
                    tblCognitivefunction.AddCell(CogShorttermlossOP);

                    PdfPCell CogSignificantImpairment = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Significantimpairment, tableFont));
                    tblCognitivefunction.AddCell(CogSignificantImpairment);
                    PdfPCell CogSignificantImpairmentOP = new PdfPCell();
                    tblCognitivefunction.AddCell(CogSignificantImpairmentOP);

                    PdfPCell MemoryandOrientation = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Orientation, fontHDBoldText));
                    MemoryandOrientation.Colspan = 2;
                    MemoryandOrientation.BackgroundColor = BaseColor.LIGHT_GRAY;
                    tblCognitivefunction.AddCell(MemoryandOrientation);

                    PdfPCell OriPerson = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Person, tableFont));
                    tblCognitivefunction.AddCell(OriPerson);
                    PdfPCell OriPersonOP = new PdfPCell();
                    tblCognitivefunction.AddCell(OriPersonOP);

                    PdfPCell OriPlace = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Place, tableFont));
                    tblCognitivefunction.AddCell(OriPlace);
                    PdfPCell OriPlaceOP = new PdfPCell();
                    tblCognitivefunction.AddCell(OriPlaceOP);

                    PdfPCell OriTime = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Time, tableFont));
                    tblCognitivefunction.AddCell(OriTime);
                    PdfPCell OriTimeOP = new PdfPCell();
                    tblCognitivefunction.AddCell(OriTimeOP);

                    PdfPCell cognitiveCell = new PdfPCell(tblCognitivefunction);

                    AssessmentTable.AddCell(cognitiveCell);


                    PdfPCell NutritionCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Nutrition, fontHDBoldText));
                    NutritionCell.Colspan = 3;
                    NutritionCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    NutritionCell.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(NutritionCell);

                    PdfPCell status = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Status, fontHDBoldText));
                    status.Colspan = 3;
                    status.HorizontalAlignment = Element.ALIGN_LEFT;
                    status.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(status);

                    PdfPCell Nutritionvalue = new PdfPCell();
                    Nutritionvalue.Colspan = 3;

                    PdfPTable tblstatus = new PdfPTable(14);
                    tblstatus.WidthPercentage = 100f;
                    tblstatus.SetWidths(new float[] { 1f, .2f, 1f, .2f, 1f, .2f, 1f, .2f, 1f, .2f, 1f, .2f, 1f, .2f });

                    PdfPCell AssistanceIndependentstatus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Independent, tableFont));
                    tblstatus.AddCell(AssistanceIndependentstatus);
                    PdfPCell AssistanceIndependentstatusOP = new PdfPCell();
                    tblstatus.AddCell(AssistanceIndependentstatusOP);

                    PdfPCell AssistanceSupervisedstatus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supervised, tableFont));
                    tblstatus.AddCell(AssistanceSupervisedstatus);
                    PdfPCell AssistanceSupervisedstatusOP = new PdfPCell();
                    tblstatus.AddCell(AssistanceSupervisedstatusOP);

                    PdfPCell AssistanceAssistedstatus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Assisted, tableFont));
                    tblstatus.AddCell(AssistanceAssistedstatus);
                    PdfPCell AssistanceAssistedstatusOP = new PdfPCell();
                    tblstatus.AddCell(AssistanceAssistedstatusOP);

                    PdfPCell AssistanceDependentstatus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Dependent, tableFont));
                    tblstatus.AddCell(AssistanceDependentstatus);
                    PdfPCell AssistanceDependentstatusOP = new PdfPCell();
                    tblstatus.AddCell(AssistanceDependentstatusOP);

                    PdfPCell AssistanceSL4status = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SL4, tableFont));
                    tblstatus.AddCell(AssistanceSL4status);
                    PdfPCell AssistanceSL4statusOP = new PdfPCell();
                    tblstatus.AddCell(AssistanceSL4statusOP);

                    PdfPCell AssistanceSL4Dstatus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SL4D, tableFont));
                    tblstatus.AddCell(AssistanceSL4Dstatus);
                    PdfPCell AssistanceSL4DstatusOP = new PdfPCell();
                    tblstatus.AddCell(AssistanceSL4DstatusOP);

                    PdfPCell AssistancePrivateSupportivestatus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PrivateSupportive, tableFont));
                    tblstatus.AddCell(AssistancePrivateSupportivestatus);
                    PdfPCell AssistancePrivateSupportivestatusOP = new PdfPCell();
                    tblstatus.AddCell(AssistancePrivateSupportivestatusOP);

                    Nutritionvalue.AddElement(tblstatus);
                    AssessmentTable.AddCell(Nutritionvalue);

                    PdfPCell Risk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Risk, fontHDBoldText));
                    Risk.Colspan = 3;
                    Risk.HorizontalAlignment = Element.ALIGN_LEFT;
                    Risk.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(Risk);

                    PdfPCell Riskvalue = new PdfPCell();
                    Riskvalue.Colspan = 3;

                    PdfPTable tblRisk = new PdfPTable(6);
                    tblRisk.WidthPercentage = 100f;
                    tblRisk.SetWidths(new float[] { .2f, .05f, .2f, .05f, .2f, .05f });

                    PdfPCell Swallowing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Swallowing, tableFont));
                    tblRisk.AddCell(Swallowing);
                    PdfPCell SwallowingOP = new PdfPCell();
                    tblRisk.AddCell(SwallowingOP);

                    PdfPCell Chokingrisk = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Chokingrisk, tableFont));
                    tblRisk.AddCell(Chokingrisk);
                    PdfPCell ChokingriskOP = new PdfPCell();
                    tblRisk.AddCell(ChokingriskOP);

                    PdfPCell DifficultyChewing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DifficultyChewing, tableFont));
                    tblRisk.AddCell(DifficultyChewing);
                    PdfPCell DifficultyChewingOP = new PdfPCell();
                    tblRisk.AddCell(DifficultyChewingOP);

                    PdfPCell Assistivedevices = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistiveDevices + ":", fontBoldText));
                    Assistivedevices.Colspan = 6;
                    tblRisk.AddCell(Assistivedevices);


                    Riskvalue.AddElement(tblRisk);
                    AssessmentTable.AddCell(Riskvalue);

                    PdfPCell Texture = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Texture, fontHDBoldText));
                    Texture.Colspan = 3;
                    Texture.HorizontalAlignment = Element.ALIGN_LEFT;
                    Texture.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(Texture);

                    PdfPCell Texturevalue = new PdfPCell();
                    Texturevalue.Colspan = 3;

                    PdfPTable tblTexture = new PdfPTable(10);
                    tblTexture.WidthPercentage = 100f;
                    tblTexture.SetWidths(new float[] { .2f, .05f, .2f, .05f, .2f, .05f, .2f, .05f, .2f, .05f });

                    PdfPCell Regular = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Regular, tableFont));
                    tblTexture.AddCell(Regular);
                    PdfPCell RegularOP = new PdfPCell();
                    tblTexture.AddCell(RegularOP);

                    PdfPCell soft = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Soft, tableFont));
                    tblTexture.AddCell(soft);
                    PdfPCell softOP = new PdfPCell();
                    tblTexture.AddCell(softOP);

                    PdfPCell minced = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DietMinced, tableFont));
                    tblTexture.AddCell(minced);
                    PdfPCell mincedOP = new PdfPCell();
                    tblTexture.AddCell(mincedOP);

                    PdfPCell DietPureed = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DietPureed, tableFont));
                    tblTexture.AddCell(DietPureed);
                    PdfPCell DietPureedOP = new PdfPCell();
                    tblTexture.AddCell(DietPureedOP);

                    PdfPCell ThickendedFluids = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ThickendedFluids, tableFont));
                    tblTexture.AddCell(ThickendedFluids);
                    PdfPCell ThickendedFluidsOP = new PdfPCell();
                    tblTexture.AddCell(ThickendedFluidsOP);

                    PdfPCell TextureOther = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other + ":", fontBoldText));
                    TextureOther.Colspan = 10;
                    tblTexture.AddCell(TextureOther);

                    Texturevalue.AddElement(tblTexture);
                    AssessmentTable.AddCell(Texturevalue);

                    PdfPCell Meals = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Meals, fontHDBoldText));
                    Meals.Colspan = 3;
                    Meals.HorizontalAlignment = Element.ALIGN_LEFT;
                    Meals.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(Meals);

                    PdfPCell Mealsvalue = new PdfPCell();
                    Mealsvalue.Colspan = 3;

                    PdfPTable tblMeals = new PdfPTable(7);
                    tblMeals.WidthPercentage = 100f;
                    tblMeals.SetWidths(new float[] { .07f, .2f, .05f, .2f, .05f, .2f, .05f });

                    PdfPCell Breakfast = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Breakfast + ":", fontBoldText));
                    Breakfast.Border = 0;
                    tblMeals.AddCell(Breakfast);

                    PdfPCell MainDiningRoom = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MainDiningRoom, tableFont));
                    tblMeals.AddCell(MainDiningRoom);
                    PdfPCell MainDiningRoomOP = new PdfPCell();
                    tblMeals.AddCell(MainDiningRoomOP);

                    PdfPCell Onunit = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Onunit, tableFont));
                    tblMeals.AddCell(Onunit);
                    PdfPCell OnunitOP = new PdfPCell();
                    tblMeals.AddCell(OnunitOP);

                    PdfPCell TrayService = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TrayService, tableFont));
                    tblMeals.AddCell(TrayService);
                    PdfPCell TrayServiceOP = new PdfPCell();
                    tblMeals.AddCell(TrayServiceOP);


                    Mealsvalue.AddElement(tblMeals);
                    Mealsvalue.AddElement(tblMeals);
                    Mealsvalue.AddElement(tblMeals);
                    AssessmentTable.AddCell(Mealsvalue);

                    PdfPCell EscortingToAndFromMeals = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.EscortingToAndFromMeals, fontHDBoldText));
                    EscortingToAndFromMeals.Colspan = 3;
                    EscortingToAndFromMeals.HorizontalAlignment = Element.ALIGN_LEFT;
                    EscortingToAndFromMeals.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(EscortingToAndFromMeals);

                    PdfPCell EscortingToAndFromMealsvalue = new PdfPCell();
                    EscortingToAndFromMealsvalue.Colspan = 3;

                    PdfPTable tblEscortingToAndFromMeals = new PdfPTable(9);
                    tblEscortingToAndFromMeals.WidthPercentage = 100f;
                    tblEscortingToAndFromMeals.SetWidths(new float[] { 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f, 1f });

                    PdfPCell Breakfastescorting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Breakfast + ": ", fontBoldText));
                    Breakfastescorting.Border = 0;
                    tblEscortingToAndFromMeals.AddCell(Breakfastescorting);

                    PdfPCell Yesescorting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Yes, tableFont));
                    Yesescorting.Border = 0;
                    tblEscortingToAndFromMeals.AddCell(Yesescorting);

                    PdfPCell Noescorting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.No, tableFont));
                    Noescorting.Border = 0;
                    tblEscortingToAndFromMeals.AddCell(Noescorting);

                    PdfPCell Lunchescorting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Lunch + ": ", fontBoldText));
                    Lunchescorting.Border = 0;
                    tblEscortingToAndFromMeals.AddCell(Lunchescorting);
                    tblEscortingToAndFromMeals.AddCell(Yesescorting);
                    tblEscortingToAndFromMeals.AddCell(Noescorting);

                    PdfPCell Supperescorting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supper + ": ", fontBoldText));
                    Supperescorting.Border = 0;
                    tblEscortingToAndFromMeals.AddCell(Supperescorting);
                    tblEscortingToAndFromMeals.AddCell(Yesescorting);
                    tblEscortingToAndFromMeals.AddCell(Noescorting);

                    EscortingToAndFromMealsvalue.AddElement(tblEscortingToAndFromMeals);
                    AssessmentTable.AddCell(EscortingToAndFromMealsvalue);

                    PdfPCell Apetite = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Appetite, fontHDBoldText));
                    Apetite.Colspan = 3;
                    Apetite.HorizontalAlignment = Element.ALIGN_LEFT;
                    Apetite.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(Apetite);

                    PdfPCell Apetitevalue = new PdfPCell();
                    Apetitevalue.Colspan = 3;

                    PdfPTable tblApetite = new PdfPTable(6);
                    tblApetite.WidthPercentage = 100f;
                    tblApetite.SetWidths(new float[] { .2f, .05f, .2f, .05f, .2f, .05f });

                    PdfPCell Good = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Good, tableFont));
                    tblApetite.AddCell(Good);
                    PdfPCell GoodOP = new PdfPCell();
                    tblApetite.AddCell(GoodOP);

                    PdfPCell Fair = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Fair, tableFont));
                    tblApetite.AddCell(Fair);
                    PdfPCell FairOP = new PdfPCell();
                    tblApetite.AddCell(FairOP);

                    PdfPCell Poor = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Poor, tableFont));
                    tblApetite.AddCell(Poor);
                    PdfPCell PoorOP = new PdfPCell();
                    tblApetite.AddCell(PoorOP);

                    Apetitevalue.AddElement(tblApetite);
                    AssessmentTable.AddCell(Apetitevalue);


                    PdfPCell FoodAllergySensitivity = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FoodAllergySensitivity, fontHDBoldText));
                    FoodAllergySensitivity.Colspan = 3;
                    FoodAllergySensitivity.HorizontalAlignment = Element.ALIGN_LEFT;
                    FoodAllergySensitivity.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(FoodAllergySensitivity);

                    PdfPCell FoodAllergySensitivityvalue = new PdfPCell();
                    FoodAllergySensitivityvalue.Colspan = 3;
                    FoodAllergySensitivityvalue.FixedHeight = 20f;
                    AssessmentTable.AddCell(FoodAllergySensitivityvalue);

                    PdfPCell Elimination1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Elimination, fontHDBoldText));
                    Elimination1.HorizontalAlignment = Element.ALIGN_CENTER;
                    Elimination1.Colspan = 3;
                    Elimination1.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(Elimination1);

                    PdfPCell Bladder = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bladder, fontBoldTextSubtitle));
                    Bladder.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Bladder.HorizontalAlignment = Element.ALIGN_CENTER;
                    Bladder.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AssessmentTable.AddCell(Bladder);

                    PdfPCell Bowel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bowel, fontBoldTextSubtitle));
                    Bowel.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    Bowel.HorizontalAlignment = Element.ALIGN_CENTER;
                    Bowel.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AssessmentTable.AddCell(Bowel);

                    PdfPCell ContinenceProducts1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ContinenceProducts, fontBoldTextSubtitle));
                    ContinenceProducts1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    ContinenceProducts1.HorizontalAlignment = Element.ALIGN_CENTER;
                    ContinenceProducts1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    AssessmentTable.AddCell(ContinenceProducts1);

                    PdfPTable tblBladder = new PdfPTable(2);
                    tblBladder.WidthPercentage = 100f;
                    tblBladder.SetWidths(new float[] { 1f, .2f });


                    PdfPCell BlaContinent1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Continent, tableFont));
                    tblBladder.AddCell(BlaContinent1);
                    PdfPCell BlaContinent1OP = new PdfPCell();
                    tblBladder.AddCell(BlaContinent1OP);


                    PdfPCell BlaInContinent1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InContinent, tableFont));
                    tblBladder.AddCell(BlaInContinent1);
                    PdfPCell BlaInContinent1OP = new PdfPCell();
                    tblBladder.AddCell(BlaInContinent1OP);

                    PdfPCell BlaOccasionallyIncontinent1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OccasionallyIncontinent, tableFont));
                    tblBladder.AddCell(BlaOccasionallyIncontinent1);
                    PdfPCell BlaOccasionallyIncontinent1OP = new PdfPCell();
                    tblBladder.AddCell(BlaOccasionallyIncontinent1OP);


                    PdfPCell BlaCatheter1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Catheter, tableFont));
                    tblBladder.AddCell(BlaCatheter1);
                    PdfPCell BlaCatheter1OP = new PdfPCell();
                    tblBladder.AddCell(BlaCatheter1OP);

                    AssessmentTable.AddCell(tblBladder);
                    AssessmentTable.AddCell(tblBladder);

                    PdfPTable tblcontinenceproducts = new PdfPTable(9);
                    tblcontinenceproducts.WidthPercentage = 100f;
                    tblcontinenceproducts.SetWidths(new float[] { 1f, .2f, 1f, .2f, 1f, .2f, 1f, .2f, 1f });
                    AssessmentTable.AddCell(tblcontinenceproducts);

                    PdfPTable tblNutrition = new PdfPTable(1);
                    tblNutrition.WidthPercentage = 100f;
                    tblNutrition.SetWidths(new float[] { 1f });

                    PdfPCell Stautus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.NutritionalStatus, fontBoldTextSubtitle));
                    Stautus.HorizontalAlignment = Element.ALIGN_CENTER;
                    Stautus.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(Stautus);

                    string nutrition = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "10SI") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "11SS") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "12SA") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "13SD") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "15TS4") != "")
                    {
                        nutrition += Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "16SD4") != "")
                    {
                        nutrition += Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "17TP") != "")
                    {
                        nutrition += Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (nutrition != "")
                    {
                        nutrition = nutrition.TrimEnd();
                        if (nutrition.EndsWith(","))
                        {
                            nutrition = nutrition.TrimEnd(',');
                        }
                    }

                    PdfPCell StautusCell = new PdfPCell(new Phrase(nutrition, tableFont));
                    StautusCell.MinimumHeight = 15f;
                    tblNutrition.AddCell(StautusCell);
                    nutrition = "";

                    tblNutrition = new PdfPTable(1);
                    tblNutrition.WidthPercentage = 100f;
                    tblNutrition.SetWidths(new float[] { 1f });
                    PdfPCell diet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Diet, fontBoldTextSubtitle));
                    diet.HorizontalAlignment = Element.ALIGN_CENTER;
                    diet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(diet);

                    string dietValue = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "32DR") != "")
                        dietValue += Resources.Qola.UIverbiage.RegularDiet;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "33DV") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.VegetarianDiet;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "18DL") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.LowSodium;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "19DD") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.Diabetic;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "20LF") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.LowFat;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "21DC") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.LowCholesterol;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "22DP") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.LowPotassium;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "23DG") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.GlutenFree;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "24DV") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.LowVitaminK;
                    }
                    Phrase dietPharse = new Phrase();

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition"].ToString(), "2NC") != "")
                    {
                        if (dietValue != "")
                        {
                            dietValue += "\n";
                        }
                        dietValue += Resources.Qola.UIverbiage.Other;
                    }
                    dietPharse = new Phrase(dietValue, tableFont);
                    if (dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet_other"].ToString() != "")
                    {
                        Chunk otherChunk = new Chunk("\n" + Resources.Qola.UIverbiage.Other, fontBoldText);
                        dietPharse.Add(otherChunk);
                        dietPharse.Add(new Chunk(":\n" + dsAssessmentDetails.Tables[0].Rows[0]["fd_nutrition_diet_other"].ToString(), tableFont));
                    }

                    PdfPCell dietValueCell = new PdfPCell(dietPharse);
                    tblNutrition.AddCell(dietValueCell);
                    AssessmentTable.AddCell(tblNutrition);

                    tblNutrition = new PdfPTable(1);
                    tblNutrition.WidthPercentage = 100f;
                    tblNutrition.SetWidths(new float[] { 1f });

                    PdfPCell allergies = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AllergiesSensitivities, fontBoldTextSubtitle));
                    allergies.HorizontalAlignment = Element.ALIGN_CENTER;
                    allergies.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblNutrition.AddCell(allergies);
                    PdfPCell allergiesNoteValue = new PdfPCell(new Phrase(PrintDietAllergies(resident.ID), tableFont));
                    allergiesNoteValue.MinimumHeight = 15f;
                    tblNutrition.AddCell(allergiesNoteValue);

                    PdfPCell appietite = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Appetite, fontBoldTextSubtitle));
                    appietite.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    appietite.HorizontalAlignment = Element.ALIGN_LEFT;
                    tblNutrition.AddCell(appietite);

                    nutrition = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "1AG") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Good;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "2AF") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Fair;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_appetite"].ToString(), "3AP") != "")
                    {
                        if (nutrition != "")
                        {
                            nutrition += ", ";
                        }
                        nutrition += Resources.Qola.UIverbiage.Poor;
                    }
                    PdfPCell appietiteValue = new PdfPCell(new Phrase(nutrition, tableFont));
                    tblNutrition.AddCell(appietiteValue);

                    AssessmentTable.AddCell(tblNutrition);

                    PdfPCell EliminationCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Elimination, fontBoldHeadText));
                    EliminationCell.Colspan = 3;
                    EliminationCell.HorizontalAlignment = Element.ALIGN_CENTER;
                    EliminationCell.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(EliminationCell);

                    PdfPTable tblElimination = new PdfPTable(2);
                    tblElimination.WidthPercentage = 100f;
                    tblElimination.SetWidths(wthAssessed);

                    PdfPCell bladder = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bladder, fontBoldTextSubtitle));
                    bladder.HorizontalAlignment = Element.ALIGN_CENTER;
                    bladder.Colspan = 2;
                    bladder.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblElimination.AddCell(bladder);
                    string elimination = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC") != "")
                    {
                        tblElimination.AddCell(BlaContinent);
                        PdfPCell BlaContinentOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC") != "")
                        {
                            BlaContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1EC"), fontBoldTextOP));
                        }
                        tblElimination.AddCell(BlaContinentOP);
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI") != "")
                    {
                        PdfPCell BlaIncontinence = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Incontinence, tableFont));
                        tblElimination.AddCell(BlaIncontinence);
                        PdfPCell BlaInContinentOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI") != "")
                        {
                            BlaInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2EI"), fontBoldTextOP));
                        }
                        tblElimination.AddCell(BlaInContinentOP);
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO") != "")
                    {
                        tblElimination.AddCell(BlaOCCInContinent);
                        PdfPCell BlaOCCInContinentOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO") != "")
                        {
                            BlaOCCInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BO"), fontBoldTextOP));
                        }
                        tblElimination.AddCell(BlaOCCInContinentOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA") != "")
                    {
                        PdfPCell BlaCatheter = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Catheter, tableFont));
                        tblElimination.AddCell(BlaCatheter);
                        PdfPCell BlaCatheterOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA") != "")
                        {
                            BlaCatheterOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3EA"), fontBoldTextOP));
                        }
                        tblElimination.AddCell(BlaCatheterOP);
                    }
                    AssessmentTable.AddCell(tblElimination);

                    tblElimination = new PdfPTable(2);
                    tblElimination.WidthPercentage = 100f;
                    tblElimination.SetWidths(wthAssessed);

                    PdfPCell bowel = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bowel, fontBoldTextSubtitle));
                    bowel.Colspan = 2;
                    bowel.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblElimination.AddCell(bowel);


                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1BC") != "")
                    {
                        tblElimination.AddCell(BlaContinent);
                        PdfPCell BowContinentOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1BC") != "")
                        {
                            BowContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "1BC"), fontBoldTextOP));
                        }
                        tblElimination.AddCell(BowContinentOP);
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2BI") != "")
                    {
                        PdfPCell BowIncontinence = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FRA_Incontinence, tableFont));
                        tblElimination.AddCell(BowIncontinence);
                        PdfPCell BowInContinentOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2BI") != "")
                        {
                            BowInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "2BI"), fontBoldTextOP));
                        }
                        tblElimination.AddCell(BowInContinentOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BN") != "")
                    {
                        tblElimination.AddCell(BlaOCCInContinent);
                        PdfPCell BowOCCInContinentOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BN") != "")
                        {
                            BowOCCInContinentOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "4BN"), fontBoldTextOP));
                        }
                        tblElimination.AddCell(BowOCCInContinentOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3BO") != "")
                    {
                        PdfPCell Ostomy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Ostomy, tableFont));
                        tblElimination.AddCell(Ostomy);
                        PdfPCell OstomyOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3BO") != "")
                        {
                            OstomyOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_elimination_bladder"].ToString(), "3BO"), fontBoldTextOP));
                        }
                        tblElimination.AddCell(OstomyOP);
                    }

                    AssessmentTable.AddCell(tblElimination);

                    tblElimination = new PdfPTable(2);
                    tblElimination.WidthPercentage = 100f;
                    tblElimination.SetWidths(wthAssessed);

                    PdfPCell ContinenceProducts = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ContinenceProducts, fontBoldTextSubtitle));
                    ContinenceProducts.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    ContinenceProducts.Colspan = 2;
                    tblElimination.AddCell(ContinenceProducts);

                    var getvalue = dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_Name"].ToString();
                    var pharse24 = new Phrase();
                    pharse24.Add(new Chunk(Resources.Qola.UIverbiage.Name + "/" + Resources.Qola.UIverbiage.Code + ": ", fontBoldText));
                    pharse24.Add(new Chunk(getvalue, tableFont));
                    PdfPCell nameCode = new PdfPCell(new Phrase(pharse24));
                    nameCode.Colspan = 2;
                    tblElimination.AddCell(nameCode);
                    string continenceSelectedValues = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "16BS") != "")
                    {
                        continenceSelectedValues = Resources.Qola.UIverbiage.SSmall;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "17BM") != "")
                    {
                        if (continenceSelectedValues != "")
                        {
                            continenceSelectedValues += ", ";
                        }
                        continenceSelectedValues += Resources.Qola.UIverbiage.MMedium;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "18BL") != "")
                    {
                        if (continenceSelectedValues != "")
                        {
                            continenceSelectedValues += ", ";
                        }
                        continenceSelectedValues += Resources.Qola.UIverbiage.LLarge;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "19BX") != "")
                    {
                        if (continenceSelectedValues != "")
                        {
                            continenceSelectedValues += ", ";
                        }
                        continenceSelectedValues += Resources.Qola.UIverbiage.XLExtraLarge;
                    }

                    var phrase11 = new Phrase();
                    phrase11.Add(new Chunk(Resources.Qola.UIverbiage.ContinenceProducts + ": ", fontBoldText));
                    phrase11.Add(new Chunk(continenceSelectedValues, tableFont));
                    PdfPCell continenceSelected = new PdfPCell(new Phrase(phrase11));

                    continenceSelected.Colspan = 2;
                    tblElimination.AddCell(continenceSelected);

                    var phrase12 = new Phrase();
                    phrase12.Add(new Chunk(Resources.Qola.UIverbiage.Supplier + ": ", fontBoldText));
                    phrase12.Add(new Chunk(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_supplier"].ToString(), tableFont));
                    PdfPCell continenceSupplier = new PdfPCell(new Phrase(phrase12));

                    continenceSupplier.Colspan = 2;
                    tblElimination.AddCell(continenceSupplier);

                    AssessmentTable.AddCell(tblElimination);

                    string newt1 = dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_completed_by"].ToString();
                    var pharse51 = new Phrase();
                    pharse51.Add(new Chunk(Resources.Qola.UIverbiage.Continence + " " + Resources.Qola.UIverbiage.AssessmentCompletedBy + ": ", fontBoldText));
                    pharse51.Add(new Chunk(newt1, tableFont));
                    PdfPCell Completedby = new PdfPCell(new Phrase(pharse51));

                    Completedby.Colspan = 2;
                    AssessmentTable.AddCell(Completedby);

                    PdfPCell CompletedDate = new PdfPCell(new Phrase(dsAssessmentDetails.Tables[0].Rows[0]["fd_continence_date"].ToString(), tableFont));
                    AssessmentTable.AddCell(CompletedDate);

                    PdfPCell Toileting = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Toileting, fontHDBoldText));
                    Toileting.BackgroundColor = BaseColor.LIGHT_GRAY;
                    Toileting.HorizontalAlignment = Element.ALIGN_CENTER;
                    Toileting.Colspan = 3;
                    AssessmentTable.AddCell(Toileting);
                    string toileting = string.Empty;

                    PdfPTable tbltoilet = new PdfPTable(1);
                    tbltoilet.WidthPercentage = 100f;
                    tbltoilet.SetWidths(new float[] { 1f });

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "1TI") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "3TN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "2TA") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.Assistance;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "4T1") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.OnePersonAssist;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "5T2") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.TwoPersonAssist;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "6TT") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.ToiletRoutine;
                    }
                    PdfPCell toiletCell = new PdfPCell(new Phrase(toileting, tableFont));
                    tbltoilet.AddCell(toiletCell);
                    AssessmentTable.AddCell(tbltoilet);

                    tbltoilet = new PdfPTable(1);
                    tbltoilet.WidthPercentage = 100f;
                    tbltoilet.SetWidths(new float[] { 1f });


                    PdfPCell bathRoomCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Bathroom, tableFont));
                    tbltoilet.AddCell(bathRoomCell);
                    PdfPCell CommodeCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Commode, tableFont));
                    tbltoilet.AddCell(CommodeCell);
                    PdfPCell BedpanUrinalCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.BedpanUrinal, tableFont));
                    tbltoilet.AddCell(BedpanUrinalCell);

                    PdfPCell toiletCellTable1 = new PdfPCell(tbltoilet);
                    AssessmentTable.AddCell(toiletCellTable1);


                    tbltoilet = new PdfPTable(1);
                    tbltoilet.WidthPercentage = 100f;
                    tbltoilet.SetWidths(new float[] { 1f });
                    toileting = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "7BD") != "")
                    {
                        toileting += Resources.Qola.UIverbiage.D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "8BE") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.E;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "9BN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.N;
                    }
                    PdfPCell bathRoom = new PdfPCell(new Phrase(toileting, tableFont));
                    bathRoom.MinimumHeight = 13f;
                    tbltoilet.AddCell(bathRoom);

                    toileting = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "10CD") != "")
                    {
                        toileting += Resources.Qola.UIverbiage.D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "11CE") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.E;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "12CN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.N;
                    }
                    PdfPCell commode = new PdfPCell(new Phrase(toileting, tableFont));
                    commode.MinimumHeight = 13f;
                    tbltoilet.AddCell(commode);
                    toileting = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "13UD") != "")
                    {
                        toileting += Resources.Qola.UIverbiage.D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "14UE") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.E;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_toileting"].ToString(), "15UN") != "")
                    {
                        if (toileting != "")
                        {
                            toileting += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.N;
                    }
                    PdfPCell bedPan = new PdfPCell(new Phrase(toileting, tableFont));
                    bedPan.MinimumHeight = 13f;
                    tbltoilet.AddCell(bedPan);

                    PdfPCell toiletCellTable = new PdfPCell(tbltoilet);
                    toiletCellTable.Colspan = 3;
                    AssessmentTable.AddCell(toiletCellTable);

                    PdfPTable tblMedication = new PdfPTable(1);
                    tblMedication.WidthPercentage = 100f;
                    tblMedication.SetWidths(new float[] { 1f });

                    PdfPCell medication = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Medication1, fontHDBoldText));
                    medication.BackgroundColor = BaseColor.LIGHT_GRAY;
                    medication.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblMedication.AddCell(medication);
                    string Assistance = String.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "9AA") != "")
                    {
                        if (Assistance != "")
                        {
                            Assistance += ", ";
                        }
                        Assistance = Resources.Qola.UIverbiage.AB;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "10AS") != "")
                    {
                        if (Assistance != "")
                        {
                            Assistance += ", ";
                        }
                        Assistance = Resources.Qola.UIverbiage.SK;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "11AM") != "")
                    {
                        Assistance = Resources.Qola.UIverbiage.MB;
                    }
                    if (Assistance != "")
                    {
                        Assistance = Assistance.TrimEnd();
                        if (Assistance.EndsWith(","))
                        {
                            Assistance = Assistance.TrimEnd(',');
                        }
                    }
                    string Administration = String.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "12AO") != "")
                    {
                        if (Administration != "")
                        {
                            Administration += ", ";
                        }
                        Administration = Resources.Qola.UIverbiage.AdministrationON;
                    }
                    else if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "13AQ") != "")
                    {
                        if (Administration != "")
                        {
                            Administration += ", ";
                        }
                        Administration = Resources.Qola.UIverbiage.QC;
                    }
                    if (Administration != "")
                    {
                        Administration = Administration.TrimEnd();
                        if (Administration.EndsWith(","))
                        {
                            Administration = Administration.TrimEnd(',');
                        }
                    }

                    string medicationSelected = string.Empty;

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "1MS") != "")
                    {
                        if (medicationSelected != "")
                        {
                            medicationSelected += ", ";
                        }
                        medicationSelected += Resources.Qola.UIverbiage.Self;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "2ML") != "")
                    {
                        if (medicationSelected != "")
                        {
                            medicationSelected += ", ";
                        }
                        medicationSelected += Resources.Qola.UIverbiage.Home;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_administration"].ToString(), "3MA") != "")
                    {
                        if (medicationSelected != "")
                        {
                            medicationSelected += ", ";
                        }
                        medicationSelected += Resources.Qola.UIverbiage.Agency;
                    }
                    if (medicationSelected != "")
                    {
                        medicationSelected = medicationSelected.TrimEnd();
                        if (medicationSelected.EndsWith(", "))
                        {
                            medicationSelected = medicationSelected.TrimEnd(',');
                        }
                    }
                    var pharse46 = new Phrase();
                    if (Administration != "")
                    {
                        pharse46.Add(new Chunk(Resources.Qola.UIverbiage.Administration + ": ", fontBoldText));
                        pharse46.Add(new Chunk(Administration + "  ", tableFont));
                    }
                    else if (Assistance != "")
                    {
                        pharse46.Add(new Chunk(Resources.Qola.UIverbiage.Assistance + ": ", fontBoldText));
                        pharse46.Add(new Chunk(Assistance + "  ", tableFont));
                    }

                    PdfPCell medicationAdminCell = new PdfPCell(new Phrase(pharse46));

                    tblMedication.AddCell(medicationAdminCell);

                    Phrase completedBy = new Phrase(Resources.Qola.UIverbiage.CompletedBy + ":  ", fontBoldText);
                    if (medicationSelected != "")
                    {
                        completedBy.Add(new Chunk(medicationSelected, tableFont));
                    }
                    PdfPCell medicationCompletedCell = new PdfPCell(new Phrase(completedBy));

                    tblMedication.AddCell(medicationCompletedCell);

                    if (medicationSelected != "")
                    {
                        var pharse45 = new Phrase();
                        string new3 = dsAssessmentDetails.Tables[0].Rows[0]["fd_medication_Pharmacy"].ToString();
                        pharse45.Add(new Chunk(Resources.Qola.UIverbiage.Pharmacy + ": ", fontBoldText));
                        pharse45.Add(new Chunk(new3, tableFont));
                        PdfPCell txtMedPharmacyprovider = new PdfPCell(new Phrase(pharse45));
                        medicationSelected = "";
                        tblMedication.AddCell(txtMedPharmacyprovider);
                    }
                    PdfPCell medicationCell = new PdfPCell(tblMedication);
                    medicationCell.Colspan = 3;
                    AssessmentTable.AddCell(medicationCell);

                    PdfPCell sensory = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SensoryAbilities, fontHDBoldText));
                    sensory.BackgroundColor = BaseColor.LIGHT_GRAY;
                    sensory.HorizontalAlignment = Element.ALIGN_CENTER;
                    sensory.Colspan = 3;
                    AssessmentTable.AddCell(sensory);
                    string sensorySelectedValues = string.Empty;

                    PdfPTable tblSensor = new PdfPTable(1);
                    tblSensor.WidthPercentage = 100f;
                    tblSensor.SetWidths(new float[] { 1f });
                    PdfPCell vision = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Vision, fontBoldTextSubtitle));
                    vision.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSensor.AddCell(vision);

                    string sensorSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "12VU") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Unimpaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "2VI") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Impaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "8VIL") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "9VIR") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "3VB") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Blind;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "6VL") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.BlindLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "7VR") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.BlindRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "4VG") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Glasses;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_vision"].ToString(), "5VC") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ContactLens;
                    }
                    if (sensorSelected != "")
                    {
                        sensorSelected = sensorSelected.TrimEnd();
                        if (sensorSelected.EndsWith(","))
                        {
                            sensorSelected = sensorSelected.TrimEnd(',');
                        }
                    }
                    PdfPCell visionCell = new PdfPCell(new Phrase(sensorSelected, tableFont));
                    visionCell.MinimumHeight = 55f;
                    tblSensor.AddCell(visionCell);

                    AssessmentTable.AddCell(tblSensor);

                    tblSensor = new PdfPTable(1);
                    tblSensor.WidthPercentage = 100f;
                    tblSensor.SetWidths(new float[] { 1f });
                    PdfPCell hear = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Hearing, fontBoldTextSubtitle));
                    hear.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSensor.AddCell(hear);

                    sensorSelected = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "14HU") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Unimpaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "2HI") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Impaired;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "9HM") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "10HP") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.ImpairedRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "3HD") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.Deaf;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "11HE") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.DeafLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "12HA") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        toileting += Resources.Qola.UIverbiage.DeafRight;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "15HH") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.HearingAid;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "4HL") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.HearingAidLeft;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_SA_hearing"].ToString(), "5HR") != "")
                    {
                        if (sensorSelected != "")
                        {
                            sensorSelected += ", ";
                        }
                        sensorSelected += Resources.Qola.UIverbiage.HearingAidRight;
                    }
                    if (sensorSelected != "")
                    {
                        sensorSelected = sensorSelected.TrimEnd();
                        if (sensorSelected.EndsWith(","))
                        {
                            sensorSelected = sensorSelected.TrimEnd(',');
                        }
                    }
                    PdfPCell hearingCell = new PdfPCell(new Phrase(sensorSelected, tableFont));
                    hearingCell.MinimumHeight = 15f;
                    tblSensor.AddCell(hearingCell);

                    AssessmentTable.AddCell(tblSensor);
                    AssessmentTable.AddCell(new PdfPCell());

                    PdfPCell communication = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Communication + "/" + Resources.Qola.UIverbiage.Speech, fontHDBoldText));
                    communication.Colspan = 3;
                    communication.HorizontalAlignment = Element.ALIGN_CENTER;
                    communication.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(communication);

                    PdfPTable tblCommunication = new PdfPTable(2);
                    tblCommunication.WidthPercentage = 100f;
                    tblCommunication.SetWidths(wthAssessed);


                    PdfPCell txtLanguageSpoken = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Language, fontBoldText));
                    txtLanguageSpoken.Colspan = 2;
                    tblCommunication.AddCell(txtLanguageSpoken);
                    PdfPCell txtLanguageSpokenOP = new PdfPCell();
                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString()))
                    {
                        txtLanguageSpokenOP = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Spoken + ": " + dsAssessmentDetails.Tables[0].Rows[0]["fd_language_spoken"].ToString(), tableFont));
                        txtLanguageSpokenOP.Colspan = 2;
                        txtLanguageSpokenOP.FixedHeight = 15;
                    }
                    tblCommunication.AddCell(txtLanguageSpokenOP);
                    AssessmentTable.AddCell(tblCommunication);

                    tblCommunication = new PdfPTable(2);
                    tblCommunication.WidthPercentage = 100f;
                    tblCommunication.SetWidths(wthAssessed);



                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "10SU") != "")
                    {
                        tblCommunication.AddCell(new Phrase(Resources.Qola.UIverbiage.Unimpaired, tableFont));
                        PdfPCell UnimpairedOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "10SU") != "")
                        {
                            UnimpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "10SU"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(UnimpairedOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL") != "")
                    {
                        PdfPCell ImpairedAbility = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ImpairedAbilityToCommunicateAndUnderstand, tableFont));
                        tblCommunication.AddCell(ImpairedAbility);
                        PdfPCell ImpairedAbilityOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL") != "")
                        {
                            ImpairedAbilityOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "3CL"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(ImpairedAbilityOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD") != "")
                    {
                        PdfPCell Difficultyincommunicating = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficultyincommunicating, tableFont));
                        tblCommunication.AddCell(Difficultyincommunicating);
                        PdfPCell DifficultyincommunicatingOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD") != "")
                        {
                            DifficultyincommunicatingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "6CD"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(DifficultyincommunicatingOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI") != "")
                    {
                        PdfPCell Difficultyinunderstanding = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Difficultyinunderstanding, tableFont));
                        tblCommunication.AddCell(Difficultyinunderstanding);
                        PdfPCell DifficultyinunderstandingOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI") != "")
                        {
                            DifficultyinunderstandingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "7CI"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(DifficultyinunderstandingOP);
                    }

                    AssessmentTable.AddCell(tblCommunication);

                    tblCommunication = new PdfPTable(2);
                    tblCommunication.WidthPercentage = 100f;
                    tblCommunication.SetWidths(wthAssessed);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU") != "")
                    {
                        PdfPCell SpeUnderstandsInstruction = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Languagebarrier, tableFont));
                        tblCommunication.AddCell(SpeUnderstandsInstruction);
                        PdfPCell SpeUnderstandsInstructionOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU") != "")
                        {
                            SpeUnderstandsInstructionOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "4CU"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(SpeUnderstandsInstructionOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS") != "")
                    {
                        PdfPCell SpeSpeechUnimpaired = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.UnderstandsInstruction, tableFont));
                        tblCommunication.AddCell(SpeSpeechUnimpaired);
                        PdfPCell SpeSpeechUnimpairedOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS") != "")
                        {
                            SpeSpeechUnimpairedOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication"].ToString(), "5CS"), fontBoldTextOP));
                        }
                        tblCommunication.AddCell(SpeSpeechUnimpairedOP);
                    }

                    string txtSpeCommentcy = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_communication_comments"].ToString());
                    var pharse40 = new Phrase();
                    pharse40.Add(new Chunk(Resources.Qola.UIverbiage.Other + ": ", fontBoldText));
                    pharse40.Add(new Chunk(txtSpeCommentcy, tableFont));
                    PdfPCell txtSpeCommentsOP = new PdfPCell(new Phrase(pharse40));

                    txtSpeCommentsOP.Colspan = 2;
                    tblCommunication.AddCell(txtSpeCommentsOP);

                    AssessmentTable.AddCell(tblCommunication);

                    PdfPTable tblWoundCare = new PdfPTable(1);
                    tblWoundCare.SetWidths(new float[] { 1f });
                    tblWoundCare.WidthPercentage = 100f;

                    PdfPCell woundCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Woundcare, fontHDBoldText));
                    woundCare.BackgroundColor = BaseColor.LIGHT_GRAY;
                    woundCare.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblWoundCare.AddCell(woundCare);
                    string woundCareSelecetd = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "Y") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_care"].ToString(), "N") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.No;
                    }

                    var pharse41 = new Phrase();
                    pharse41.Add(new Chunk(Resources.Qola.UIverbiage.Woundcare + ": ", fontBoldTextSubtitle));
                    pharse41.Add(new Chunk(woundCareSelecetd, tableFont));
                    PdfPCell woundCareCell = new PdfPCell(new Phrase(pharse41));

                    tblWoundCare.AddCell(woundCareCell);

                    woundCareSelecetd = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "1WH") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Home;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_WC_assists"].ToString(), "2WA") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Agency;
                    }
                    var pharse38 = new Phrase();
                    pharse38.Add(new Chunk(Resources.Qola.UIverbiage.Assistedby + ": ", fontBoldText));
                    pharse38.Add(new Chunk(woundCareSelecetd, tableFont));
                    PdfPCell woundCareAssisstedBy = new PdfPCell(new Phrase(pharse38));

                    tblWoundCare.AddCell(woundCareAssisstedBy);

                    string getwondercareagency = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_wound_agency"].ToString());
                    var pharse39 = new Phrase();
                    pharse39.Add(new Chunk(Resources.Qola.UIverbiage.Agencyname + ": ", fontBoldText));
                    pharse39.Add(new Chunk(getwondercareagency, tableFont));
                    PdfPCell woundCareAgency = new PdfPCell(new Phrase(pharse39));

                    tblWoundCare.AddCell(woundCareAgency);

                    woundCareSelecetd = "";
                    PdfPCell skinCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SkinCare, fontBoldTextSubtitle));
                    skinCare.BackgroundColor = BaseColor.LIGHT_GRAY;
                    skinCare.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblWoundCare.AddCell(skinCare);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "67SN") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.No;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_personal_hygiene"].ToString(), "68SY") != "")
                    {
                        woundCareSelecetd = Resources.Qola.UIverbiage.Yes;
                    }
                    var pharse37 = new Phrase();
                    pharse37.Add(new Chunk(Resources.Qola.UIverbiage.SkinCare + ": ", fontBoldText));
                    pharse37.Add(new Chunk(woundCareSelecetd, tableFont));
                    PdfPCell skinCareCell = new PdfPCell(new Phrase(pharse37));

                    tblWoundCare.AddCell(skinCareCell);

                    string new1 = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_skincare_treatment"].ToString());
                    var pharse42 = new Phrase();
                    pharse42.Add(new Chunk(Resources.Qola.UIverbiage.SpecialTreatements + ": ", fontBoldText));
                    pharse42.Add(new Chunk(new1, tableFont));
                    PdfPCell skinCareTreatmentCell = new PdfPCell(new Phrase(pharse42));

                    tblWoundCare.AddCell(skinCareTreatmentCell);

                    PdfPCell woundCareTableCell = new PdfPCell(tblWoundCare);
                    woundCareTableCell.Colspan = 3;
                    AssessmentTable.AddCell(woundCareTableCell);


                    PdfPCell specialNeeds = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialNeeds, fontHDBoldText));
                    specialNeeds.Colspan = 3;
                    specialNeeds.HorizontalAlignment = Element.ALIGN_CENTER;
                    specialNeeds.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(specialNeeds);

                    PdfPTable oxygenTable = new PdfPTable(2);
                    oxygenTable.WidthPercentage = 100f;
                    oxygenTable.SetWidths(new float[] { 1f, 1f });

                    PdfPTable tblSpecialNeeds = new PdfPTable(1);
                    tblSpecialNeeds.WidthPercentage = 100f;
                    tblSpecialNeeds.SetWidths(new float[] { 1f });
                    PdfPCell oxygen = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.O2Oxygen, fontBoldTextSubtitle));
                    oxygen.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSpecialNeeds.AddCell(oxygen);

                    string speaiclNeedSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "7ON") != "")
                    {
                        speaiclNeedSelected = Resources.Qola.UIverbiage.NA;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "1OI") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "2OS") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "3OA") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9OD") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Dependent;
                    }

                    var pharse28 = new Phrase();
                    pharse28.Add(new Chunk(Resources.Qola.UIverbiage.O2Oxygen + ": ", fontBoldTextSubtitle));
                    pharse28.Add(new Chunk(speaiclNeedSelected, tableFont));
                    PdfPCell oxySelect = new PdfPCell(new Phrase(pharse28));

                    tblSpecialNeeds.AddCell(oxySelect);

                    Phrase o2Supplier = new Phrase(Resources.Qola.UIverbiage.Supplier, fontBoldText);


                    speaiclNeedSelected = ": ";

                    speaiclNeedSelected += dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_supplier"].ToString();
                    o2Supplier.Add(new Chunk(speaiclNeedSelected, tableFont));

                    PdfPCell oxySupplier = new PdfPCell(new Phrase(o2Supplier));
                    tblSpecialNeeds.AddCell(oxySupplier);


                    string o2Rate = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_O2_rate"].ToString());
                    var o2Ratepharse = new Phrase();
                    o2Ratepharse.Add(new Chunk(Resources.Qola.UIverbiage.Rate + " (" + Resources.Qola.UIverbiage.Lmin + ")" + ": ", fontBoldText));
                    o2Ratepharse.Add(new Chunk(o2Rate, tableFont));
                    PdfPCell txtRateOP = new PdfPCell(new Phrase(o2Ratepharse));

                    tblSpecialNeeds.AddCell(txtRateOP);
                    oxygenTable.AddCell(tblSpecialNeeds);

                    Phrase OxygenOther = new Phrase(Resources.Qola.UIverbiage.Others, fontBoldText);

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_O2_note"].ToString()))
                    {
                        OxygenOther.Add(new Chunk(":\n" + dsAssessmentDetails.Tables[0].Rows[0]["fd_O2_note"].ToString(), tableFont));
                    }
                    PdfPCell specislNeedO2Other = new PdfPCell(new Phrase(OxygenOther));
                    oxygenTable.AddCell(specislNeedO2Other);

                    PdfPCell oxyCell = new PdfPCell(oxygenTable);
                    oxyCell.Colspan = 3;
                    AssessmentTable.AddCell(oxyCell);


                    oxygenTable = new PdfPTable(2);
                    oxygenTable.WidthPercentage = 100f;
                    oxygenTable.SetWidths(new float[] { 1f, 1f });

                    tblSpecialNeeds = new PdfPTable(1);
                    tblSpecialNeeds.WidthPercentage = 100f;
                    tblSpecialNeeds.SetWidths(new float[] { 1f });
                    PdfPCell cpap = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CPAP, fontBoldTextSubtitle));
                    cpap.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSpecialNeeds.AddCell(cpap);
                    speaiclNeedSelected = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "9CN") != "")
                    {
                        speaiclNeedSelected = Resources.Qola.UIverbiage.NA;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "4CI") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Independent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "5CS") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Supervised;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "6CA") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Assisted;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "17CD") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.Dependent;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "13CS4") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.SL4;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "15CSD4") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.SL4D;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_special_needs"].ToString(), "16CP") != "")
                    {
                        if (speaiclNeedSelected != "")
                        {
                            speaiclNeedSelected += ", ";
                        }
                        speaiclNeedSelected = Resources.Qola.UIverbiage.PrivateSupportive;
                    }
                    if (speaiclNeedSelected != "")
                    {
                        speaiclNeedSelected = speaiclNeedSelected.TrimEnd();
                        if (speaiclNeedSelected.EndsWith(","))
                        {
                            speaiclNeedSelected = speaiclNeedSelected.TrimEnd(',');
                        }
                    }
                    var pharse35 = new Phrase();
                    pharse35.Add(new Chunk(Resources.Qola.UIverbiage.CPAP + ": ", fontBoldText));
                    pharse35.Add(new Chunk(speaiclNeedSelected, tableFont));
                    PdfPCell cpapSelect = new PdfPCell(new Phrase(pharse35));

                    tblSpecialNeeds.AddCell(cpapSelect);

                    string gettxtspneed = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_other"].ToString());
                    var pharse36 = new Phrase();
                    pharse36.Add(new Chunk(Resources.Qola.UIverbiage.Supplier + ": ", fontBoldText));
                    pharse36.Add(new Chunk(gettxtspneed, tableFont));
                    PdfPCell txtSPNeedOtherOP = new PdfPCell(new Phrase(pharse36));

                    tblSpecialNeeds.AddCell(txtSPNeedOtherOP);

                    oxygenTable.AddCell(tblSpecialNeeds);

                    Phrase CpAPOther = new Phrase(Resources.Qola.UIverbiage.Others, fontBoldText);

                    if (!String.IsNullOrEmpty(dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_comments"].ToString()))
                    {
                        CpAPOther.Add(new Chunk(":\n" + dsAssessmentDetails.Tables[0].Rows[0]["fd_SN_comments"].ToString(), tableFont));
                    }
                    PdfPCell specislNeedOther = new PdfPCell(new Phrase(CpAPOther));
                    oxygenTable.AddCell(specislNeedOther);
                    PdfPCell cpapCell1 = new PdfPCell(oxygenTable);
                    cpapCell1.Colspan = 3;

                    AssessmentTable.AddCell(cpapCell1);

                    PdfPCell specialEquipement = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialEquipment, fontBoldHeadText));
                    specialEquipement.Colspan = 3;
                    specialEquipement.HorizontalAlignment = Element.ALIGN_CENTER;
                    specialEquipement.BackgroundColor = BaseColor.LIGHT_GRAY;
                    AssessmentTable.AddCell(specialEquipement);

                    PdfPTable tblSpecialEquipment = new PdfPTable(2);
                    tblSpecialEquipment.WidthPercentage = 100f;
                    tblSpecialEquipment.SetWidths(wthAssessed);
                    PdfPCell specialEquipements = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecialEquipment, fontBoldTextSubtitle));
                    specialEquipements.HorizontalAlignment = Element.ALIGN_CENTER;
                    specialEquipements.Colspan = 2;
                    specialEquipements.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblSpecialEquipment.AddCell(specialEquipements);

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "1SEN") != "")
                    {
                        tblSpecialEquipment.AddCell(NA);
                        PdfPCell NAOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "1SEN") != "")
                        {
                            NAOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "1SEN"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(NAOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "2SP") != "")
                    {
                        tblSpecialEquipment.AddCell(Pendant);
                        PdfPCell PendantOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "2SP") != "")
                        {
                            PendantOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "2SP"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(PendantOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "3SET") != "")
                    {
                        PdfPCell Stocking = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.TEDstocking, tableFont));
                        tblSpecialEquipment.AddCell(Stocking);
                        PdfPCell StockingOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "3SET") != "")
                        {
                            StockingOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "3SET"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(StockingOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "4SES") != "")
                    {
                        PdfPCell SupportBrace = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Supportbrace, tableFont));
                        tblSpecialEquipment.AddCell(SupportBrace);
                        PdfPCell SupportBraceOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "4SES") != "")
                        {
                            SupportBraceOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "4SES"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(SupportBraceOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "5SEO") != "")
                    {
                        PdfPCell Prosthesis = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Prosthesis, tableFont));
                        tblSpecialEquipment.AddCell(Prosthesis);
                        PdfPCell ProsthesisOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "5SEO") != "")
                        {
                            ProsthesisOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "5SEO"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(ProsthesisOP);
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "6SEO") != "")
                    {
                        PdfPCell SEOther = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, tableFont));
                        tblSpecialEquipment.AddCell(SEOther);
                        PdfPCell SEOtherOP = new PdfPCell();
                        if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "6SEO") != "")
                        {
                            SEOtherOP = new PdfPCell(new Phrase(getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_spceial_equipment"].ToString(), "6SEO"), fontBoldTextOP));
                        }
                        tblSpecialEquipment.AddCell(SEOtherOP);
                    }

                    var EquipmentOther = new Phrase();

                    EquipmentOther.Add(new Chunk(Resources.Qola.UIverbiage.Other + ": ", fontBoldText));
                    EquipmentOther.Add(new Chunk(Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_others"].ToString()), tableFont));
                    PdfPCell specialother = new PdfPCell(new Phrase(EquipmentOther));
                    specialother.Colspan = 2;
                    tblSpecialEquipment.AddCell(specialother);

                    string specialsDetails = string.Empty;

                    var pharse43 = new Phrase();
                    pharse43.Add(new Chunk(Resources.Qola.UIverbiage.Details + ": ", fontBoldText));
                    pharse43.Add(new Chunk(Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_SE_details"].ToString()), tableFont));
                    PdfPCell specialDetails = new PdfPCell(new Phrase(pharse43));
                    specialDetails.Colspan = 2;
                    tblSpecialEquipment.AddCell(specialDetails);
                    PdfPCell speCell = new PdfPCell(tblSpecialEquipment);
                    speCell.Colspan = 3;
                    AssessmentTable.AddCell(speCell);

                    PdfPTable tblFamily = new PdfPTable(1);
                    tblFamily.WidthPercentage = 100f;
                    tblFamily.SetWidths(new float[] { 1f });

                    PdfPCell FamilySuupot = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FamilySuport, fontHDBoldText));
                    FamilySuupot.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    FamilySuupot.HorizontalAlignment = Element.ALIGN_CENTER;
                    tblFamily.AddCell(FamilySuupot);
                    string Family = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "Y") != "")
                    {
                        Family = Resources.Qola.UIverbiage.Yes;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family_meeting"].ToString(), "N") != "")
                    {
                        Family = Resources.Qola.UIverbiage.No;
                    }

                    var pharse34 = new Phrase();
                    pharse34.Add(new Chunk(Resources.Qola.UIverbiage.ResidentFamilymeetingtobearranged + ": ", fontBoldText));
                    pharse34.Add(new Chunk(Family, tableFont));
                    PdfPCell ResidentFamilymeetingtobearranged1 = new PdfPCell(new Phrase(pharse34));

                    tblFamily.AddCell(ResidentFamilymeetingtobearranged1);
                    Family = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "4IN") != "")
                    {
                        Family = Resources.Qola.UIverbiage.Never;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "1ID") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.daily;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "2IW") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.Weekly;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "3IM") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.Monthly;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_family"].ToString(), "9FA") != "")
                    {
                        if (Family != "")
                        {
                            Family += ", ";
                        }
                        Family += Resources.Qola.UIverbiage.Annually;
                    }

                    var pharse33 = new Phrase();
                    pharse33.Add(new Chunk(Resources.Qola.UIverbiage.FamilyInvolement + ": ", fontBoldText));
                    pharse33.Add(new Chunk(Family, tableFont));
                    PdfPCell Familyinvolvement = new PdfPCell(new Phrase(pharse33));

                    tblFamily.AddCell(Familyinvolvement);


                    PdfPCell familyTableCell = new PdfPCell(tblFamily);
                    familyTableCell.Colspan = 3;
                    AssessmentTable.AddCell(familyTableCell);

                    PdfPTable tblImmunization = new PdfPTable(2);
                    tblImmunization.WidthPercentage = 100f;
                    tblImmunization.SetWidths(new float[] { 2f, 1f });

                    PdfPCell Immunization = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Immunization, fontHDBoldText));
                    Immunization.BackgroundColor = BaseColor.LIGHT_GRAY;
                    Immunization.HorizontalAlignment = Element.ALIGN_CENTER;
                    Immunization.Colspan = 2;
                    tblImmunization.AddCell(Immunization);
                    string immunization = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "5MU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "20MY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_mantoux"].ToString();
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "40MN") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell mantoux = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Mantoux, tableFont));
                    tblImmunization.AddCell(mantoux);
                    PdfPCell mantouxValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(mantouxValue);
                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "7CU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "21CY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_chest_Xray"].ToString();
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "41CN") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell xRay = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ChestXRay, tableFont));
                    tblImmunization.AddCell(xRay);
                    PdfPCell xRayValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(xRayValue);

                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22PY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_pheumovax"].ToString();
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "42PN") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell Pneumovax = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pneumonia, tableFont));
                    tblImmunization.AddCell(Pneumovax);

                    PdfPCell PneumovaxValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(PneumovaxValue);

                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "3FU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "22FY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_flu_vaccine"].ToString();
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "43FN") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell FluVaccine = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.FluVaccine, tableFont));
                    tblImmunization.AddCell(FluVaccine);

                    PdfPCell FluVaccineValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(FluVaccineValue);

                    immunization = "";
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "9TU") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.Unknow;
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "23TY") != "")
                    {
                        immunization = dsAssessmentDetails.Tables[0].Rows[0]["fd_tetanus"].ToString();
                    }
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "44TN") != "")
                    {
                        immunization = Resources.Qola.UIverbiage.No;
                    }
                    PdfPCell Tetanus = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Tetanus, tableFont));
                    tblImmunization.AddCell(Tetanus);

                    PdfPCell TetanusValue = new PdfPCell(new Phrase(immunization, tableFont));
                    tblImmunization.AddCell(TetanusValue);

                    PdfPCell immunizationTableCell = new PdfPCell(tblImmunization);
                    immunizationTableCell.Colspan = 3;
                    AssessmentTable.AddCell(immunizationTableCell);

                    PdfPCell infection = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.InfectiousDiseases, fontBoldTextSubtitle));
                    infection.HorizontalAlignment = Element.ALIGN_CENTER;
                    infection.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    infection.Colspan = 3;
                    AssessmentTable.AddCell(infection);
                    string infectionSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "29MY") != "")
                    {
                        infectionSelected = Resources.Qola.UIverbiage.Yes;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "45MN") != "")
                    {
                        infectionSelected = Resources.Qola.UIverbiage.No;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "11MU") != "")
                    {
                        if (infectionSelected != "")
                        {
                            infectionSelected += ", ";
                        }
                        infectionSelected += Resources.Qola.UIverbiage.Unknow;
                    }

                    var MRSAvalue = new Phrase();
                    MRSAvalue.Add(new Chunk(Resources.Qola.UIverbiage.MRSA + ": ", fontBoldText));
                    MRSAvalue.Add(new Chunk(infectionSelected, tableFont));
                    PdfPCell infectionValue = new PdfPCell(new Phrase(MRSAvalue));
                    AssessmentTable.AddCell(infectionValue);


                    string getdiag = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_diagnosed"].ToString());

                    string getresol = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_MRSA_resolved"].ToString());
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "29RU") != "" && getresol == "")
                    {
                        getresol = Resources.Qola.UIverbiage.Unknow;
                    }

                    var pharse30 = new Phrase();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "25IU") != "" && getdiag == "")
                    {
                        getdiag = Resources.Qola.UIverbiage.Unknow;
                    }
                    pharse30.Add(new Chunk(Resources.Qola.UIverbiage.Diagnosed + ": ", fontBoldText));
                    pharse30.Add(new Chunk(getdiag, tableFont));
                    PdfPCell diagnosed = new PdfPCell(new Phrase(pharse30));
                    AssessmentTable.AddCell(diagnosed);

                    var pharse31 = new Phrase();
                    pharse31.Add(new Chunk(Resources.Qola.UIverbiage.Resolved + ": ", fontBoldText));
                    pharse31.Add(new Chunk(getresol, tableFont));
                    PdfPCell resolved = new PdfPCell(new Phrase(pharse31));
                    AssessmentTable.AddCell(resolved);

                    string VREinfectionSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "30VY") != "")
                    {
                        VREinfectionSelected = Resources.Qola.UIverbiage.Yes;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "46MN") != "")
                    {
                        VREinfectionSelected = Resources.Qola.UIverbiage.No;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "31VU") != "")
                    {
                        if (VREinfectionSelected != "")
                        {
                            VREinfectionSelected += ", ";
                        }
                        VREinfectionSelected += Resources.Qola.UIverbiage.Unknow;
                    }
                    var VREvalue = new Phrase();
                    VREvalue.Add(new Chunk(Resources.Qola.UIverbiage.VRE + ": ", fontBoldText));
                    VREvalue.Add(new Chunk(VREinfectionSelected, tableFont));
                    PdfPCell VREinfectionValue = new PdfPCell(new Phrase(VREvalue));
                    AssessmentTable.AddCell(VREinfectionValue);

                    string vrediag = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_VRE_diagnosed"].ToString());

                    string vreresol = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_VRE_resolved"].ToString());
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "37VRU") != "" && vreresol == "")
                    {
                        vreresol = Resources.Qola.UIverbiage.Unknow;
                    }

                    var VREdiagnosed = new Phrase();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "36VDU") != "" && vrediag == "")
                    {
                        vrediag = Resources.Qola.UIverbiage.Unknow;
                    }
                    VREdiagnosed.Add(new Chunk(Resources.Qola.UIverbiage.Diagnosed + ": ", fontBoldText));
                    VREdiagnosed.Add(new Chunk(vrediag, tableFont));
                    PdfPCell vrediagnose = new PdfPCell(new Phrase(VREdiagnosed));
                    AssessmentTable.AddCell(vrediagnose);

                    var VREresolved = new Phrase();
                    VREresolved.Add(new Chunk(Resources.Qola.UIverbiage.Resolved + ": ", fontBoldText));
                    VREresolved.Add(new Chunk(vreresol, tableFont));
                    PdfPCell vreresolve = new PdfPCell(new Phrase(VREresolved));
                    AssessmentTable.AddCell(vreresolve);

                    string cdiffinfectionSelected = string.Empty;
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "32CY") != "")
                    {
                        cdiffinfectionSelected = Resources.Qola.UIverbiage.Yes;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "47CN") != "")
                    {
                        cdiffinfectionSelected = Resources.Qola.UIverbiage.No;
                    }

                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "33CU") != "")
                    {
                        if (cdiffinfectionSelected != "")
                        {
                            cdiffinfectionSelected += ", ";
                        }
                        cdiffinfectionSelected += Resources.Qola.UIverbiage.Unknow;
                    }
                    var cdiffvalue = new Phrase();
                    cdiffvalue.Add(new Chunk(Resources.Qola.UIverbiage.CDiff + ": ", fontBoldText));
                    cdiffvalue.Add(new Chunk(cdiffinfectionSelected, tableFont));
                    PdfPCell cdiffinfectionValue = new PdfPCell(new Phrase(cdiffvalue));
                    AssessmentTable.AddCell(cdiffinfectionValue);

                    string cdiffdiag = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_Cdiff_diagnosed"].ToString());
                    string cdiffresol = Convert.ToString(dsAssessmentDetails.Tables[0].Rows[0]["fd_Cdiff_resolved"].ToString());
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "39CRU") != "" && cdiffresol == "")
                    {
                        cdiffresol = Resources.Qola.UIverbiage.Unknow;
                    }

                    var cdiffdiagnosed = new Phrase();
                    if (getValue(dsAssessmentDetails.Tables[0].Rows[0]["fd_immunization"].ToString(), "38CDU") != "" && cdiffdiag == "")
                    {
                        cdiffdiag = Resources.Qola.UIverbiage.Unknow;
                    }
                    cdiffdiagnosed.Add(new Chunk(Resources.Qola.UIverbiage.Diagnosed + ": ", fontBoldText));
                    cdiffdiagnosed.Add(new Chunk(cdiffdiag, tableFont));
                    PdfPCell diffdiagnosed = new PdfPCell(new Phrase(cdiffdiagnosed));
                    AssessmentTable.AddCell(diffdiagnosed);

                    var cdiffresolved = new Phrase();
                    cdiffresolved.Add(new Chunk(Resources.Qola.UIverbiage.Resolved + ": ", fontBoldText));
                    cdiffresolved.Add(new Chunk(cdiffresol, tableFont));
                    PdfPCell diffresolved = new PdfPCell(new Phrase(cdiffresolved));
                    AssessmentTable.AddCell(diffresolved);
                    doc.Add(AssessmentTable);

                }

            }
        }
        catch (Exception ex)
        {
            Log.Write("Progressive Report PrintResidentCareAssessmentP3 | " + ex.Message.ToString());
        }
        return AssessmentTable;
    }

    public PdfPTable ResidentCareSignTable()
    {

        PdfPTable tblSign = new PdfPTable(4);
        tblSign.WidthPercentage = 100f;
        float[] wthtblSign = new float[] { 3f, 3f, .15f, 3f };
        tblSign.SetWidths(wthtblSign);

        PdfPCell AuthorizedbyCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Authorizedby + ": ", ProgressiveReport.fontBoldText));
        AuthorizedbyCell.Colspan = 4;
        AuthorizedbyCell.HorizontalAlignment = Element.ALIGN_CENTER;
        AuthorizedbyCell.BackgroundColor = BaseColor.LIGHT_GRAY;
        tblSign.AddCell(AuthorizedbyCell);

        PdfPCell empty2cell = new PdfPCell();
        empty2cell.Colspan = 6;
        empty2cell.BorderWidthTop = 0;
        empty2cell.BorderWidthBottom = 0;
        empty2cell.FixedHeight = 10f;
        tblSign.AddCell(empty2cell);

        Phrase PrintPhrase = new Phrase("\t\t\t\t\t Print Name: ______________________________________   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Signature: ______________________________________ ", ProgressiveReport.fontBoldText);
        PdfPCell printcell = new PdfPCell(PrintPhrase);
        printcell.Colspan = 4;
        printcell.BorderWidthTop = 0;
        printcell.BorderWidthBottom = 0;
        printcell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(printcell);

        PdfPCell heightCell = new PdfPCell();
        heightCell.FixedHeight = 5f;
        heightCell.Colspan = 4;
        heightCell.BorderWidthTop = 0;
        heightCell.BorderWidthBottom = 0;
        tblSign.AddCell(heightCell);

        PdfPCell empty5cell = new PdfPCell();
        empty5cell.Colspan = 2;
        empty5cell.FixedHeight = 10f;
        empty5cell.BorderWidthTop = 0;
        empty5cell.BorderWidthBottom = 0;
        empty5cell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(empty5cell);

        PdfPCell chkResident = new PdfPCell();
        chkResident.Border = Rectangle.BOX;
        tblSign.AddCell(chkResident);

        PdfPCell Resident = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Resident, ProgressiveReport.fontBoldText));
        Resident.BorderWidthTop = 0;
        Resident.BorderWidthBottom = 0;
        Resident.BorderWidthLeft = 0;
        tblSign.AddCell(Resident);

        tblSign.AddCell(heightCell);

        Phrase DatePhrase = new Phrase("\t\t\t\t\t Date: ______________________________________  ", ProgressiveReport.fontBoldText);
        PdfPCell Datecell = new PdfPCell(DatePhrase);
        Datecell.Colspan = 2;
        Datecell.BorderWidthTop = 0;
        Datecell.BorderWidthBottom = 0;
        Datecell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(Datecell);


        PdfPCell chkPOA = new PdfPCell();
        chkPOA.Border = Rectangle.BOX;
        chkPOA.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(chkPOA);

        PdfPCell POA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POA, ProgressiveReport.fontBoldText));
        POA.HorizontalAlignment = Element.ALIGN_LEFT;
        POA.BorderWidthTop = 0;
        POA.BorderWidthBottom = 0;
        POA.BorderWidthLeft = 0;
        tblSign.AddCell(POA);

        PdfPCell empty1cell = new PdfPCell();
        empty1cell.Colspan = 4;
        empty1cell.FixedHeight = 10f;
        empty1cell.BorderWidthTop = 0;
        empty1cell.BorderWidthBottom = 0;
        empty1cell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(empty1cell);

        PdfPCell CompletedbyCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CompletedBy + ": ", ProgressiveReport.fontBoldText));
        CompletedbyCell.Colspan = 4;
        CompletedbyCell.HorizontalAlignment = Element.ALIGN_CENTER;
        CompletedbyCell.BackgroundColor = BaseColor.LIGHT_GRAY;
        tblSign.AddCell(CompletedbyCell);

        PdfPCell empty3cell = new PdfPCell();
        empty3cell.Colspan = 4;
        empty3cell.BorderWidthTop = 0;
        empty3cell.BorderWidthBottom = 0;
        empty3cell.FixedHeight = 10f;
        tblSign.AddCell(empty3cell);

        Phrase Print1Phrase = new Phrase("\t\t\t\t\t Print Name: ______________________________________   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Signature: ______________________________________ ", ProgressiveReport.fontBoldText);
        PdfPCell print1cell = new PdfPCell(Print1Phrase);
        print1cell.Colspan = 4;
        print1cell.BorderWidthTop = 0;
        print1cell.BorderWidthBottom = 0;
        print1cell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(print1cell);

        PdfPCell empty4cell = new PdfPCell();
        empty4cell.Colspan = 6;
        empty4cell.BorderWidthTop = 0;
        empty4cell.BorderWidthBottom = 0;
        empty4cell.FixedHeight = 10f;
        tblSign.AddCell(empty4cell);

        Phrase Date1Phrase = new Phrase("\t\t\t\t\t Date: ______________________________________  ", ProgressiveReport.fontBoldText);
        PdfPCell Date1cell = new PdfPCell(Date1Phrase);
        Date1cell.Colspan = 4;
        Date1cell.BorderWidthTop = 0;
        Date1cell.BorderWidthBottom = 0;
        Date1cell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(Date1cell);

        PdfPCell emptycell = new PdfPCell();
        emptycell.Colspan = 4;
        emptycell.FixedHeight = 10f;
        emptycell.BorderWidthTop = 0;
        emptycell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(emptycell);


        return tblSign;
    }

    public PdfPTable SpecificGoalsSignTable()
    {

        PdfPTable tblSign = new PdfPTable(4);
        tblSign.WidthPercentage = 100f;
        float[] wthtblSign = new float[] { 3f, 3f, .15f, 3f };
        tblSign.SetWidths(wthtblSign);

        PdfPCell AuthorizedbyCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Authorizedby + ": ", ProgressiveReport.fontBoldText));
        AuthorizedbyCell.Colspan = 4;
        AuthorizedbyCell.HorizontalAlignment = Element.ALIGN_CENTER;
        AuthorizedbyCell.BackgroundColor = BaseColor.LIGHT_GRAY;
        tblSign.AddCell(AuthorizedbyCell);

        PdfPCell empty2cell = new PdfPCell();
        empty2cell.Colspan = 6;
        empty2cell.BorderWidthTop = 0;
        empty2cell.BorderWidthBottom = 0;
        empty2cell.FixedHeight = 10f;
        tblSign.AddCell(empty2cell);

        Phrase PrintPhrase = new Phrase("\t\t\t\t\t Print Name: ______________________________________   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Signature: ______________________________________ ", ProgressiveReport.fontBoldText);
        PdfPCell printcell = new PdfPCell(PrintPhrase);
        printcell.Colspan = 4;
        printcell.BorderWidthTop = 0;
        printcell.BorderWidthBottom = 0;
        printcell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(printcell);

        PdfPCell heightCell = new PdfPCell();
        heightCell.FixedHeight = 5f;
        heightCell.Colspan = 4;
        heightCell.BorderWidthTop = 0;
        heightCell.BorderWidthBottom = 0;
        tblSign.AddCell(heightCell);

        PdfPCell empty5cell = new PdfPCell();
        empty5cell.Colspan = 2;
        empty5cell.FixedHeight = 10f;
        empty5cell.BorderWidthTop = 0;
        empty5cell.BorderWidthBottom = 0;
        empty5cell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(empty5cell);

        PdfPCell chkResident = new PdfPCell();
        chkResident.Border = Rectangle.BOX;
        tblSign.AddCell(chkResident);

        PdfPCell Resident = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Resident, ProgressiveReport.fontBoldText));
        Resident.BorderWidthTop = 0;
        Resident.BorderWidthBottom = 0;
        Resident.BorderWidthLeft = 0;
        tblSign.AddCell(Resident);

        tblSign.AddCell(heightCell);

        Phrase DatePhrase = new Phrase("\t\t\t\t\t Date: ______________________________________  ", ProgressiveReport.fontBoldText);
        PdfPCell Datecell = new PdfPCell(DatePhrase);
        Datecell.Colspan = 2;
        Datecell.BorderWidthTop = 0;
        Datecell.BorderWidthBottom = 0;
        Datecell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(Datecell);


        PdfPCell chkPOA = new PdfPCell();
        chkPOA.Border = Rectangle.BOX;
        chkPOA.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(chkPOA);

        PdfPCell POA = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.POA, ProgressiveReport.fontBoldText));
        POA.HorizontalAlignment = Element.ALIGN_LEFT;
        POA.BorderWidthTop = 0;
        POA.BorderWidthBottom = 0;
        POA.BorderWidthLeft = 0;
        tblSign.AddCell(POA);

        PdfPCell empty1cell = new PdfPCell();
        empty1cell.Colspan = 4;
        empty1cell.FixedHeight = 10f;
        empty1cell.BorderWidthTop = 0;
        empty1cell.BorderWidthBottom = 0;
        empty1cell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(empty1cell);

        PdfPCell copyResident = new PdfPCell();
        copyResident.Colspan = 4;
        copyResident.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));

        PdfPTable tblSignResident = new PdfPTable(6);
        tblSignResident.WidthPercentage = 100f;
        float[] wthtblSign1 = new float[] { .3f, 3f, .3f, 3f, 3f, 3f };
        tblSignResident.SetWidths(wthtblSign1);

        PdfPCell chkProvided = new PdfPCell();
        chkProvided.Border = Rectangle.BOX;
        chkProvided.HorizontalAlignment = Element.ALIGN_CENTER;
        tblSignResident.AddCell(chkProvided);

        PdfPCell Provided = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CopyProvidedToResident, ProgressiveReport.fontBoldText));
        Provided.HorizontalAlignment = Element.ALIGN_LEFT;
        Provided.Border = 0;
        tblSignResident.AddCell(Provided);


        PdfPCell chkRefused = new PdfPCell();
        chkRefused.Border = Rectangle.BOX;
        chkRefused.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSignResident.AddCell(chkRefused);

        PdfPCell refused = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CopyRefusedbyResident, ProgressiveReport.fontBoldText));
        refused.HorizontalAlignment = Element.ALIGN_LEFT;
        refused.Border = 0;
        tblSignResident.AddCell(refused);

        Phrase InitialsPhrase = new Phrase("\t\t\t\t\t Initials: ___________________ ", ProgressiveReport.fontBoldText);
        PdfPCell Initialscell = new PdfPCell(InitialsPhrase);
        Initialscell.Border = 0;
        tblSignResident.AddCell(Initialscell);


        Phrase DatePhrase1 = new Phrase("\t\t\t\t\t Date: ________________ ", ProgressiveReport.fontBoldText);
        PdfPCell Datecell1 = new PdfPCell(DatePhrase1);
        Datecell1.Border = 0;
        tblSignResident.AddCell(Datecell1);

        copyResident.AddElement(tblSignResident);
        tblSign.AddCell(copyResident);


        PdfPCell CompletedbyCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CompletedBy + ": ", ProgressiveReport.fontBoldText));
        CompletedbyCell.Colspan = 4;
        CompletedbyCell.HorizontalAlignment = Element.ALIGN_CENTER;
        CompletedbyCell.BackgroundColor = BaseColor.LIGHT_GRAY;
        tblSign.AddCell(CompletedbyCell);

        PdfPCell empty3cell = new PdfPCell();
        empty3cell.Colspan = 4;
        empty3cell.BorderWidthTop = 0;
        empty3cell.BorderWidthBottom = 0;
        empty3cell.FixedHeight = 10f;
        tblSign.AddCell(empty3cell);

        Phrase Print1Phrase = new Phrase("\t\t\t\t\t Print Name: ______________________________________   \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  Signature: ______________________________________ ", ProgressiveReport.fontBoldText);
        PdfPCell print1cell = new PdfPCell(Print1Phrase);
        print1cell.Colspan = 4;
        print1cell.BorderWidthTop = 0;
        print1cell.BorderWidthBottom = 0;
        print1cell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(print1cell);

        PdfPCell empty4cell = new PdfPCell();
        empty4cell.Colspan = 6;
        empty4cell.BorderWidthTop = 0;
        empty4cell.BorderWidthBottom = 0;
        empty4cell.FixedHeight = 10f;
        tblSign.AddCell(empty4cell);

        Phrase Date1Phrase = new Phrase("\t\t\t\t\t Date: ______________________________________  ", ProgressiveReport.fontBoldText);
        PdfPCell Date1cell = new PdfPCell(Date1Phrase);
        Date1cell.Colspan = 4;
        Date1cell.BorderWidthTop = 0;
        Date1cell.BorderWidthBottom = 0;
        Date1cell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(Date1cell);

        PdfPCell emptycell = new PdfPCell();
        emptycell.Colspan = 4;
        emptycell.FixedHeight = 10f;
        emptycell.BorderWidthTop = 0;
        emptycell.HorizontalAlignment = Element.ALIGN_MIDDLE;
        tblSign.AddCell(emptycell);

        tblSign.KeepTogether = true;
        tblSign.LockedWidth = false;
        tblSign.SplitLate = true;
        return tblSign;
    }

    public PdfPTable CarePlanResidentNeedsAndGoalContentV3(string sFromDate = "", string sToDate = "", char cPrintStatus = 'A', char cStatus = 'H')
    {
        PdfPTable table = new PdfPTable(1);
        table.WidthPercentage = 100f;
        PdfPTable tblGoalSheet = new PdfPTable(6);
        string fontpath = Server.MapPath(".");

        Font tableFontB = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);

        BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
        Font fontBoldTextOP1 = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);

        if (cPrintStatus == 'Q' || cPrintStatus == 'F')
        {
            PdfPCell tblGoalSheetHeaderTitle = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentSpecificGoals, ProgressiveReport.font12B));
            tblGoalSheetHeaderTitle.HorizontalAlignment = Element.ALIGN_CENTER;
            tblGoalSheetHeaderTitle.Colspan = 10;
            tblGoalSheetHeaderTitle.Border = 0;
            tblGoalSheetHeaderTitle.PaddingBottom = 5f;
            table.AddCell(tblGoalSheetHeaderTitle);
        }
        PdfPCell careService = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecificGoalServiceAvilable, tableFontB));
        careService.Colspan = 10;
        careService.Border = 0;
        careService.HorizontalAlignment = Element.ALIGN_LEFT;
        careService.PaddingBottom = 10f;

        table.AddCell(careService);

        string services = string.Empty;
        string otherService = string.Empty;
        string otherFeeService = string.Empty;
        tblGoalSheet.WidthPercentage = 100f;
        float[] wthtblGoalSheet = new float[] { 0.75f, 1f, 1.4f, 0.8f, 1f, 0.75f };
        tblGoalSheet.SetWidths(wthtblGoalSheet);

        PdfPCell CellGoalSheet;
        PdfPCell emptyGoalSheet;
        emptyGoalSheet = new PdfPCell(new Phrase("", ProgressiveReport.font10));
        string headerColor = "#D9ECFF";

        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);

        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.residentNeeds + " / " + Resources.Qola.UIverbiage.Service + " / " + Resources.Qola.UIverbiage.Goals, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_LEFT;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);

        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ActionIntervention, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.PaddingBottom = 5f;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        tblGoalSheet.AddCell(CellGoalSheet);

        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OutcomesEffectiveness, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.PaddingBottom = 5f;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        tblGoalSheet.AddCell(CellGoalSheet);

        var PhrasePersonResponsible = new Phrase();
        PhrasePersonResponsible.Add(new Chunk("Person Responsible", ProgressiveReport.font8B));
        CellGoalSheet = new PdfPCell(new Phrase(PhrasePersonResponsible));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);

        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateResolved, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);

        PdfPTable tblCareService = new PdfPTable(9);
        tblCareService.WidthPercentage = 100f;

        float[] wthtblServices = new float[] { .15f, 1.3f, .15f, 1.3f, .15f, .15f, 1.3f, .15f, 1.3f, };
        tblCareService.SetWidths(wthtblServices);



        Collection<Common.GoalSheet> goalSheets;
        goalSheets = new Collection<Common.GoalSheet>();

        if (cStatus == 'H')
        {
            Common.GoalSheet gSheet = new Common.GoalSheet();
            Common.Residents resident = new Common.Residents();
            resident.ID = _iResidentId;
            gSheet.Resident = resident;
            gSheet.ViewStatus = 'N';
            if (sFromDate != "")
            {
                gSheet.FromDate = stringToDateFormat(sFromDate);
            }
            if (sToDate != "")
            {
                gSheet.EndDate = stringToDateFormat(sToDate);
            }
            goalSheets = DAL.GoalSheet.GetSpecificGoalDetailsCollection(gSheet);
        }
        else
        {
            goalSheets = DAL.GoalSheet.GetSpecificGoalCollectionsByResidentId(_iResidentId, "A", sFromDate, sToDate);
        }

        int iGoalNo = 0;
        int BGCCount = 0;

        foreach (Common.GoalSheet GlShtReceive in goalSheets)
        {
            if (GlShtReceive.ServiceOther != null && GlShtReceive.ServiceOther.Length > 0)
            {
                otherService = GlShtReceive.ServiceOther;
            }
            if (GlShtReceive.ServiceType != 0 && GlShtReceive.ServiceType != null)
            {
                services += GlShtReceive.ServiceType + ",";
            }
        }

        var PhraseGoalSheetNote = new Phrase();
        PhraseGoalSheetNote.Add(new Chunk(Resources.Qola.UIverbiage.SpecficGoalsReviewedComment, ProgressiveReport.font8BI));

        PdfPCell tblGoalSheetNote = new PdfPCell(new Phrase(PhraseGoalSheetNote));
        tblGoalSheetNote.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetNote.VerticalAlignment = Element.ALIGN_MIDDLE;
        tblGoalSheetNote.PaddingTop = 5f;
        tblGoalSheetNote.PaddingBottom = 5f;
        tblGoalSheetNote.Colspan = 6;
        tblGoalSheet.AddCell(tblGoalSheetNote);

        if (goalSheets.Count > 0)
        {

        }
        PdfPCell chkProvisionOfMeal = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "1"))
        {
            chkProvisionOfMeal = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkProvisionOfMeal.Border = Rectangle.BOX;

        tblCareService.AddCell(chkProvisionOfMeal);
        PdfPCell ProvisionOfMeal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ProvisionofMeal, ProgressiveReport.tableFont));
        ProvisionOfMeal.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(ProvisionOfMeal);

        PdfPCell chkMAdminstrtion = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "2"))
        {
            chkMAdminstrtion = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkMAdminstrtion.Border = Rectangle.BOX;
        tblCareService.AddCell(chkMAdminstrtion);
        PdfPCell MAdminstrtion = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MedicationAdministration, ProgressiveReport.tableFont));
        MAdminstrtion.Border = Rectangle.NO_BORDER;
        MAdminstrtion.Colspan = 2;
        tblCareService.AddCell(MAdminstrtion);

        PdfPCell chkBathingAssistance = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "3"))
        {
            chkBathingAssistance = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkBathingAssistance.Border = Rectangle.BOX;
        tblCareService.AddCell(chkBathingAssistance);
        PdfPCell BathingAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWithBathing, ProgressiveReport.tableFont));
        BathingAssistance.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(BathingAssistance);


        PdfPCell chkDressingAssistance = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "4"))
        {
            chkDressingAssistance = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkDressingAssistance.Border = Rectangle.BOX;
        tblCareService.AddCell(chkDressingAssistance);

        PdfPCell DressingAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWithDressing, ProgressiveReport.tableFont));
        DressingAssistance.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(DressingAssistance);

        PdfPCell chkHygineAssistance = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "5"))
        {
            chkHygineAssistance = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }

        PdfPCell heightCell = new PdfPCell();
        heightCell.FixedHeight = 5f;
        heightCell.Colspan = 9;
        heightCell.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(heightCell);

        chkHygineAssistance.Border = Rectangle.BOX;
        tblCareService.AddCell(chkHygineAssistance);
        PdfPCell HygineAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWithHygiene, ProgressiveReport.tableFont));
        HygineAssistance.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(HygineAssistance);



        PdfPCell chkAmbulationAssistance = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "6"))
        {
            chkAmbulationAssistance = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkAmbulationAssistance.Border = Rectangle.BOX;
        tblCareService.AddCell(chkAmbulationAssistance);
        PdfPCell AmbulationAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWithAmbulation, ProgressiveReport.tableFont));
        AmbulationAssistance.Border = Rectangle.NO_BORDER;
        AmbulationAssistance.Colspan = 2;
        tblCareService.AddCell(AmbulationAssistance);

        PdfPCell chkFeedingAssistance = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "7"))
        {
            chkFeedingAssistance = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkFeedingAssistance.Border = Rectangle.BOX;
        tblCareService.AddCell(chkFeedingAssistance);
        PdfPCell FeedingAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWithFeeding, ProgressiveReport.tableFont));
        FeedingAssistance.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(FeedingAssistance);

        PdfPCell chkSkinCare = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "8"))
        {
            chkSkinCare = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkSkinCare.Border = Rectangle.BOX;
        tblCareService.AddCell(chkSkinCare);
        PdfPCell SkinCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SkinAndWoundCare, ProgressiveReport.tableFont));
        SkinCare.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(SkinCare);

        tblCareService.AddCell(heightCell);

        PdfPCell chkDemantiaCare = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "9"))
        {
            chkDemantiaCare = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkDemantiaCare.Border = Rectangle.BOX;
        tblCareService.AddCell(chkDemantiaCare);
        PdfPCell DemantiaCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DementiaCare, ProgressiveReport.tableFont));
        DemantiaCare.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(DemantiaCare);

        PdfPCell chkContinence = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "10"))
        {
            chkContinence = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkContinence.Border = Rectangle.BOX;
        tblCareService.AddCell(chkContinence);
        PdfPCell Continence = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ContinenceCare, ProgressiveReport.tableFont));
        Continence.Border = Rectangle.NO_BORDER;
        Continence.Colspan = 2;
        tblCareService.AddCell(Continence);

        PdfPCell chkPhysician = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "14"))
        {
            chkPhysician = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkPhysician.Border = Rectangle.BOX;
        tblCareService.AddCell(chkPhysician);
        PdfPCell Physician = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Physician + " *", ProgressiveReport.tableFont));
        Physician.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(Physician);

        PdfPCell chkNursing = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "15"))
        {
            chkNursing = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkNursing.Border = Rectangle.BOX;
        tblCareService.AddCell(chkNursing);
        PdfPCell Nursing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Nursing + " **", ProgressiveReport.tableFont));
        Nursing.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(Nursing);

        tblCareService.AddCell(heightCell);

        PdfPCell chkPharmacy = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "13"))
        {
            chkPharmacy = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkPharmacy.Border = Rectangle.BOX;
        tblCareService.AddCell(chkPharmacy);
        PdfPCell Pharmacy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pharmacy + " ***", ProgressiveReport.tableFont));
        Pharmacy.Border = Rectangle.NO_BORDER;
        Pharmacy.Colspan = 8;
        tblCareService.AddCell(Pharmacy);

        tblCareService.AddCell(heightCell);





        PdfPCell chkOther = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "12"))
        {
            chkOther = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkOther.Border = Rectangle.BOX;
        tblCareService.AddCell(chkOther);
        PdfPCell Other = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, ProgressiveReport.tableFont));
        Other.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(Other);

        PdfPCell otherEmpty = new PdfPCell();
        otherEmpty.Border = Rectangle.NO_BORDER;

        PdfPCell OtherValue = new PdfPCell(new Phrase(otherService, ProgressiveReport.tableFont));
        OtherValue.Colspan = 2;
        OtherValue.Border = Rectangle.NO_BORDER;
        OtherValue.BorderWidthBottom = .5f;
        tblCareService.AddCell(OtherValue);
        tblCareService.AddCell(otherEmpty);


        PdfPCell chkOtherFee = new PdfPCell();
        if (services != "" && GetGoalSheetService(services, "11"))
        {
            chkOtherFee = new PdfPCell(new Phrase("P", fontBoldTextOP1));
        }
        chkOtherFee.Border = Rectangle.BOX;
        tblCareService.AddCell(chkOtherFee);
        PdfPCell OtherFee = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OtherFeeforServices, ProgressiveReport.tableFont));
        OtherFee.Border = Rectangle.NO_BORDER;
        tblCareService.AddCell(OtherFee);


        PdfPCell OtherFeeValue = new PdfPCell(new Phrase(otherFeeService, ProgressiveReport.tableFont));
        OtherFeeValue.Colspan = 2;
        OtherFeeValue.Border = Rectangle.NO_BORDER;
        OtherFeeValue.BorderWidthBottom = .5f;
        tblCareService.AddCell(OtherFeeValue);
        tblCareService.AddCell(heightCell);




        PdfPCell PhysiansCell = new PdfPCell(new Phrase("*Any service that is offered by a member of the College of Physicians and Surgeons, and provided while engaging in the practice of medicine.", ProgressiveReport.font6I));
        PhysiansCell.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        PhysiansCell.Border = 0;
        PhysiansCell.Colspan = 9;
        tblCareService.AddCell(PhysiansCell);

        PdfPCell NurseCell = new PdfPCell(new Phrase("** Any service that is offered by a member of the College of Nurses, and provided while engaging in the practice of nursing.", ProgressiveReport.font6I));
        NurseCell.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        NurseCell.Border = 0;
        NurseCell.Colspan = 9;
        tblCareService.AddCell(NurseCell);

        PdfPCell PharmacyCell = new PdfPCell(new Phrase("*** Any service that is offered by a member of the College of Pharmacists, and provided while engaging in the practice of pharmacy.", ProgressiveReport.font6I));
        PharmacyCell.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
        PharmacyCell.Border = 0;
        PharmacyCell.Colspan = 9;
        tblCareService.AddCell(PharmacyCell);

        PdfPCell emptyspaceRow = new PdfPCell();
        emptyspaceRow.MinimumHeight = 10f;
        emptyspaceRow.Colspan = 9;
        emptyspaceRow.Border = 0;
        tblCareService.AddCell(emptyspaceRow);

        PdfPCell careCell = new PdfPCell(tblCareService);

        careCell.Border = 0;
        table.AddCell(careCell);

        return table;
    }

    public PdfPTable ResidentNeedsAndGoalsReviewedV3()
    {
        Common.Residents resident = objResident;
        PdfPTable tblPlanOfCare = new PdfPTable(8);
        tblPlanOfCare.WidthPercentage = 100f;
        float[] wthtblPlanOfCare = new float[] { 1f, 1f, 1f, 1f, 1f, 1f, 1f, 3f };
        tblPlanOfCare.SetWidths(wthtblPlanOfCare);
        tblPlanOfCare.SpacingBefore = 5f;
        tblPlanOfCare.SpacingAfter = 5f;
        tblPlanOfCare.HorizontalAlignment = Element.ALIGN_LEFT;


        string headerColor = "#fcfcfc";
        PdfPCell tblPlanOfCareHeader2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.VitalSign + " " + Resources.Qola.UIverbiage.FlowSheet, ProgressiveReport.font12));
        tblPlanOfCareHeader2.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCareHeader2.Colspan = wthtblPlanOfCare.Length;
        tblPlanOfCareHeader2.Border = 0;
        tblPlanOfCareHeader2.PaddingBottom = 10f;
        tblPlanOfCare.AddCell(tblPlanOfCareHeader2);

        PdfPCell tblPlanOfCareTitleDateCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date, ProgressiveReport.font10B));
        tblPlanOfCareTitleDateCell.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCareTitleDateCell.BackgroundColor = BaseColor.LIGHT_GRAY;


        PdfPCell tblPlanOfCareTitleTimeCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Time, ProgressiveReport.font10B));
        tblPlanOfCareTitleTimeCell.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCareTitleTimeCell.BackgroundColor = BaseColor.LIGHT_GRAY;

        Phrase weight = new Phrase(Resources.Qola.UIverbiage.Wgt, ProgressiveReport.font10B);
        weight.Add(new Chunk(" (" + Resources.Qola.UIverbiage.lbs + ")", ProgressiveReport.font7B));
        PdfPCell tblPlanOfCareTitleWeightCell = new PdfPCell(weight);
        tblPlanOfCareTitleWeightCell.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCareTitleWeightCell.BackgroundColor = BaseColor.LIGHT_GRAY;


        Phrase temp = new Phrase(Resources.Qola.UIverbiage.T, ProgressiveReport.font10B);
        temp.Add(new Chunk(" (°" + Resources.Qola.UIverbiage.C + ")", ProgressiveReport.font7B));
        PdfPCell tblPlanOfCareTitleTemperature = new PdfPCell(temp);
        tblPlanOfCareTitleTemperature.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCareTitleTemperature.BackgroundColor = BaseColor.LIGHT_GRAY;


        Phrase pulse = new Phrase(Resources.Qola.UIverbiage.Pulse, ProgressiveReport.font10B);
        pulse.Add(new Chunk(" (" + Resources.Qola.UIverbiage.bpm + ")", ProgressiveReport.font7B));

        PdfPCell tblPlanOfCareTitlePulse = new PdfPCell(pulse);
        tblPlanOfCareTitlePulse.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCareTitlePulse.BackgroundColor = BaseColor.LIGHT_GRAY;

        Phrase Bp = new Phrase(Resources.Qola.UIverbiage.BP, ProgressiveReport.font10B);
        Bp.Add(new Chunk(" (" + Resources.Qola.UIverbiage.mmHg + ")", ProgressiveReport.font7B));
        PdfPCell tblPlanOfCareTitleBPCell = new PdfPCell(Bp);

        tblPlanOfCareTitleBPCell.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCareTitleBPCell.BackgroundColor = BaseColor.LIGHT_GRAY;
        Phrase p = new Phrase("O" + GetSubscript(2), ProgressiveReport.font10B);
        p.Add(new Chunk("2", FontFactory.GetFont(FontFactory.HELVETICA, 4)).SetTextRise(-2));
        p.Add(new Chunk(" (" + Resources.Qola.UIverbiage.IPM + ")", ProgressiveReport.font7B));
        PdfPCell tblPlanOfCareTitleOxygen = new PdfPCell(p);
        tblPlanOfCareTitleOxygen.MinimumHeight = 20f;
        tblPlanOfCareTitleOxygen.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCareTitleOxygen.BackgroundColor = BaseColor.LIGHT_GRAY;

        PdfPCell tblPlanOfCareTitleSignature = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Signature, ProgressiveReport.font10B));
        tblPlanOfCareTitleSignature.HorizontalAlignment = Element.ALIGN_CENTER;
        tblPlanOfCareTitleSignature.BackgroundColor = BaseColor.LIGHT_GRAY;


        tblPlanOfCare.AddCell(tblPlanOfCareTitleDateCell);
        tblPlanOfCare.AddCell(tblPlanOfCareTitleTimeCell);
        tblPlanOfCare.AddCell(tblPlanOfCareTitleBPCell);
        tblPlanOfCare.AddCell(tblPlanOfCareTitleTemperature);
        tblPlanOfCare.AddCell(tblPlanOfCareTitlePulse);
        tblPlanOfCare.AddCell(tblPlanOfCareTitleWeightCell);
        tblPlanOfCare.AddCell(tblPlanOfCareTitleOxygen);
        tblPlanOfCare.AddCell(tblPlanOfCareTitleSignature);
        int iColumnCountPOC;
        for (iColumnCountPOC = 0; iColumnCountPOC < 4; iColumnCountPOC++)
        {
            string color = string.Empty;
            string timeFormat = string.Empty;
            if (iColumnCountPOC % 2 == 1)
            {
                color = "";
            }
            else
            {
                color = string.Empty;
            }
            PdfPCell tblPlanOfCareDate = new PdfPCell(new Phrase(" ", ProgressiveReport.font10));
            if (dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_modified_on"].ToString() != null && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_modified_on"].ToString() != "")
            {
                DateTime dtDate = Convert.ToDateTime(dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_modified_on"]);
                string strDate = dtDate.ToString("MM/dd/yyyy");
                if (strDate != "01/01/1900")
                {
                    timeFormat = String.Format("{0:t}", dtDate);
                    tblPlanOfCareDate = new PdfPCell(new Phrase(strDate, ProgressiveReport.font10));
                    tblPlanOfCareDate.HorizontalAlignment = Element.ALIGN_CENTER;
                }
            }
            if (color.Length > 0)
            {
                tblPlanOfCareDate.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }
            tblPlanOfCare.AddCell(tblPlanOfCareDate);
            PdfPCell tblPlanOfCareTime = new PdfPCell();
            if (timeFormat != "")
            {
                tblPlanOfCareTime = new PdfPCell(new Phrase(timeFormat, ProgressiveReport.font10));
            }
            if (color.Length > 0)
            {
                tblPlanOfCareTime.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }
            tblPlanOfCareTime.HorizontalAlignment = Element.ALIGN_CENTER;
            tblPlanOfCare.AddCell(tblPlanOfCareTime);

            PdfPCell tblPlanOfCareWeight = new PdfPCell(new Phrase("", ProgressiveReport.font10));
            if (dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_weight_value"].ToString() != null && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_weight_value"].ToString() != "" && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_weight_value"].ToString() != "0")
            {
                string strWeight = dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_weight_value"].ToString();
                tblPlanOfCareWeight = new PdfPCell(new Phrase(strWeight, ProgressiveReport.font10));
                tblPlanOfCareWeight.HorizontalAlignment = Element.ALIGN_CENTER;

            }
            if (color.Length > 0)
            {
                tblPlanOfCareWeight.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }



            PdfPCell tblPlanOfCareResp = new PdfPCell();
            decimal c = Convert.ToDecimal(dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_temperature"].ToString());
            if (dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_temperature"].ToString() != null && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_temperature"].ToString() != "" && c > 0)
            {
                string strHeight = dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_temperature"].ToString();
                tblPlanOfCareResp = new PdfPCell(new Phrase(strHeight, ProgressiveReport.font10));
            }

            tblPlanOfCareResp.HorizontalAlignment = Element.ALIGN_CENTER;
            if (color.Length > 0)
            {
                tblPlanOfCareResp.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }


            PdfPCell tblPlanOfCarePulse = new PdfPCell(new Phrase("", ProgressiveReport.font10));
            if (dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_pulse_value"].ToString() != null && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_pulse_value"].ToString() != "" && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_pulse_value"].ToString() != "0")
            {
                string strPulse = dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_pulse_value"].ToString();
                tblPlanOfCarePulse = new PdfPCell(new Phrase(strPulse, ProgressiveReport.font10));
                tblPlanOfCarePulse.HorizontalAlignment = Element.ALIGN_CENTER;
            }
            if (color.Length > 0)
            {
                tblPlanOfCarePulse.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }

            PdfPCell tblPlanOfCareBP = new PdfPCell(new Phrase(" ", ProgressiveReport.font10));
            string systolic = dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_BP_systolic"].ToString();
            string diastolic = dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_BP_value"].ToString();
            if ((systolic != null && systolic != "0") || (diastolic != null && diastolic != "0"))
            {
                string strBP = string.Empty;
                if ((systolic != null && systolic != "0"))
                {
                    strBP = systolic;
                }
                if (diastolic != null && diastolic != "0")
                {
                    if (strBP != string.Empty)
                    {
                        strBP += "/";
                    }
                    strBP += diastolic;
                }

                tblPlanOfCareBP = new PdfPCell(new Phrase(strBP, ProgressiveReport.font10));
                strBP = string.Empty;
                tblPlanOfCareBP.HorizontalAlignment = Element.ALIGN_CENTER;
            }
            if (color.Length > 0)
            {
                tblPlanOfCareBP.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }

            PdfPCell tblPlanOfCareO2 = new PdfPCell(new Phrase(" ", ProgressiveReport.font10));
            if (dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_SN_O2_rate"].ToString() != null && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_SN_O2_rate"].ToString() != "" && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_SN_O2_rate"].ToString() != "0.0000")
            {
                string strBP = dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_SN_O2_rate"].ToString();
                tblPlanOfCareO2 = new PdfPCell(new Phrase(strBP, ProgressiveReport.font10));
                tblPlanOfCareO2.HorizontalAlignment = Element.ALIGN_CENTER;
            }
            if (color.Length > 0)
            {
                tblPlanOfCareO2.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }

            Phrase sign = new Phrase();
            if (dsRCA.Tables[0].Rows[iColumnCountPOC]["As_fd_last_name"].ToString() != "" && dsRCA.Tables[0].Rows[iColumnCountPOC]["As_fd_first_name"].ToString() != "")
            {
                Chunk sign2 = new Chunk(dsRCA.Tables[0].Rows[iColumnCountPOC]["As_fd_last_name"].ToString() + ", " + dsRCA.Tables[0].Rows[iColumnCountPOC]["As_fd_first_name"].ToString(), ProgressiveReport.font8B);
                sign.Add(sign2);
            }
            if (dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_user_type"].ToString() != "" && dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_user_type"].ToString() != "0")
            {
                Chunk sign1 = new Chunk(" (" + dsRCA.Tables[0].Rows[iColumnCountPOC]["fd_user_type"].ToString() + ")", ProgressiveReport.font10B);
                sign.Add(sign1);
            }
            PdfPCell tblPlanOfCareSignature = new PdfPCell(sign);
            tblPlanOfCareSignature.HorizontalAlignment = Element.ALIGN_CENTER;
            if (color.Length > 0)
            {
                tblPlanOfCareSignature.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }
            tblPlanOfCare.AddCell(tblPlanOfCareBP);
            tblPlanOfCare.AddCell(tblPlanOfCareResp);
            tblPlanOfCare.AddCell(tblPlanOfCarePulse);
            tblPlanOfCare.AddCell(tblPlanOfCareWeight);
            tblPlanOfCare.AddCell(tblPlanOfCareO2);
            tblPlanOfCare.AddCell(tblPlanOfCareSignature);
        }

        return tblPlanOfCare;
    }

    public PdfPTable CarePlanNeedsAndGoalsHeaderV3()
    {
        PdfPTable tblGoalSheetHeader = new PdfPTable(4);
        tblGoalSheetHeader.WidthPercentage = 90f;
        float[] wthtblGoalSheetHeader = new float[] { 1f, 2f, 1f, 2f };
        tblGoalSheetHeader.SetWidths(wthtblGoalSheetHeader);
        tblGoalSheetHeader.SpacingBefore = 5f;
        tblGoalSheetHeader.SpacingAfter = 5f;

        PdfPCell tblGoalSheetHeaderTitle2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PhysicalCare, ProgressiveReport.font10));
        tblGoalSheetHeaderTitle2.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderTitle2.Colspan = 4;
        tblGoalSheetHeaderTitle2.Border = 0;
        tblGoalSheetHeaderTitle2.PaddingBottom = 10f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderTitle2);

        PdfPCell tblGoalSheetHeaderContent1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Developer + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderContent1.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderContent1.Border = 0;
        tblGoalSheetHeaderContent1.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderContent1);

        PdfPCell tblGoalSheetHeaderLine = new PdfPCell(new Phrase("", ProgressiveReport.font10));
        tblGoalSheetHeaderLine.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderLine.Border = 0;
        tblGoalSheetHeaderLine.BorderWidthBottom = 0.5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);
        PdfPCell tblGoalSheetHeaderApprove = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ApprovedBy + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderApprove.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderApprove.Border = 0;
        tblGoalSheetHeaderApprove.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderApprove);

        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);

        PdfPCell tblGoalSheetHeaderContent2 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Signatureof + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderContent2.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderContent2.Border = 0;
        tblGoalSheetHeaderContent2.Colspan = 2;
        tblGoalSheetHeaderContent2.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderContent2);

        tblGoalSheetHeaderLine.Colspan = 2;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);


        PdfPCell tblGoalSheetHeaderDate = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderDate.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderDate.Border = 0;
        tblGoalSheetHeaderDate.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderDate);
        tblGoalSheetHeaderLine.Colspan = 1;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);

        PdfPCell tblGoalSheetHeaderCopyGiven = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CopyGiven + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderCopyGiven.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderCopyGiven.Border = 0;
        tblGoalSheetHeaderCopyGiven.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderCopyGiven);
        tblGoalSheetHeaderLine.Colspan = 1;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);
        PdfPCell tblGoalSheetHeaderCopyReceive = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CopyReceived + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderCopyReceive.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderCopyReceive.Border = 0;
        tblGoalSheetHeaderCopyReceive.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderCopyReceive);
        tblGoalSheetHeaderLine.Colspan = 1;
        tblGoalSheetHeaderLine.VerticalAlignment = Element.ALIGN_BOTTOM;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);

        PdfPCell tblGoalSheetHeaderReceiveInitals = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Initials + ": ", ProgressiveReport.font10));
        tblGoalSheetHeaderReceiveInitals.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetHeaderReceiveInitals.Border = 0;
        tblGoalSheetHeaderReceiveInitals.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderReceiveInitals);
        tblGoalSheetHeaderLine.Colspan = 1;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);
        PdfPCell tblGoalSheetHeaderContent4 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.CopyRefused + ": ", ProgressiveReport.font10));

        tblGoalSheetHeaderContent4.Border = 0;
        tblGoalSheetHeaderContent4.PaddingBottom = 5f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderContent4);
        tblGoalSheetHeaderContent2.Colspan = 1;
        tblGoalSheetHeaderLine.VerticalAlignment = Element.ALIGN_CENTER;
        tblGoalSheetHeaderLine.PaddingBottom = -35f;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);

        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderReceiveInitals);
        tblGoalSheetHeaderContent2.Colspan = 1;
        tblGoalSheetHeader.AddCell(tblGoalSheetHeaderLine);
        return tblGoalSheetHeader;
    }

    public PdfPTable ResidentGoalSignTable()
    {
        DataSet dsAssessmentDetails = dsRCA;
        Font tableFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.NORMAL, BaseColor.BLACK);
        Font tableFontB = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);
        PdfPTable tblSign = new PdfPTable(4);
        tblSign.WidthPercentage = 100f;
        float[] wthtblSign = new float[] { 3f, 3f, 3f, 3f };
        tblSign.SetWidths(wthtblSign);


        PdfPCell printNameCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PrintName + ": ", tableFont));
        printNameCell.PaddingTop = 25f;
        printNameCell.Border = 0;
        printNameCell.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(printNameCell);

        PdfPCell emptyCell = new PdfPCell(new Phrase("", tableFont));
        emptyCell.PaddingTop = 25f;
        emptyCell.Border = 0;
        emptyCell.HorizontalAlignment = Element.ALIGN_LEFT;


        PdfPCell printNameValueCell = new PdfPCell(new Phrase(" ", tableFont));
        printNameValueCell.PaddingTop = 25f;
        printNameValueCell.Border = 0;
        printNameValueCell.BorderWidthBottom = .5f;
        printNameValueCell.PaddingRight = 10f;
        printNameValueCell.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(printNameValueCell);

        PdfPCell signatureCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Signature + ": ", tableFont));
        signatureCell.PaddingTop = 25f;
        signatureCell.Border = 0;
        signatureCell.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(signatureCell);

        PdfPCell signatureValueCell = new PdfPCell(new Phrase(" ", tableFont));
        signatureValueCell.PaddingTop = 25f;
        signatureValueCell.Border = 0;
        signatureValueCell.BorderWidthBottom = .5f;
        signatureValueCell.PaddingRight = 10f;
        signatureValueCell.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(signatureValueCell);

        Phrase resident = new Phrase(Resources.Qola.UIverbiage.ResidentorSubstitureDecisionMaker + " ", tableFont);
        resident.Add(new Chunk(Resources.Qola.UIverbiage.WitnessPrintName + ": ", tableFont));
        PdfPCell reisidentWitness = new PdfPCell(new Phrase(resident));
        reisidentWitness.PaddingTop = 5f;
        reisidentWitness.Border = 0;
        reisidentWitness.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(reisidentWitness);

        PdfPCell emptyCell1 = new PdfPCell(new Phrase("", tableFont));
        emptyCell.PaddingTop = 5f;
        emptyCell.Border = 0;
        emptyCell.HorizontalAlignment = Element.ALIGN_LEFT;


        PdfPCell reisidentWitnessValueCell = new PdfPCell(new Phrase(" ", tableFont));
        reisidentWitnessValueCell.PaddingTop = 5f;
        reisidentWitnessValueCell.Border = 0;
        reisidentWitnessValueCell.BorderWidthBottom = .5f;
        reisidentWitnessValueCell.PaddingRight = 10f;
        reisidentWitnessValueCell.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(reisidentWitnessValueCell);

        resident = new Phrase(Resources.Qola.UIverbiage.ResidentorSubstitureDecisionMaker + " ", tableFont);
        resident.Add(new Chunk(Resources.Qola.UIverbiage.Witness + " " + Resources.Qola.UIverbiage.Signature + ": ", tableFont));
        PdfPCell reisidentWitnessRight = new PdfPCell(new Phrase(resident));
        reisidentWitnessRight.PaddingTop = 5f;
        reisidentWitnessRight.Border = 0;
        reisidentWitnessRight.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(reisidentWitnessRight);


        PdfPCell reisidentWitnessRightValueCell = new PdfPCell(new Phrase(" ", tableFont));
        reisidentWitnessRightValueCell.PaddingTop = 5f;
        reisidentWitnessRightValueCell.Border = 0;
        reisidentWitnessRightValueCell.BorderWidthBottom = .5f;
        reisidentWitnessRightValueCell.PaddingRight = 10f;
        reisidentWitnessRightValueCell.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(reisidentWitnessRightValueCell);


        PdfPCell Comment1Cell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentGoalComment1, tableFontB));
        Comment1Cell.Border = 0;
        Comment1Cell.Colspan = 4;
        Comment1Cell.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(Comment1Cell);

        PdfPCell DateCell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date + ": ", tableFont));
        DateCell.Border = 0;
        DateCell.Colspan = 4;
        DateCell.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(DateCell);

        PdfPCell Comment2Cell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentGoalComment3, tableFontB));
        Comment2Cell.Border = 0;
        Comment2Cell.Colspan = 4;
        Comment2Cell.HorizontalAlignment = Element.ALIGN_LEFT;
        tblSign.AddCell(Comment2Cell);

        return tblSign;
    }

    public PdfPTable SpecificGoalsCareServiceAvailable()
    {
        Font tableFontB = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);
        PdfPTable goalTable = new PdfPTable(10);
        goalTable.SetWidths(new float[] { .4f, 1f, .3f, 1f, .3f, 1f, .3f, 1f, .3f, 1f });
        goalTable.WidthPercentage = 100f;


        PdfPCell tblGoalSheetHeaderTitle = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentSpecificGoals, ProgressiveReport.font12B));
        tblGoalSheetHeaderTitle.HorizontalAlignment = Element.ALIGN_CENTER;
        tblGoalSheetHeaderTitle.Colspan = 10;
        tblGoalSheetHeaderTitle.Border = 0;
        tblGoalSheetHeaderTitle.PaddingBottom = 5f;
        goalTable.AddCell(tblGoalSheetHeaderTitle);

        PdfPCell careService = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecificGoalServiceAvilable, tableFontB));
        careService.Colspan = 10;
        careService.Border = 0;
        careService.HorizontalAlignment = Element.ALIGN_LEFT;
        careService.PaddingBottom = 10f;

        goalTable.AddCell(careService);
        return goalTable;
    }

    public PdfPTable PrintCarePlanPrint(DataSet dsAssessmentDetails)
    {
        string[] hours = { "", "0-3 hrs = 1 rendez-vous", "3-6 hrs = 2 rendez-vous", "6-9 hrs = 3 rendez-vous", "9-12 hrs = 4 rendez-vous", "12-15 hrs = 5 rendez-vous", "15-18 hrs = 6 rendez-vous", "18-21 hrs = 7 rendez-vous", "21-24 hrs = 8 rendez-vous" };
        PdfPTable tblHeader = new PdfPTable(3);
        tblHeader.WidthPercentage = 100f;
        float[] wthHead = new float[] { 1f, 1f, 1f };
        tblHeader.SetWidths(wthHead);
        tblHeader.SpacingBefore = 175f;
        if (dsAssessmentDetails != null && dsAssessmentDetails.Tables[0].Rows.Count > 0)
        {
            DateTime lastAssessment = Convert.ToDateTime(dsAssessmentDetails.Tables[0].Rows[0]["fd_modified_on"]);
            string note = dsAssessmentDetails.Tables[0].Rows[0]["fd_guide_lines"].ToString();
            Font tableFont = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 10, Font.NORMAL, BaseColor.BLACK);

            Font fontHDBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
            Font fontBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
            Font fontBoldRedText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.RED);
            Font fontLargeBoldText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
            Font fontBoldTextOP = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
            string fontpath = Server.MapPath(".");

            BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
            Font fontBoldTextOP1 = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);

            iTextSharp.text.Font fontFooter = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.ITALIC, BaseColor.DARK_GRAY);
            iTextSharp.text.Font fontGeneralText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.NORMAL, BaseColor.BLACK);
            iTextSharp.text.Font fontBoldHeadText = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
            iTextSharp.text.Font fontCellHeader = FontFactory.GetFont(FontFactory.TIMES_ROMAN, 10, iTextSharp.text.Font.BOLD, BaseColor.BLACK);
            Font fontCellHeaderRed = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 10, Font.BOLD, BaseColor.RED);

            DataTable carePlanTable = dsAssessmentDetails.Tables[0];
            var carePlanCategoryList = (from cTable in carePlanTable.AsEnumerable()
                                        select new
                                        {
                                            categoryId = cTable.Field<Int32>("As_category_id"),
                                            categoryCode = cTable.Field<String>("As_category_code"),
                                            categoryName = cTable.Field<String>("As_category_name")
                                        }).Distinct();
            int emptyCellCount = carePlanCategoryList.ToArray().Length % 3;
            int addEmpty = 3 - emptyCellCount;

            foreach (var carePlanCategory in carePlanCategoryList)
            {
                PdfPTable subCategoryTable = new PdfPTable(1);
                subCategoryTable.WidthPercentage = 100f;
                float[] wthSC = new float[] { 1f };
                subCategoryTable.SetWidths(wthSC);

                var carePlanDetail = (from cTable in carePlanTable.AsEnumerable()
                                      select new
                                      {
                                          categoryId = cTable.Field<Int32>("As_category_id"),
                                          subcategoryCode = cTable.Field<String>("As_subcategory_code"),
                                          subcategoryName = cTable.Field<String>("As_subcategory_name"),
                                          intervention = cTable.Field<String>("fd_intervention"),
                                          note = cTable.Field<String>("fd_note"),
                                          fromDate = cTable.Field<String>("fd_activity_from"),
                                          fromSplitTime = cTable.Field<String>("fd_from_split_time"),
                                          toDate = cTable.Field<String>("fd_activity_to"),
                                          toSplitTime = cTable.Field<String>("fd_to_split_time"),
                                          aleryName = cTable.Field<String>("As_comment_name")
                                          ,
                                          particulars = cTable.Field<String>("fd_particulars")
                                          ,
                                          particularFlag = cTable.Field<String>("fd_particular_flag")
                                          ,
                                          interventionFlag = cTable.Field<String>("fd_intervention_flag")
                                          ,
                                          durationFlag = cTable.Field<String>("fd_duration"),
                                          yesNo = cTable.Field<String>("fd_yesNo_option"),
                                      }).Where(x => x.categoryId == carePlanCategory.categoryId);

                PdfPCell CategoryCell = new PdfPCell(new Phrase(carePlanCategory.categoryCode + " " + carePlanCategory.categoryName, fontBoldHeadText));
                CategoryCell.BackgroundColor = BaseColor.YELLOW;
                subCategoryTable.AddCell(CategoryCell);

                int count = 0;
                Chunk duration = new Chunk();
                foreach (var carePlan in carePlanDetail)
                {
                    PdfPCell subCategoryCell = new PdfPCell(new Phrase(carePlan.subcategoryCode + " " + carePlan.subcategoryName, fontCellHeader));
                    if (carePlan.subcategoryCode == "8.2")
                    {
                        string options = string.Empty;
                        switch (carePlan.yesNo)
                        {
                            case "Y":
                                options = " - Oui";
                                break;
                            case "N":
                                options = " - Non";
                                break;
                            default:
                                options = "";
                                break;
                        }

                        subCategoryCell = new PdfPCell(new Phrase(carePlan.subcategoryCode + " " + carePlan.subcategoryName + options, fontCellHeaderRed));

                    }

                    subCategoryCell.Border = Rectangle.NO_BORDER;
                    subCategoryTable.AddCell(subCategoryCell);

                    bool isAdd = false;
                    if (carePlan.intervention != "" && carePlan.intervention.Trim().Length > 0 && carePlan.intervention != "\n")
                    {
                        isAdd = true;
                        Chunk CinterVentiion = new Chunk(Resources.Qola.UIverbiage.Intervention + ":", fontBoldRedText);
                        CinterVentiion.SetUnderline(0.1f, -2f);
                        PdfPCell interVention = new PdfPCell(new Phrase(CinterVentiion));

                        interVention.Border = Rectangle.NO_BORDER;
                        char[] splitChar = { '.' };
                        string interventoinNote = carePlan.intervention;
                        if (interventoinNote.IndexOf('.') == -1)
                        {
                            interventoinNote += ".";
                        }
                        string[] interven = interventoinNote.Split(splitChar);
                        int strLength = interven.Length > 1 ? interven.Length : 1;
                        interVention.PaddingBottom = 1f;
                        subCategoryTable.AddCell(interVention);
                        for (int index = 0; index < strLength; index++)
                        {
                            PdfPTable interventionTable = new PdfPTable(2);
                            interventionTable.WidthPercentage = 100f;
                            float[] wthinterven = new float[] { .09f, 1f };
                            interventionTable.SetWidths(wthinterven);
                            string interVentionValue = interven[index].Trim();

                            if (interven[index].Length > 0 && interven[index] != string.Empty && !String.IsNullOrWhiteSpace(interven[index]))
                            {

                                Chunk fontChunk = new Chunk("$", fontBoldTextOP1);
                                Phrase interventionPhrase = new Phrase(new Phrase(fontChunk));
                                PdfPCell bulletCell = new PdfPCell(interventionPhrase);

                                Chunk contentChunk = new Chunk(interVentionValue + ". ", tableFont);
                                PdfPCell valueCell = new PdfPCell(new Phrase(contentChunk));
                                bulletCell.Border = Rectangle.NO_BORDER;
                                interventionTable.AddCell(bulletCell);
                                valueCell.Border = Rectangle.NO_BORDER;
                                interventionTable.AddCell(valueCell);

                                PdfPCell interve = new PdfPCell(interventionTable);
                                interve.Border = Rectangle.NO_BORDER;
                                subCategoryTable.AddCell(interve);
                            }
                        }
                    }

                    if (carePlan.aleryName == "Y" && carePlan.note != null && carePlan.note.Trim() != "" && carePlan.note != "\n")
                    {
                        Chunk c = new Chunk(Resources.Qola.UIverbiage.CareAllergies + ":", fontBoldRedText);
                        c.SetUnderline(0.1f, -2f);
                        PdfPCell noteDisplay = new PdfPCell(new Phrase(c));
                        noteDisplay.PaddingBottom = 1f;
                        noteDisplay.Border = Rectangle.NO_BORDER;

                        subCategoryTable.AddCell(noteDisplay);

                        char[] splitChar = { '.' };
                        string allNote = carePlan.note;
                        if (allNote.IndexOf('.') == -1)
                        {
                            allNote += '.';
                        }
                        string[] particularValues = allNote.Split(splitChar);
                        int strLength = particularValues.Length > 1 ? particularValues.Length - 1 : 1;
                        PdfPTable interventionTable = new PdfPTable(2);
                        interventionTable.WidthPercentage = 100f;
                        float[] wthinterven = new float[] { .09f, 1f };

                        interventionTable.SetWidths(wthinterven);

                        for (int index = 0; index < strLength; index++)
                        {
                            string particularValue = particularValues[index].Trim();
                            if (particularValue.Length > 0 && particularValue != string.Empty && !String.IsNullOrWhiteSpace(particularValue))
                            {
                                Phrase interventionPhrase = new Phrase();
                                Chunk fontChunk = new Chunk("$", fontBoldTextOP1);
                                PdfPCell bulletCell = new PdfPCell(new Phrase(fontChunk));
                                bulletCell.Border = Rectangle.NO_BORDER;
                                interventionTable.AddCell(bulletCell);

                                Chunk contentChunk = new Chunk(particularValue + ". ", tableFont);
                                PdfPCell valueCell = new PdfPCell(new Phrase(contentChunk));
                                valueCell.Border = Rectangle.NO_BORDER;
                                interventionTable.AddCell(valueCell);
                            }
                        }
                        PdfPCell particularValueCell = new PdfPCell(interventionTable);
                        particularValueCell.Border = Rectangle.NO_BORDER;
                        subCategoryTable.AddCell(particularValueCell);
                    }

                    if (carePlan.particulars != "" && carePlan.particularFlag == "Y")
                    {
                        char[] splitChar = { '.' };
                        string particular = carePlan.particulars;
                        if (particular != "\n" && particular.Trim().Length > 0)
                        {


                            if (particular != "" && particular.IndexOf('.') == -1)
                            {
                                particular += ".";
                            }
                            string[] particularValues = carePlan.particulars.Split(splitChar);
                            int strLength = 0;
                            if (particularValues != null && particularValues.Length > 0)
                            {
                                if (particularValues[particularValues.Length - 1] != "")
                                {
                                    strLength = particularValues.Length;
                                }
                                else
                                {
                                    strLength = particularValues.Length - 1;
                                }
                                if (particularValues.Length == 1)
                                {
                                    strLength = 1;
                                }
                            }
                            if (strLength > 0)
                            {
                                Chunk particularChunk = new Chunk(Resources.Qola.UIverbiage.Particulars, fontBoldRedText);
                                particularChunk.SetUnderline(0.1f, -2f);
                                PdfPCell particularCell = new PdfPCell(new Phrase(particularChunk));
                                particularCell.Border = Rectangle.NO_BORDER;
                                particularCell.PaddingBottom = 1f;
                                subCategoryTable.AddCell(particularCell);
                            }
                            PdfPTable interventionTable = new PdfPTable(2);
                            interventionTable.WidthPercentage = 100f;
                            float[] wthinterven = new float[] { .09f, 1f };

                            interventionTable.SetWidths(wthinterven);

                            for (int index = 0; index < strLength; index++)
                            {
                                string particularValue = particularValues[index].Trim();
                                if (particularValue.Length > 0 && particularValue != string.Empty && !String.IsNullOrWhiteSpace(particularValue))
                                {
                                    Phrase interventionPhrase = new Phrase();
                                    Chunk fontChunk = new Chunk("$", fontBoldTextOP1);
                                    PdfPCell bulletCell = new PdfPCell(new Phrase(fontChunk));
                                    bulletCell.Border = Rectangle.NO_BORDER;
                                    interventionTable.AddCell(bulletCell);

                                    Chunk contentChunk = new Chunk(particularValue + ". ", tableFont);
                                    PdfPCell valueCell = new PdfPCell(new Phrase(contentChunk));
                                    valueCell.Border = Rectangle.NO_BORDER;
                                    interventionTable.AddCell(valueCell);
                                }

                            }
                            PdfPCell particularValueCell = new PdfPCell(interventionTable);
                            particularValueCell.Border = Rectangle.NO_BORDER;
                            subCategoryTable.AddCell(particularValueCell);
                        }
                    }
                    if (carePlanCategory.categoryId <= 5 || carePlanCategory.categoryId == 17)
                    {
                        if ((carePlan.fromDate != "" && carePlan.fromDate != null) || (carePlan.toDate != "" && carePlan.toDate != null && count == 0))
                        {
                            isAdd = true;
                            duration = new Chunk(Resources.Qola.UIverbiage.DurationOfActivity + ": ", fontBoldRedText);

                            if (carePlan.fromDate != "" && carePlan.fromDate != null)
                            {
                                string[] fromTime = carePlan.fromSplitTime.Split('-');
                                duration.Append(fromTime[1] + "-");
                            }
                            if (carePlan.toDate != "" && carePlan.toDate != null)
                            {
                                string[] toTime = carePlan.toSplitTime.Split('-');
                                duration.Append(toTime[1] + " minutes");
                            }
                            if (carePlan.durationFlag == "H")
                            {
                                if (carePlan.fromDate != "" && carePlan.fromDate != null)
                                {
                                    duration = new Chunk(Resources.Qola.UIverbiage.DurationOfAppoinment1 + ": ", fontBoldRedText);
                                    string[] fromTime = carePlan.fromSplitTime.Split('-');
                                    int hourValue = Convert.ToInt32(fromTime[1]);
                                    duration.Append(hours[hourValue]);
                                }
                            }

                            duration.SetUnderline(0.1f, -2f);
                        }
                    }
                    if (!isAdd)
                    {
                        PdfPCell emptyCell1 = new PdfPCell();
                        emptyCell1.Border = Rectangle.NO_BORDER;
                        subCategoryTable.AddCell(emptyCell1);
                    }
                    count += 1;
                }
                PdfPCell timeCell = new PdfPCell(new Phrase(duration));
                timeCell.Border = Rectangle.NO_BORDER;
                timeCell.PaddingBottom = 8f;
                subCategoryTable.AddCell(timeCell);

                PdfPCell mainCell = new PdfPCell(subCategoryTable);
                mainCell.Border = Rectangle.BOX;
                tblHeader.AddCell(mainCell);
            }
            if (addEmpty > 0 && addEmpty != 3)
            {
                for (int index = 0; index < addEmpty; index++)
                {
                    PdfPTable subCategoryTable = new PdfPTable(1);
                    subCategoryTable.WidthPercentage = 100f;
                    float[] wthSC = new float[] { 1f };
                    subCategoryTable.SetWidths(wthSC);

                    PdfPCell emptyCell = new PdfPCell();
                    emptyCell.FixedHeight = 13f;
                    emptyCell.BackgroundColor = BaseColor.YELLOW;
                    emptyCell.Border = Rectangle.NO_BORDER;
                    emptyCell.Border = Rectangle.BOTTOM_BORDER;
                    subCategoryTable.AddCell(emptyCell);

                    PdfPCell emptyCell1 = new PdfPCell();
                    emptyCell1.Border = Rectangle.NO_BORDER;
                    subCategoryTable.AddCell(emptyCell1);

                    PdfPCell mainCell = new PdfPCell(subCategoryTable);
                    mainCell.Border = Rectangle.BOX;
                    tblHeader.AddCell(mainCell);

                }
            }
            Phrase guideLine = new Phrase(Resources.Qola.UIverbiage.GuidelinesDirecties + ":\n", fontCellHeader);
            Chunk guideChun = new Chunk(note, tableFont);
            guideLine.Add(guideChun);


            PdfPCell directiveCell = new PdfPCell(new Phrase(guideLine));
            directiveCell.PaddingBottom = 8f;
            PdfPCell midCell = new PdfPCell();
            DateTime currentAssessedDate = lastAssessment;
            DateTime nextAssessedDate = currentAssessedDate.AddMonths(3);
            PdfPCell directiveCell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.GridRevisedFTIR + ": " + lastAssessment.ToString("dd MMMM, yyyy"), fontBoldRedText));
            tblHeader.AddCell(directiveCell);
            tblHeader.AddCell(midCell);
            tblHeader.AddCell(directiveCell1);
        }
        return tblHeader;
    }

    private string GetSubscript(int value)
    {
        StringBuilder returnValue = new StringBuilder();
        foreach (char digit in value.ToString())
            returnValue.Append((char)(digit - '0' + '₀'));
        return returnValue.ToString();
    }

    private bool GetGoalSheetService(string services, string compareValues)
    {
        bool isExists = false;
        string[] service = services.Split(',');
        isExists = service.Contains(compareValues);
        return isExists;
    }

    public PdfPTable CarePlanResidentNeedsAndGoalContentDetails()
    {

        PdfPTable tblGoalSheet = new PdfPTable(6);
        string fontpath = Server.MapPath(".");

        Font tableFontB = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);

        BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
        Font fontBoldTextOP1 = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);

        string services = string.Empty;
        string otherService = string.Empty;
        tblGoalSheet.WidthPercentage = 100f;
        float[] wthtblGoalSheet = new float[] { 0.75f, 1f, 1.4f, 0.8f, 1f, 0.75f };
        tblGoalSheet.SetWidths(wthtblGoalSheet);

        PdfPCell CellGoalSheet;
        PdfPCell emptyGoalSheet;
        emptyGoalSheet = new PdfPCell(new Phrase("", ProgressiveReport.font10));
        string headerColor = "#D9ECFF";

        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);

        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.residentNeeds + " / " + Resources.Qola.UIverbiage.Service + " / " + Resources.Qola.UIverbiage.Goals, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_LEFT;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);

        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ActionIntervention, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.PaddingBottom = 5f;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        tblGoalSheet.AddCell(CellGoalSheet);

        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OutcomesEffectiveness, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.PaddingBottom = 5f;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        tblGoalSheet.AddCell(CellGoalSheet);

        var PhrasePersonResponsible = new Phrase();
        PhrasePersonResponsible.Add(new Chunk("Person Responsible", ProgressiveReport.font8B));
        CellGoalSheet = new PdfPCell(new Phrase(PhrasePersonResponsible));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);

        CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateResolved, ProgressiveReport.font9B));
        CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
        CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
        CellGoalSheet.PaddingBottom = 5f;
        tblGoalSheet.AddCell(CellGoalSheet);

        PdfPTable tblCareService = new PdfPTable(8);
        tblCareService.WidthPercentage = 100f;
        float[] wthtblServices = new float[] { .15f, 1.3f, .15f, 1.3f, .15f, 1.3f, .15f, 1.3f, };
        tblCareService.SetWidths(wthtblServices);

        Collection<Common.GoalSheet> goalSheets;
        goalSheets = new Collection<Common.GoalSheet>();
        goalSheets = DAL.GoalSheet.GetResidentGoalDetails(_iResidentId, 0);


        int iGoalNo = 0;
        int BGCCount = 0;

        foreach (Common.GoalSheet GlShtReceive in goalSheets)
        {
            BGCCount++;
            string color = string.Empty;
            if (BGCCount % 2 == 0)
            {
                color = "#D9ECFF";
            }
            else
            {
                color = string.Empty;
            }
            CellGoalSheet = new PdfPCell(new Phrase(iGoalNo.ToString(), ProgressiveReport.tableFont));
            CellGoalSheet.HorizontalAlignment = Element.ALIGN_RIGHT;
            int spanCount = 1;
            if ((GlShtReceive.ResolvedDate.Day != 1 && GlShtReceive.ResolvedDate.Month != 1 && GlShtReceive.ResolvedDate.Year != 1) || (GlShtReceive.CloseType == 'C'))
            {

                spanCount = GlShtReceive.GoalSheetDetails != null ? GlShtReceive.GoalSheetDetails.Count + 2 : 1;
                CellGoalSheet.Rowspan = spanCount;
            }
            else
            {
                spanCount = GlShtReceive.GoalSheetDetails != null ? GlShtReceive.GoalSheetDetails.Count + 1 : 1;
                CellGoalSheet.Rowspan = spanCount;
            }
            CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.Date.ToString("MM-dd-yyyy"), ProgressiveReport.tableFont));
            CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
            if (color != "")
            {
                CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
            }
            tblGoalSheet.AddCell(CellGoalSheet);
            CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.ResidentNeeds, ProgressiveReport.tableFont));
            if (color != "")
            {
                CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }
            tblGoalSheet.AddCell(CellGoalSheet);
            if (color != "")
            {
                emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }
            else
            {
                emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
            }
            tblGoalSheet.AddCell(emptyGoalSheet);
            if (color != "")
            {
                emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }
            else
            {
                emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
            }
            tblGoalSheet.AddCell(emptyGoalSheet);

            CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.ContactPerson, ProgressiveReport.tableFont));
            if (color != "")
            {
                CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }
            else
            {
                emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
            }
            tblGoalSheet.AddCell(CellGoalSheet);
            if (color != "")
            {
                emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
            }
            else
            {
                emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
            }
            tblGoalSheet.AddCell(emptyGoalSheet);
            int dCount = 0;
            if (GlShtReceive.GoalSheetDetails != null && GlShtReceive.GoalSheetDetails.Count > 0)
            {
                foreach (Common.GoalSheetDetails objGoalSheetDetail in GlShtReceive.GoalSheetDetails)
                {
                    BGCCount = BGCCount + 1;
                    if (BGCCount % 2 == 0)
                    {
                        color = "#D9ECFF";
                    }
                    else
                    {
                        color = string.Empty;
                    }
                    CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.Date.ToString("MM-dd-yyyy"), ProgressiveReport.tableFont));
                    CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
                    if (color != "")
                    {
                        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                    }

                    tblGoalSheet.AddCell(CellGoalSheet);
                    if (color != "")
                    {
                        emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                    }
                    else
                    {
                        emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
                    }
                    tblGoalSheet.AddCell(emptyGoalSheet);
                    CellGoalSheet = new PdfPCell(new Phrase(objGoalSheetDetail.Intervation, ProgressiveReport.tableFont));
                    if (color != "")
                    {
                        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                    }
                    tblGoalSheet.AddCell(CellGoalSheet);
                    if (color != "")
                    {
                        emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                    }
                    else
                    {
                        emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
                    }
                    tblGoalSheet.AddCell(emptyGoalSheet);
                    CellGoalSheet = new PdfPCell(new Phrase("", ProgressiveReport.tableFont));
                    if (color != "")
                    {
                        CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                    }
                    tblGoalSheet.AddCell(CellGoalSheet);
                    if (color != "")
                    {
                        emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                    }
                    else
                    {
                        emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
                    }
                    tblGoalSheet.AddCell(emptyGoalSheet);
                    dCount++;
                }
            }
            if ((GlShtReceive.ResolvedDate.Day != 1 && GlShtReceive.ResolvedDate.Month != 1 && GlShtReceive.ResolvedDate.Year != 1) || GlShtReceive.CloseType == 'C')
            {
                BGCCount = BGCCount + 1;
                if (BGCCount % 2 == 0)
                {
                    color = "#D9ECFF";
                }
                else
                {
                    color = string.Empty;
                }
                CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.ModifiedOn.ToString("MM-dd-yyyy"), ProgressiveReport.tableFont));
                CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
                if (color != "")
                {
                    CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                }
                else
                {
                    emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
                }
                tblGoalSheet.AddCell(CellGoalSheet);
                if (color != "")
                {
                    emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                }
                else
                {
                    emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
                }
                tblGoalSheet.AddCell(emptyGoalSheet);
                if (color != "")
                {
                    emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                }
                else
                {
                    emptyGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
                }
                tblGoalSheet.AddCell(emptyGoalSheet);
                CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.Effectiveness, ProgressiveReport.tableFont));
                if (color != "")
                {
                    CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                }
                else
                {
                    CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
                }
                tblGoalSheet.AddCell(CellGoalSheet);
                CellGoalSheet = new PdfPCell(new Phrase("", ProgressiveReport.tableFont));
                if (color != "")
                {
                    CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                }
                else
                {
                    CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
                }
                tblGoalSheet.AddCell(CellGoalSheet);
                if (GlShtReceive.CloseType == 'C')
                {
                    CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.ModifiedOn.ToString("MM-dd-yyyy"), ProgressiveReport.tableFont));
                }
                else
                {
                    CellGoalSheet = new PdfPCell(new Phrase(GlShtReceive.ResolvedDate.ToString("MM-dd-yyyy"), ProgressiveReport.tableFont));
                }
                CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
                if (color != "")
                {
                    CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(color));
                }
                else
                {
                    CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#FFFFFF"));
                }
                tblGoalSheet.AddCell(CellGoalSheet);
            }
        }
        if (goalSheets.Count == 0)
        {
            for (int index = 0; index < 15; index++)
            {
                string color = string.Empty;
                if (index % 2 == 1)
                {
                    color = "#D9ECFF";
                }
                else
                {
                    color = string.Empty;
                }
                for (int colIndex = 0; colIndex < 6; colIndex++)
                {
                    PdfPCell emptyCell = new PdfPCell();
                    if (color != "")
                    {
                        emptyCell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
                    }
                    emptyCell.FixedHeight = 20f;
                    tblGoalSheet.AddCell(emptyCell);
                }
            }
        }
        var PhraseGoalSheetNote = new Phrase();
        PhraseGoalSheetNote.Add(new Chunk(Resources.Qola.UIverbiage.SpecficGoalsReviewedComment, ProgressiveReport.font8BI));

        PdfPCell tblGoalSheetNote = new PdfPCell(new Phrase(PhraseGoalSheetNote));
        tblGoalSheetNote.HorizontalAlignment = Element.ALIGN_LEFT;
        tblGoalSheetNote.VerticalAlignment = Element.ALIGN_MIDDLE;
        tblGoalSheetNote.PaddingTop = 5f;
        tblGoalSheetNote.PaddingBottom = 5f;
        tblGoalSheetNote.Colspan = 6;
        tblGoalSheet.AddCell(tblGoalSheetNote);

        if (goalSheets.Count > 0)
        {
            string userName = "";
            if (goalSheets[0].CreatedBy.LastName != "")
            {
                userName = goalSheets[0].CreatedBy.LastName;
            }
            if (goalSheets[0].CreatedBy.FirstName != "")
            {
                userName += ", " + goalSheets[0].CreatedBy.FirstName;
            }
            string userTypeName = goalSheets[0].CreatedBy.UserTypeName;
            DateTime mValue = Convert.ToDateTime(goalSheets[0].ModifiedOn);
            string modified = mValue.ToString("MMMM dd, yyyy");
            PdfPCell modifiedOn = new PdfPCell(new Phrase(userName + ", " + userTypeName + ", " + modified, ProgressiveReport.font8));
            modifiedOn.HorizontalAlignment = Element.ALIGN_LEFT;
            modifiedOn.VerticalAlignment = Element.ALIGN_MIDDLE;
            modifiedOn.Border = Rectangle.NO_BORDER;
            modifiedOn.PaddingTop = 5f;
            modifiedOn.PaddingBottom = 5f;
            modifiedOn.Colspan = 6;
        }


        return tblGoalSheet;
    }

    public PdfPTable CarePlanResidentNeedsAndGoalContentDetailsnew(string sFromDate = "", string sToDate = "", char cPrintStatus = 'A', char cStatus = 'H')
    {
        Collection<Common.GoalSheet> goalSheets;
        string fontpath = Server.MapPath(".");

        string GoalSheetDetails = string.Empty;
        string Pointofcontactvalue = string.Empty;

        Font tableFontB = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);


        BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
        Font fontBoldTextOP1 = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);

        string[] services = { "", Resources.Qola.UIverbiage.ProvisionofMeal, Resources.Qola.UIverbiage.MedicationAdministration, Resources.Qola.UIverbiage.AssistanceWithBathing, Resources.Qola.UIverbiage.AssistanceWithDressing, Resources.Qola.UIverbiage.AssistanceWithHygiene, Resources.Qola.UIverbiage.AssistanceWithAmbulation, Resources.Qola.UIverbiage.AssistanceWithFeeding, Resources.Qola.UIverbiage.SkinAndWoundCare, Resources.Qola.UIverbiage.DementiaCare, Resources.Qola.UIverbiage.ContinenceCare, Resources.Qola.UIverbiage.OtherFeeforServices, Resources.Qola.UIverbiage.Other, Resources.Qola.UIverbiage.Pharmacy, Resources.Qola.UIverbiage.Physician, Resources.Qola.UIverbiage.Nursing };
        goalSheets = new Collection<Common.GoalSheet>();

        Common.GoalSheet goalSheet = new GoalSheet();
        Common.Residents objResident = new Common.Residents();
        objResident.ID = _iResidentId;
        goalSheet.Resident = objResident;
        goalSheet.ViewStatus = 'N';
        if (sFromDate != "")
        {
            goalSheet.FromDate = stringToDateFormat(sFromDate);
        }
        if (sToDate != "")
        {
            goalSheet.EndDate = stringToDateFormat(sToDate);
        }
        goalSheet.PrintStatus = cStatus;

        if (cStatus == 'H')
        {
            goalSheets = DAL.GoalSheet.GetSpecificGoalDetailsCollection(goalSheet);
        }
        else if (cStatus == 'A')
        {
            goalSheets = DAL.GoalSheet.GetSpecificGoalCollectionsByResidentId(_iResidentId, "A", sFromDate, sToDate);
        }
        PdfPTable tblGoal = null;
        if (goalSheets != null && goalSheets.Count > 0)
        {
            tblGoal = new PdfPTable(6);
            tblGoal.WidthPercentage = 100f;
            tblGoal.SetWidths(new float[] { 1f, 3.5f, 1.5f, 1f, 1f, 1f });
            int count = 0;

            foreach (Common.GoalSheet GlShtReceive in goalSheets)
            {
                count++;
                Int16 Selectedservice = GlShtReceive.ServiceType;
                string serviceName = services[Selectedservice];
                if (Selectedservice == 12)
                {
                    serviceName = "Other Service: " + GlShtReceive.ServiceOther;
                }
                Chunk residentNeedsChunk = new Chunk(Resources.Qola.UIverbiage.ResidentNeed + ": \t\t\t" + serviceName, ProgressiveReport.font10B);
                Chunk ResidentNeedsChunk = new Chunk(GlShtReceive.ResidentNeeds, ProgressiveReport.font9);
                var residentPhrasechunk = new Phrase();
                residentPhrasechunk.Add(residentNeedsChunk);
                PdfPCell Residentcell = new PdfPCell(new Phrase(residentPhrasechunk));
                Residentcell.HorizontalAlignment = Element.ALIGN_MIDDLE;
                Residentcell.BorderWidthBottom = 0.5f;
                Residentcell.BorderWidthRight = 0;
                Residentcell.Colspan = 3;
                Residentcell.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                Residentcell.BorderWidthBottom = 0;
                tblGoal.AddCell(Residentcell);

                var datephrase = new Phrase();
                datephrase.Add(new Phrase(Resources.Qola.UIverbiage.Date + ": ", ProgressiveReport.font9B));
                if (GlShtReceive.Date.Day != 1 && GlShtReceive.Date.Month != 1 && GlShtReceive.Date.Year != 1)
                {
                    datephrase.Add(new Chunk(GlShtReceive.Date.ToString("MM-dd-yyyy"), ProgressiveReport.font9));
                }
                PdfPCell Datecell = new PdfPCell(datephrase);
                Datecell.HorizontalAlignment = Element.ALIGN_CENTER;
                Datecell.VerticalAlignment = Element.ALIGN_CENTER;
                Datecell.Colspan = 3;
                tblGoal.AddCell(Datecell);

                PdfPCell Datecell_1 = new PdfPCell(new Phrase(ResidentNeedsChunk));
                Datecell_1.HorizontalAlignment = Element.ALIGN_MIDDLE;
                Datecell_1.VerticalAlignment = Element.ALIGN_CENTER;
                Datecell_1.Colspan = 3;
                Datecell_1.NoWrap = false;
                Datecell_1.PaddingLeft = 20f;
                Datecell_1.BorderWidthTop = 0;
                Datecell_1.BorderWidthBottom = 0.5f;
                Datecell_1.BorderWidthRight = 0;
                Datecell_1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                tblGoal.AddCell(Datecell_1);

                PdfPCell Pointofcontactcell = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.PointOfContact, ProgressiveReport.font9B));
                Pointofcontactcell.HorizontalAlignment = Element.ALIGN_CENTER;
                Pointofcontactcell.VerticalAlignment = Element.ALIGN_MIDDLE;
                tblGoal.AddCell(Pointofcontactcell);


                Pointofcontactvalue = GlShtReceive.ContactPerson;
                if (GlShtReceive.ModifiedBy.UserTypeName != "")
                {
                    Pointofcontactvalue += "\n(" + Resources.Qola.UIverbiage.Developer + " - " + GlShtReceive.ModifiedBy.UserTypeName + ")";

                }

                PdfPCell Pointvaluecell = new PdfPCell(new Phrase(Pointofcontactvalue, ProgressiveReport.font9));
                Pointvaluecell.HorizontalAlignment = Element.ALIGN_CENTER;
                Pointvaluecell.VerticalAlignment = Element.ALIGN_MIDDLE;
                Pointvaluecell.Colspan = 2;
                Pointvaluecell.BorderWidthTop = 0f;
                Pointvaluecell.BorderWidthLeft = 0f;
                Pointvaluecell.BorderWidthBottom = 0.5f;
                tblGoal.AddCell(Pointvaluecell);

                if (GlShtReceive.GoalSheetDetails != null && GlShtReceive.GoalSheetDetails.Count > 0)
                {
                    foreach (Common.GoalSheetDetails objGoalSheetDetail in GlShtReceive.GoalSheetDetails)
                    {
                        if (objGoalSheetDetail.ID > 0 && objGoalSheetDetail.CreatedBy != null)
                        {
                            GoalSheetDetails = objGoalSheetDetail.CreatedBy.FirstName + " " + objGoalSheetDetail.CreatedBy.LastName + "\n (" + objGoalSheetDetail.CreatedBy.UserTypeName + ")";

                            Chunk ActionInterventionChunk1 = new Chunk(Resources.Qola.UIverbiage.ActionIntervention + "\n", ProgressiveReport.font9B);
                            ActionInterventionChunk1.SetUnderline(0.1f, -2f);

                            var Phrasechunk1 = new Phrase();
                            Phrasechunk1.Add(ActionInterventionChunk1);
                            PdfPCell Actioncell1 = new PdfPCell(new Phrase(Phrasechunk1));
                            Actioncell1.Colspan = 3;
                            Actioncell1.BorderWidthBottom = 0;
                            Actioncell1.BorderWidthRight = 0;
                            Actioncell1.BorderWidthTop = 0;
                            tblGoal.AddCell(Actioncell1);

                            PdfPCell Goalmetcell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.GoalMet, ProgressiveReport.font9B));
                            Goalmetcell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            Goalmetcell1.BorderWidthTop = 0f;
                            Goalmetcell1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            tblGoal.AddCell(Goalmetcell1);

                            PdfPCell changeinneedcell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ChangeinNeed, ProgressiveReport.font9B));
                            changeinneedcell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            changeinneedcell1.BorderWidthLeft = 0f;
                            changeinneedcell1.BorderWidthTop = 0f;
                            changeinneedcell1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            tblGoal.AddCell(changeinneedcell1);

                            PdfPCell Ineffectivecell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Ineffective, ProgressiveReport.font9B));
                            Ineffectivecell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            Ineffectivecell1.BorderWidthTop = 0f;
                            Ineffectivecell1.BorderWidthLeft = 0f;
                            Ineffectivecell1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                            tblGoal.AddCell(Ineffectivecell1);



                            Chunk DirectionChunk2 = new Chunk("\t\t(" + Resources.Qola.UIverbiage.DirectiontoStaff + ")", ProgressiveReport.font8B);
                            PdfPCell Actioncell2 = new PdfPCell(new Phrase(DirectionChunk2));
                            Actioncell2.Colspan = 3;
                            Actioncell2.BorderWidthTop = 0;
                            Actioncell2.BorderWidthBottom = 0;
                            Actioncell2.BorderWidthRight = 0;
                            Actioncell2.PaddingBottom = 10f;
                            tblGoal.AddCell(Actioncell2);

                            PdfPCell goalEmpty1 = new PdfPCell(new Phrase(""));
                            goalEmpty1.BorderWidthTop = 0;
                            goalEmpty1.BorderWidthBottom = 0;
                            tblGoal.AddCell(goalEmpty1);

                            PdfPCell changedatecell2 = new PdfPCell(new Phrase(""));
                            changedatecell2.BorderWidthTop = 0;
                            changedatecell2.BorderWidthLeft = 0;
                            changedatecell2.BorderWidthBottom = 0;
                            changedatecell2.HorizontalAlignment = Element.ALIGN_CENTER;
                            tblGoal.AddCell(changedatecell2);

                            PdfPCell Ineffectivedatecell1 = new PdfPCell(new Phrase(""));
                            Ineffectivedatecell1.BorderWidthTop = 0;
                            Ineffectivedatecell1.BorderWidthBottom = 0;
                            Ineffectivedatecell1.BorderWidthLeft = 0;
                            Ineffectivedatecell1.HorizontalAlignment = Element.ALIGN_CENTER;
                            tblGoal.AddCell(Ineffectivedatecell1);


                            PdfPCell ActionInterventionDate = new PdfPCell(new Phrase(objGoalSheetDetail.CreatedOn.ToString("MM-dd-yyyy") + " - ", ProgressiveReport.font9B));
                            ActionInterventionDate.HorizontalAlignment = Element.ALIGN_CENTER;
                            ActionInterventionDate.BorderWidthBottom = 0;
                            ActionInterventionDate.BorderWidthRight = 0;
                            ActionInterventionDate.BorderWidthTop = 0;
                            tblGoal.AddCell(ActionInterventionDate);

                            PdfPCell ActionIntervention = new PdfPCell(new Phrase(objGoalSheetDetail.Intervation, ProgressiveReport.font9));
                            ActionIntervention.HorizontalAlignment = Element.ALIGN_LEFT;
                            ActionIntervention.BorderWidthLeft = 0;
                            ActionIntervention.BorderWidthRight = 0;
                            ActionIntervention.PaddingBottom = 5f;
                            tblGoal.AddCell(ActionIntervention);

                            PdfPCell ActionInterventionName = new PdfPCell(new Phrase(objGoalSheetDetail.CreatedBy.FirstName + " " + objGoalSheetDetail.CreatedBy.LastName + "\n (" + objGoalSheetDetail.CreatedBy.UserTypeName + ")", ProgressiveReport.font9));
                            ActionInterventionName.HorizontalAlignment = Element.ALIGN_CENTER;
                            ActionInterventionName.BorderWidthTop = 0;
                            ActionInterventionName.BorderWidthBottom = 0;
                            ActionInterventionName.BorderWidthLeft = 0;
                            ActionInterventionName.BorderWidthRight = 0;
                            tblGoal.AddCell(ActionInterventionName);

                            PdfPCell goalEmpty = new PdfPCell(new Phrase(""));
                            goalEmpty.BorderWidthTop = 0;
                            goalEmpty.BorderWidthBottom = 0;
                            tblGoal.AddCell(goalEmpty);

                            PdfPCell changedatecell = new PdfPCell(new Phrase(""));
                            changedatecell.BorderWidthTop = 0;
                            changedatecell.BorderWidthLeft = 0;
                            changedatecell.BorderWidthBottom = 0f;
                            changedatecell.HorizontalAlignment = Element.ALIGN_CENTER;
                            tblGoal.AddCell(changedatecell);

                            PdfPCell Ineffectivedatecell = new PdfPCell(new Phrase(""));
                            Ineffectivedatecell.BorderWidthTop = 0;
                            Ineffectivedatecell.BorderWidthBottom = 0;
                            Ineffectivedatecell.BorderWidthLeft = 0;
                            Ineffectivedatecell.HorizontalAlignment = Element.ALIGN_CENTER;
                            tblGoal.AddCell(Ineffectivedatecell);

                            PdfPCell ActionInEmpty = new PdfPCell(new Phrase(""));
                            ActionInEmpty.Colspan = 3;
                            ActionInEmpty.BorderWidthBottom = 0.5f;
                            ActionInEmpty.BorderWidthTop = 0;
                            ActionInEmpty.BorderWidthRight = 0;
                            ActionInEmpty.MinimumHeight = 10f;
                            tblGoal.AddCell(ActionInEmpty);

                            PdfPCell ActionGoalcell1 = new PdfPCell(new Phrase(""));
                            ActionGoalcell1.BorderWidthTop = 0;
                            ActionGoalcell1.BorderWidthBottom = 0.5f;
                            tblGoal.AddCell(ActionGoalcell1);

                            PdfPCell Actionchangecell1 = new PdfPCell(new Phrase(""));
                            Actionchangecell1.BorderWidthTop = 0;
                            Actionchangecell1.BorderWidthBottom = 0.5f;
                            Actionchangecell1.BorderWidthLeft = 0;
                            tblGoal.AddCell(Actionchangecell1);

                            PdfPCell ActionDatecell1 = new PdfPCell(new Phrase(""));
                            ActionDatecell1.BorderWidthTop = 0;
                            ActionDatecell1.BorderWidthLeft = 0;
                            ActionDatecell1.BorderWidthBottom = 0.5f;
                            tblGoal.AddCell(ActionDatecell1);


                            if (objGoalSheetDetail.GoalSheetFollow != null)
                            {
                                foreach (Common.GoalSheetFollow objGoalSheetDetailFollow in objGoalSheetDetail.GoalSheetFollow)
                                {
                                    if (objGoalSheetDetailFollow.CloseType.ToString() != "" && objGoalSheetDetailFollow.RemainderType.ToString() != "N")
                                    {

                                        Chunk OutcomesEffectivenessChunk = new Chunk(Resources.Qola.UIverbiage.OutcomesEffectiveness, ProgressiveReport.font9B);
                                        OutcomesEffectivenessChunk.SetUnderline(0.1f, -2f);
                                        PdfPCell Effectivenesscell = new PdfPCell(new Phrase(OutcomesEffectivenessChunk));
                                        Effectivenesscell.Colspan = 3;
                                        Effectivenesscell.FixedHeight = 30f;
                                        Effectivenesscell.BorderWidthTop = 0;
                                        Effectivenesscell.BorderWidthBottom = 0;
                                        Effectivenesscell.BorderWidthRight = 0;
                                        tblGoal.AddCell(Effectivenesscell);

                                        PdfPCell IneffectiveGoalcell = new PdfPCell(new Phrase(""));
                                        IneffectiveGoalcell.BorderWidthTop = 0;
                                        IneffectiveGoalcell.BorderWidthBottom = 0;
                                        tblGoal.AddCell(IneffectiveGoalcell);

                                        PdfPCell Ineffectivechangeinneedcell = new PdfPCell(new Phrase(""));
                                        Ineffectivechangeinneedcell.BorderWidthTop = 0;
                                        Ineffectivechangeinneedcell.BorderWidthLeft = 0;
                                        Ineffectivechangeinneedcell.BorderWidthBottom = 0;
                                        tblGoal.AddCell(Ineffectivechangeinneedcell);

                                        PdfPCell IneffectiveDatecell = new PdfPCell(new Phrase(""));
                                        IneffectiveDatecell.BorderWidthTop = 0;
                                        IneffectiveDatecell.BorderWidthBottom = 0;
                                        IneffectiveDatecell.BorderWidthLeft = 0;
                                        tblGoal.AddCell(IneffectiveDatecell);

                                        PdfPCell ActionDatesubcontent = new PdfPCell(new Phrase(objGoalSheetDetailFollow.CreatedOn.ToString("MM-dd-yyyy") + " - ", ProgressiveReport.font9));
                                        ActionDatesubcontent.HorizontalAlignment = Element.ALIGN_CENTER;
                                        ActionDatesubcontent.BorderWidthBottom = 0;
                                        ActionDatesubcontent.BorderWidthRight = 0;
                                        ActionDatesubcontent.BorderWidthTop = 0;
                                        tblGoal.AddCell(ActionDatesubcontent);

                                        PdfPCell ActionInterventionsubcontent = new PdfPCell(new Phrase(objGoalSheetDetailFollow.FollowUpNote, ProgressiveReport.font9));
                                        ActionInterventionsubcontent.HorizontalAlignment = Element.ALIGN_LEFT;
                                        ActionInterventionsubcontent.BorderWidthLeft = 0;
                                        ActionInterventionsubcontent.BorderWidthRight = 0;
                                        ActionInterventionsubcontent.PaddingBottom = 5f;
                                        tblGoal.AddCell(ActionInterventionsubcontent);

                                        PdfPCell ActionNamesubcontent = new PdfPCell(new Phrase(objGoalSheetDetailFollow.CreatedBy.FirstName + " " + objGoalSheetDetailFollow.CreatedBy.LastName + "\n (" + objGoalSheetDetailFollow.CreatedBy.UserTypeName + ")", ProgressiveReport.font9));
                                        ActionNamesubcontent.HorizontalAlignment = Element.ALIGN_CENTER;
                                        ActionNamesubcontent.BorderWidthTop = 0;
                                        ActionNamesubcontent.BorderWidthBottom = 0;
                                        ActionNamesubcontent.BorderWidthLeft = 0;
                                        ActionNamesubcontent.BorderWidthRight = 0;
                                        tblGoal.AddCell(ActionNamesubcontent);


                                        Phrase phgoalmetsubcontent = new Phrase();
                                        if (objGoalSheetDetailFollow.CloseType == 'R')
                                        {
                                            phgoalmetsubcontent = new Phrase(objGoalSheetDetailFollow.CloseTypeDate.ToString("MM-dd-yyyy"), ProgressiveReport.font9);
                                        }
                                        PdfPCell goalEmptysubcontent = new PdfPCell(new Phrase(phgoalmetsubcontent));
                                        goalEmptysubcontent.BorderWidthTop = 0;
                                        goalEmptysubcontent.BorderWidthBottom = 0;
                                        tblGoal.AddCell(goalEmptysubcontent);


                                        Phrase phchangesubcontent = new Phrase();
                                        if (objGoalSheetDetailFollow.CloseType == 'N')
                                        {
                                            phchangesubcontent = new Phrase(objGoalSheetDetailFollow.CloseTypeDate.ToString("MM-dd-yyyy"), ProgressiveReport.font9);
                                        }
                                        PdfPCell changedatesubcontentcell = new PdfPCell(phchangesubcontent);
                                        changedatesubcontentcell.BorderWidthTop = 0;
                                        changedatesubcontentcell.BorderWidthLeft = 0;
                                        changedatesubcontentcell.BorderWidthBottom = 0;
                                        changedatesubcontentcell.HorizontalAlignment = Element.ALIGN_CENTER;
                                        tblGoal.AddCell(changedatesubcontentcell);

                                        Phrase phIneffectiverdatesubcontent = new Phrase();
                                        if (objGoalSheetDetailFollow.CloseType == 'I')
                                        {
                                            phIneffectiverdatesubcontent = new Phrase(objGoalSheetDetailFollow.CloseTypeDate.ToString("MM-dd-yyyy"), ProgressiveReport.font9);
                                        }
                                        PdfPCell Ineffectivedatesubcontentcell = new PdfPCell(phIneffectiverdatesubcontent);
                                        Ineffectivedatesubcontentcell.BorderWidthTop = 0;
                                        Ineffectivedatesubcontentcell.BorderWidthLeft = 0;
                                        Ineffectivedatesubcontentcell.BorderWidthBottom = 0;
                                        Ineffectivedatesubcontentcell.HorizontalAlignment = Element.ALIGN_CENTER;
                                        tblGoal.AddCell(Ineffectivedatesubcontentcell);

                                        PdfPCell outcomeEmpty = new PdfPCell(new Phrase(""));
                                        outcomeEmpty.Colspan = 3;
                                        outcomeEmpty.BorderWidthBottom = 0.5f;
                                        outcomeEmpty.BorderWidthTop = 0;
                                        outcomeEmpty.BorderWidthRight = 0;
                                        outcomeEmpty.MinimumHeight = 10f;
                                        tblGoal.AddCell(outcomeEmpty);

                                        PdfPCell outcomeGoalcell1 = new PdfPCell(new Phrase(""));
                                        outcomeGoalcell1.BorderWidthTop = 0;
                                        outcomeGoalcell1.BorderWidthBottom = 0.5f;
                                        tblGoal.AddCell(outcomeGoalcell1);

                                        PdfPCell outcomechangecell1 = new PdfPCell(new Phrase(""));
                                        outcomechangecell1.BorderWidthTop = 0;
                                        outcomechangecell1.BorderWidthBottom = 0.5f;
                                        outcomechangecell1.BorderWidthLeft = 0;
                                        tblGoal.AddCell(outcomechangecell1);

                                        PdfPCell OutcomeDatecell1 = new PdfPCell(new Phrase(""));
                                        OutcomeDatecell1.BorderWidthTop = 0;
                                        OutcomeDatecell1.BorderWidthLeft = 0;
                                        OutcomeDatecell1.BorderWidthBottom = 0.5f;
                                        tblGoal.AddCell(OutcomeDatecell1);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {

                    Chunk ActionInterventionChunk1 = new Chunk(Resources.Qola.UIverbiage.ActionIntervention + "\n", ProgressiveReport.font9B);
                    ActionInterventionChunk1.SetUnderline(0.1f, -2f);

                    Chunk DirectionChunk1 = new Chunk("\n\t\t(" + Resources.Qola.UIverbiage.DirectiontoStaff + ")", ProgressiveReport.font8B);
                    var Phrasechunk1 = new Phrase();
                    Phrasechunk1.Add(ActionInterventionChunk1);
                    Phrasechunk1.Add(DirectionChunk1);
                    PdfPCell Actioncell1 = new PdfPCell(new Phrase(Phrasechunk1));
                    Actioncell1.Colspan = 3;
                    Actioncell1.BorderWidthBottom = 0;
                    Actioncell1.BorderWidthRight = 0;
                    Actioncell1.BorderWidthTop = 0f;
                    Actioncell1.PaddingBottom = 10f;
                    tblGoal.AddCell(Actioncell1);

                    PdfPCell Goalmetcell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.GoalMet, ProgressiveReport.font9B));
                    Goalmetcell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    Goalmetcell1.BorderWidthTop = 0;
                    Goalmetcell1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblGoal.AddCell(Goalmetcell1);

                    PdfPCell changeinneedcell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ChangeinNeed, ProgressiveReport.font9B));
                    changeinneedcell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    changeinneedcell1.BorderWidthTop = 0;
                    changeinneedcell1.BorderWidthLeft = 0;
                    changeinneedcell1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblGoal.AddCell(changeinneedcell1);

                    PdfPCell Ineffectivecell1 = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Ineffective, ProgressiveReport.font9B));
                    Ineffectivecell1.HorizontalAlignment = Element.ALIGN_CENTER;
                    Ineffectivecell1.BorderWidthLeft = 0;
                    Ineffectivecell1.BorderWidthTop = 0;
                    Ineffectivecell1.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml("#E5E4E2"));
                    tblGoal.AddCell(Ineffectivecell1);

                    PdfPCell outcomeEmpty = new PdfPCell(new Phrase(""));
                    outcomeEmpty.Colspan = 3;
                    outcomeEmpty.BorderWidthBottom = 0.5f;
                    outcomeEmpty.BorderWidthTop = 0;
                    outcomeEmpty.BorderWidthRight = 0;
                    outcomeEmpty.MinimumHeight = 50f;
                    tblGoal.AddCell(outcomeEmpty);

                    PdfPCell outcomeGoalcell1 = new PdfPCell(new Phrase(""));
                    outcomeGoalcell1.BorderWidthTop = 0;
                    outcomeGoalcell1.BorderWidthBottom = 0.5f;
                    tblGoal.AddCell(outcomeGoalcell1);

                    PdfPCell outcomechangecell1 = new PdfPCell(new Phrase(""));
                    outcomechangecell1.BorderWidthTop = 0;
                    outcomechangecell1.BorderWidthBottom = 0.5f;
                    outcomechangecell1.BorderWidthLeft = 0;
                    tblGoal.AddCell(outcomechangecell1);

                    PdfPCell OutcomeDatecell1 = new PdfPCell(new Phrase(""));
                    OutcomeDatecell1.BorderWidthTop = 0;
                    OutcomeDatecell1.BorderWidthLeft = 0;
                    OutcomeDatecell1.BorderWidthBottom = 0.5f;
                    tblGoal.AddCell(OutcomeDatecell1);
                }


                if (goalSheets.Count != count)
                {
                    PdfPCell Empty = new PdfPCell(new Phrase(""));
                    Empty.Border = 0;
                    Empty.Colspan = 6;
                    Empty.BorderWidthTop = 0f;
                    Empty.MinimumHeight = 20f;
                    tblGoal.AddCell(Empty);
                }
            }

            PdfPCell ResidentGoalComment1cell = new PdfPCell(new Phrase("\t\t\t\t" + Resources.Qola.UIverbiage.ResidentGoalComment1, ProgressiveReport.font6BI));
            ResidentGoalComment1cell.Colspan = 6;
            ResidentGoalComment1cell.PaddingRight = 5f;
            ResidentGoalComment1cell.PaddingBottom = 2f;
            ResidentGoalComment1cell.BorderWidthBottom = 0;
            ResidentGoalComment1cell.BorderWidthTop = 0;
            tblGoal.AddCell(ResidentGoalComment1cell);


            PdfPCell ResidentGoalComment1cellEmpty = new PdfPCell(new Phrase(""));
            ResidentGoalComment1cellEmpty.Colspan = 6;
            ResidentGoalComment1cellEmpty.BorderWidthBottom = 0;
            ResidentGoalComment1cellEmpty.BorderWidthTop = 0;
            ResidentGoalComment1cellEmpty.FixedHeight = 5f;
            tblGoal.AddCell(ResidentGoalComment1cellEmpty);


            PdfPCell ResidentGoalComment3cell = new PdfPCell(new Phrase("\t\t\t\t" + Resources.Qola.UIverbiage.ResidentGoalComment3, ProgressiveReport.font6BI));
            ResidentGoalComment3cell.Colspan = 6;
            ResidentGoalComment3cell.NoWrap = false;
            ResidentGoalComment3cell.PaddingRight = 5f;
            ResidentGoalComment3cell.PaddingBottom = 5f;
            ResidentGoalComment3cell.BorderWidthTop = 0;
            tblGoal.AddCell(ResidentGoalComment3cell);
        }
        return tblGoal;


    }

    public PdfPTable CarePlanResidentNeedsAndGoalContentNewV3()
    {
        PdfPTable table = null;
        Collection<Common.GoalSheet> goalSheets;
        goalSheets = new Collection<Common.GoalSheet>();
        goalSheets = DAL.GoalSheet.GetResidentGoalDetails(_iResidentId, 0);
        if (goalSheets.Count > 0)
        {
            table.WidthPercentage = 100f;
            PdfPTable tblGoalSheet = new PdfPTable(6);
            string fontpath = Server.MapPath(".");

            Font tableFontB = FontFactory.GetFont(BaseFont.TIMES_ROMAN, 9, Font.BOLD, BaseColor.BLACK);

            BaseFont bf_Webdings = BaseFont.CreateFont(fontpath + "/CSS/font/WINGDNG2.TTF", BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
            Font fontBoldTextOP1 = new Font(bf_Webdings, 10, Font.BOLD, BaseColor.BLACK);

            PdfPCell tblGoalSheetHeaderTitle = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ResidentSpecificGoals, ProgressiveReport.font12B));
            tblGoalSheetHeaderTitle.HorizontalAlignment = Element.ALIGN_CENTER;
            tblGoalSheetHeaderTitle.Colspan = 10;
            tblGoalSheetHeaderTitle.Border = 0;
            tblGoalSheetHeaderTitle.PaddingBottom = 5f;
            table.AddCell(tblGoalSheetHeaderTitle);

            PdfPCell careService = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SpecificGoalServiceAvilable, tableFontB));
            careService.Colspan = 10;
            careService.Border = 0;
            careService.HorizontalAlignment = Element.ALIGN_LEFT;
            careService.PaddingBottom = 10f;

            table.AddCell(careService);

            string services = string.Empty;
            string otherService = string.Empty;
            string otherFeeService = string.Empty;
            tblGoalSheet.WidthPercentage = 100f;
            float[] wthtblGoalSheet = new float[] { 0.75f, 1f, 1.4f, 0.8f, 1f, 0.75f };
            tblGoalSheet.SetWidths(wthtblGoalSheet);

            PdfPCell CellGoalSheet;
            PdfPCell emptyGoalSheet;
            emptyGoalSheet = new PdfPCell(new Phrase("", ProgressiveReport.font10));
            string headerColor = "#D9ECFF";
            CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Date, ProgressiveReport.font9B));
            CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
            CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
            CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
            CellGoalSheet.PaddingBottom = 5f;
            tblGoalSheet.AddCell(CellGoalSheet);

            CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.residentNeeds + " / " + Resources.Qola.UIverbiage.Service + " / " + Resources.Qola.UIverbiage.Goals, ProgressiveReport.font9B));
            CellGoalSheet.HorizontalAlignment = Element.ALIGN_LEFT;
            CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
            CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
            CellGoalSheet.PaddingBottom = 5f;
            tblGoalSheet.AddCell(CellGoalSheet);

            CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ActionIntervention, ProgressiveReport.font9B));
            CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
            CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
            CellGoalSheet.PaddingBottom = 5f;
            CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
            tblGoalSheet.AddCell(CellGoalSheet);

            CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OutcomesEffectiveness, ProgressiveReport.font9B));
            CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
            CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
            CellGoalSheet.PaddingBottom = 5f;
            CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
            tblGoalSheet.AddCell(CellGoalSheet);

            var PhrasePersonResponsible = new Phrase();
            PhrasePersonResponsible.Add(new Chunk("Person Responsible", ProgressiveReport.font8B));
            CellGoalSheet = new PdfPCell(new Phrase(PhrasePersonResponsible));
            CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
            CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
            CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
            CellGoalSheet.PaddingBottom = 5f;
            tblGoalSheet.AddCell(CellGoalSheet);

            CellGoalSheet = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DateResolved, ProgressiveReport.font9B));
            CellGoalSheet.HorizontalAlignment = Element.ALIGN_CENTER;
            CellGoalSheet.VerticalAlignment = Element.ALIGN_MIDDLE;
            CellGoalSheet.BackgroundColor = new BaseColor(System.Drawing.ColorTranslator.FromHtml(headerColor));
            CellGoalSheet.PaddingBottom = 5f;
            tblGoalSheet.AddCell(CellGoalSheet);

            PdfPTable tblCareService = new PdfPTable(9);
            tblCareService.WidthPercentage = 100f;
            float[] wthtblServices = new float[] { .15f, 1.3f, .15f, 1.3f, .15f, .15f, 1.3f, .15f, 1.3f, };
            tblCareService.SetWidths(wthtblServices);





            int iGoalNo = 0;
            int BGCCount = 0;

            foreach (Common.GoalSheet GlShtReceive in goalSheets)
            {

                if (GlShtReceive.ServiceType != 0 && GlShtReceive.ServiceType != null)
                {
                    services += GlShtReceive.ServiceType + ",";
                }
            }

            var PhraseGoalSheetNote = new Phrase();
            PhraseGoalSheetNote.Add(new Chunk(Resources.Qola.UIverbiage.SpecficGoalsReviewedComment, ProgressiveReport.font8BI));

            PdfPCell tblGoalSheetNote = new PdfPCell(new Phrase(PhraseGoalSheetNote));
            tblGoalSheetNote.HorizontalAlignment = Element.ALIGN_LEFT;
            tblGoalSheetNote.VerticalAlignment = Element.ALIGN_MIDDLE;
            tblGoalSheetNote.PaddingTop = 5f;
            tblGoalSheetNote.PaddingBottom = 5f;
            tblGoalSheetNote.Colspan = 6;
            tblGoalSheet.AddCell(tblGoalSheetNote);

            if (goalSheets.Count > 0)
            {
                string userName = "";
                if (goalSheets[0].CreatedBy.LastName != "")
                {
                    userName = goalSheets[0].CreatedBy.LastName;
                }
                if (goalSheets[0].CreatedBy.FirstName != "")
                {
                    userName += ", " + goalSheets[0].CreatedBy.FirstName;
                }
                string userTypeName = goalSheets[0].CreatedBy.UserTypeName;
                DateTime mValue = Convert.ToDateTime(goalSheets[0].ModifiedOn);
                string modified = mValue.ToString("MMMM dd, yyyy");
                PdfPCell modifiedOn = new PdfPCell(new Phrase(userName + ", " + userTypeName + ", " + modified, ProgressiveReport.font8));
                modifiedOn.HorizontalAlignment = Element.ALIGN_LEFT;
                modifiedOn.VerticalAlignment = Element.ALIGN_MIDDLE;
                modifiedOn.Border = Rectangle.NO_BORDER;
                modifiedOn.PaddingTop = 5f;
                modifiedOn.PaddingBottom = 5f;
                modifiedOn.Colspan = 6;

            }
            PdfPCell chkProvisionOfMeal = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "1"))
            {
                chkProvisionOfMeal = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkProvisionOfMeal.Border = Rectangle.BOX;

            tblCareService.AddCell(chkProvisionOfMeal);
            PdfPCell ProvisionOfMeal = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ProvisionofMeal, ProgressiveReport.tableFont));
            ProvisionOfMeal.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(ProvisionOfMeal);

            PdfPCell chkMAdminstrtion = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "2"))
            {
                chkMAdminstrtion = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkMAdminstrtion.Border = Rectangle.BOX;
            tblCareService.AddCell(chkMAdminstrtion);
            PdfPCell MAdminstrtion = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.MedicationAdministration, ProgressiveReport.tableFont));
            MAdminstrtion.Border = Rectangle.NO_BORDER;
            MAdminstrtion.Colspan = 2;
            tblCareService.AddCell(MAdminstrtion);

            PdfPCell chkBathingAssistance = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "3"))
            {
                chkBathingAssistance = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkBathingAssistance.Border = Rectangle.BOX;
            tblCareService.AddCell(chkBathingAssistance);
            PdfPCell BathingAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWithBathing, ProgressiveReport.tableFont));
            BathingAssistance.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(BathingAssistance);


            PdfPCell chkDressingAssistance = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "4"))
            {
                chkDressingAssistance = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkDressingAssistance.Border = Rectangle.BOX;
            tblCareService.AddCell(chkDressingAssistance);

            PdfPCell DressingAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWithDressing, ProgressiveReport.tableFont));
            DressingAssistance.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(DressingAssistance);

            PdfPCell chkHygineAssistance = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "5"))
            {
                chkHygineAssistance = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            PdfPCell heightCell = new PdfPCell();
            heightCell.FixedHeight = 5f;
            heightCell.Colspan = 9;
            heightCell.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(heightCell);


            chkHygineAssistance.Border = Rectangle.BOX;
            tblCareService.AddCell(chkHygineAssistance);
            PdfPCell HygineAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWithHygiene, ProgressiveReport.tableFont));
            HygineAssistance.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(HygineAssistance);



            PdfPCell chkAmbulationAssistance = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "6"))
            {
                chkAmbulationAssistance = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkAmbulationAssistance.Border = Rectangle.BOX;
            tblCareService.AddCell(chkAmbulationAssistance);
            PdfPCell AmbulationAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWithAmbulation, ProgressiveReport.tableFont));
            AmbulationAssistance.Border = Rectangle.NO_BORDER;
            AmbulationAssistance.Colspan = 2;
            tblCareService.AddCell(AmbulationAssistance);

            PdfPCell chkFeedingAssistance = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "7"))
            {
                chkFeedingAssistance = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkFeedingAssistance.Border = Rectangle.BOX;
            tblCareService.AddCell(chkFeedingAssistance);
            PdfPCell FeedingAssistance = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.AssistanceWithFeeding, ProgressiveReport.tableFont));
            FeedingAssistance.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(FeedingAssistance);

            PdfPCell chkSkinCare = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "8"))
            {
                chkSkinCare = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkSkinCare.Border = Rectangle.BOX;
            tblCareService.AddCell(chkSkinCare);
            PdfPCell SkinCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.SkinAndWoundCare, ProgressiveReport.tableFont));
            SkinCare.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(SkinCare);

            tblCareService.AddCell(heightCell);

            PdfPCell chkDemantiaCare = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "9"))
            {
                chkDemantiaCare = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkDemantiaCare.Border = Rectangle.BOX;
            tblCareService.AddCell(chkDemantiaCare);
            PdfPCell DemantiaCare = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.DementiaCare, ProgressiveReport.tableFont));
            DemantiaCare.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(DemantiaCare);

            PdfPCell chkContinence = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "10"))
            {
                chkContinence = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkContinence.Border = Rectangle.BOX;
            tblCareService.AddCell(chkContinence);
            PdfPCell Continence = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.ContinenceCare, ProgressiveReport.tableFont));
            Continence.Border = Rectangle.NO_BORDER;
            Continence.Colspan = 2;
            tblCareService.AddCell(Continence);

            PdfPCell chkPhysician = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "14"))
            {
                chkPhysician = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkPhysician.Border = Rectangle.BOX;
            tblCareService.AddCell(chkPhysician);
            PdfPCell Physician = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Physician + " *", ProgressiveReport.tableFont));
            Physician.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(Physician);

            PdfPCell chkNursing = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "15"))
            {
                chkNursing = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkNursing.Border = Rectangle.BOX;
            tblCareService.AddCell(chkNursing);
            PdfPCell Nursing = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Nursing + " **", ProgressiveReport.tableFont));
            Nursing.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(Nursing);

            tblCareService.AddCell(heightCell);

            PdfPCell chkPharmacy = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "15"))
            {
                chkPharmacy = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }

            chkPharmacy.Border = Rectangle.BOX;
            tblCareService.AddCell(chkPharmacy);
            PdfPCell Pharmacy = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Pharmacy + " ***", ProgressiveReport.tableFont));
            Pharmacy.Border = Rectangle.NO_BORDER;
            Pharmacy.Colspan = 8;
            tblCareService.AddCell(Pharmacy);

            tblCareService.AddCell(heightCell);

            PdfPCell chkOther = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "12"))
            {
                chkOther = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }
            chkOther.Border = Rectangle.BOX;
            tblCareService.AddCell(chkOther);
            PdfPCell Other = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.Other, ProgressiveReport.tableFont));
            Other.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(Other);

            PdfPCell otherEmpty = new PdfPCell();
            otherEmpty.Border = Rectangle.NO_BORDER;


            PdfPCell OtherValue = new PdfPCell(new Phrase(otherService, ProgressiveReport.tableFont));
            OtherValue.Colspan = 2;
            OtherValue.Border = Rectangle.NO_BORDER;
            OtherValue.BorderWidthBottom = .5f;
            tblCareService.AddCell(OtherValue);
            tblCareService.AddCell(otherEmpty);


            PdfPCell chkOtherFee = new PdfPCell();
            if (services != "" && GetGoalSheetService(services, "11"))
            {
                chkOtherFee = new PdfPCell(new Phrase("P", fontBoldTextOP1));
            }
            chkOtherFee.Border = Rectangle.BOX;
            tblCareService.AddCell(chkOtherFee);
            PdfPCell OtherFee = new PdfPCell(new Phrase(Resources.Qola.UIverbiage.OtherFeeforServices, ProgressiveReport.tableFont));
            OtherFee.Border = Rectangle.NO_BORDER;
            tblCareService.AddCell(OtherFee);


            PdfPCell OtherFeeValue = new PdfPCell(new Phrase(otherFeeService, ProgressiveReport.tableFont));
            OtherFeeValue.Colspan = 2;
            OtherFeeValue.Border = Rectangle.NO_BORDER;
            OtherFeeValue.BorderWidthBottom = .5f;
            tblCareService.AddCell(OtherFeeValue);
            tblCareService.AddCell(heightCell);




            PdfPCell PhysiansCell = new PdfPCell(new Phrase("*Any service that is offered by a member of the College of Physicians and Surgeons, and provided while engaging in the practice of medicine.", ProgressiveReport.font6I));
            PhysiansCell.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
            PhysiansCell.Border = 0;
            PhysiansCell.Colspan = 9;
            tblCareService.AddCell(PhysiansCell);

            PdfPCell NurseCell = new PdfPCell(new Phrase("** Any service that is offered by a member of the College of Nurses, and provided while engaging in the practice of nursing.", ProgressiveReport.font6I));
            NurseCell.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
            NurseCell.Border = 0;
            NurseCell.Colspan = 9;
            tblCareService.AddCell(NurseCell);

            PdfPCell PharmacyCell = new PdfPCell(new Phrase("*** Any service that is offered by a member of the College of Pharmacists, and provided while engaging in the practice of pharmacy.", ProgressiveReport.font6I));
            PharmacyCell.HorizontalAlignment = Element.ALIGN_JUSTIFIED;
            PharmacyCell.Border = 0;
            PharmacyCell.Colspan = 9;
            tblCareService.AddCell(PharmacyCell);

            PdfPCell emptyspaceRow = new PdfPCell();
            emptyspaceRow.MinimumHeight = 10f;
            emptyspaceRow.Colspan = 9;
            emptyspaceRow.Border = 0;
            tblCareService.AddCell(emptyspaceRow);


            PdfPCell careCell = new PdfPCell(tblCareService);
            careCell.Border = 0;
            table.AddCell(careCell);
        }
        return table;
    }

}
#endregion "Resident Profile"